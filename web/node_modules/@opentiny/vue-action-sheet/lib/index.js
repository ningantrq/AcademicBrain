function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return MobileTemplate;
};
var ActionSheet = defineComponent({
  name: $prefix + "ActionSheet",
  props: _extends({}, $props, {
    menus: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    modelValue: [Number, String, Array],
    visible: {
      type: Boolean,
      default: false
    },
    ellipsis: {
      type: Boolean,
      default: false
    },
    height: {
      type: String,
      default: "100%"
    },
    valueField: {
      type: String,
      default: "id"
    },
    textField: {
      type: String,
      default: "label"
    },
    title: String,
    showHeader: {
      type: Boolean,
      default: true
    },
    showFooter: {
      type: Boolean,
      default: false
    },
    customClass: [String, Object, Array],
    contentClass: String,
    type: {
      type: String,
      default: "normal"
    },
    mask: {
      type: Boolean,
      default: true
    },
    maskClosable: {
      type: Boolean,
      default: true
    },
    contentPosition: {
      type: Boolean,
      default: false
    },
    contentStyle: {
      type: Object,
      default: function _default2() {
        return {};
      }
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
ActionSheet.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
ActionSheet.install = function(Vue) {
  Vue.component(ActionSheet.name, ActionSheet);
};
ActionSheet.version = version;
export {
  ActionSheet as default
};
