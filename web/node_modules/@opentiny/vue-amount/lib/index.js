import Popover from "@opentiny/vue-popover";
import Input from "@opentiny/vue-input";
import Currency from "@opentiny/vue-currency";
import Button from "@opentiny/vue-button";
import DatePicker from "@opentiny/vue-date-picker";
import { IconCoin } from "@opentiny/vue-icon";
import { defineComponent, $prefix, setup as _setup } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/amount/vue";
import { resolveComponent, openBlock, createElementBlock, mergeProps, createVNode, withCtx, createElementVNode, toDisplayString, createCommentVNode, createTextVNode } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

import "@opentiny/vue-theme/amount/index.css";
var _sfc_main = defineComponent({
  inheritAttrs: false,
  name: $prefix + "Amount",
  components: {
    TinyPopover: Popover,
    TinyInput: Input,
    TinyButton: Button,
    TinyCurrency: Currency,
    TinyDatePicker: DatePicker,
    IconCoin: IconCoin()
  },
  props: {
    modelValue: {
      type: [Number, String]
    },
    tabindex: {
      type: String,
      default: "1"
    },
    size: String,
    placeholder: {
      type: String,
      default: ""
    },
    currency: {
      type: String,
      default: "CNY"
    },
    date: [String, Date],
    dateAllowEmpty: {
      type: Boolean,
      default: false
    },
    digits: {
      type: Number,
      default: 2
    },
    rounding: {
      type: Boolean,
      default: true
    },
    maxLen: {
      type: Number,
      default: 15
    },
    negative: {
      type: Boolean,
      default: true
    },
    disabled: {
      type: Boolean,
      default: false
    },
    fetchCurrency: Function,
    fields: Object,
    popperClass: String,
    popperAppendToBody: {
      type: Boolean,
      default: true
    },
    format: Object,
    type: {
      type: String,
      default: "amount"
    },
    holdZero: {
      type: Boolean,
      default: true
    },
    modelTruncation: {
      type: Boolean,
      default: true
    },
    strictInput: {
      type: Boolean,
      default: false
    },
    plugin: Function,
    popUp: {
      type: Boolean,
      default: true
    },
    hideCurrency: {
      type: Boolean,
      default: false
    }
  },
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _hoisted_1 = {
  class: "popover-con",
  ref: "popover"
};
var _hoisted_2 = {
  key: 0,
  class: "module"
};
var _hoisted_3 = {
  class: "popover-left"
};
var _hoisted_4 = {
  key: 1,
  class: "module"
};
var _hoisted_5 = {
  class: "popover-left"
};
var _hoisted_6 = {
  class: "module"
};
var _hoisted_7 = {
  class: "popover-left"
};
var _hoisted_8 = {
  class: "module"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_icon_coin = resolveComponent("icon-coin");
  var _component_tiny_input = resolveComponent("tiny-input");
  var _component_tiny_currency = resolveComponent("tiny-currency");
  var _component_tiny_date_picker = resolveComponent("tiny-date-picker");
  var _component_tiny_button = resolveComponent("tiny-button");
  var _component_tiny_popover = resolveComponent("tiny-popover");
  return openBlock(), createElementBlock(
    "div",
    mergeProps({
      ref: "root",
      class: "tiny-amount"
    }, _ctx.a(_ctx.$attrs, ["^on[A-Z]"])),
    [createVNode(_component_tiny_popover, {
      modelValue: _ctx.state.visible,
      "onUpdate:modelValue": _cache[4] || (_cache[4] = function($event) {
        return _ctx.state.visible = $event;
      }),
      placement: "bottom-start",
      "popper-class": "tiny-amount-popper" + (_ctx.popperClass ? " " + _ctx.popperClass : ""),
      trigger: "manual",
      "append-to-body": _ctx.popperAppendToBody
    }, {
      reference: withCtx(function() {
        return [createVNode(_component_tiny_input, {
          tabindex: _ctx.tabindex,
          size: _ctx.size,
          modelValue: _ctx.getAmountText(),
          maxlength: _ctx.maxLen,
          placeholder: _ctx.placeholder,
          disabled: _ctx.disabled,
          onFocus: _ctx.inputFocus,
          onBlur: _ctx.inputBlur,
          "onUpdate:modelValue": _ctx.onInput
        }, {
          suffix: withCtx(function() {
            return [createElementVNode("div", {
              onClick: _cache[0] || (_cache[0] = function() {
                return _ctx.toggleVisible && _ctx.toggleVisible.apply(_ctx, arguments);
              }),
              class: "tiny-amount-input-icon"
            }, [createVNode(_component_icon_coin, {
              class: "tiny-svg-size"
            })])];
          }),
          _: 1
          /* STABLE */
        }, 8, ["tabindex", "size", "modelValue", "maxlength", "placeholder", "disabled", "onFocus", "onBlur", "onUpdate:modelValue"])];
      }),
      default: withCtx(function() {
        return [createElementVNode(
          "div",
          _hoisted_1,
          [_ctx.popUp ? (openBlock(), createElementBlock("div", _hoisted_2, [createElementVNode(
            "div",
            _hoisted_3,
            toDisplayString(_ctx.t("ui.amount.currency")),
            1
            /* TEXT */
          ), createVNode(_component_tiny_currency, {
            class: "popover-right",
            modelValue: _ctx.editorState.currency,
            "onUpdate:modelValue": _cache[1] || (_cache[1] = function($event) {
              return _ctx.editorState.currency = $event;
            }),
            clearable: false,
            fields: _ctx.fields,
            "fetch-currency": _ctx.fetchCurrency,
            "popper-class": _ctx.popperClass,
            "popper-append-to-body": _ctx.popperAppendToBody,
            currency: _ctx.currency
          }, null, 8, ["modelValue", "fields", "fetch-currency", "popper-class", "popper-append-to-body", "currency"])])) : createCommentVNode("v-if", true), _ctx.date || _ctx.dateAllowEmpty ? (openBlock(), createElementBlock("div", _hoisted_4, [createElementVNode(
            "div",
            _hoisted_5,
            toDisplayString(_ctx.t("ui.amount.date")),
            1
            /* TEXT */
          ), createVNode(_component_tiny_date_picker, {
            class: "popover-right",
            modelValue: _ctx.editorState.date,
            "onUpdate:modelValue": _cache[2] || (_cache[2] = function($event) {
              return _ctx.editorState.date = $event;
            }),
            "popper-class": "tiny-amount-popper" + (_ctx.popperClass ? " " + _ctx.popperClass : ""),
            "popper-append-to-body": _ctx.popperAppendToBody
          }, null, 8, ["modelValue", "popper-class", "popper-append-to-body"])])) : createCommentVNode("v-if", true), createElementVNode("div", _hoisted_6, [createElementVNode(
            "div",
            _hoisted_7,
            toDisplayString(_ctx.t("ui.amount.amount")),
            1
            /* TEXT */
          ), createVNode(_component_tiny_input, {
            class: "popover-right",
            modelValue: _ctx.editorState.amount,
            "onUpdate:modelValue": [_cache[3] || (_cache[3] = function($event) {
              return _ctx.editorState.amount = $event;
            }), _ctx.popInput],
            maxlength: _ctx.maxLen
          }, null, 8, ["modelValue", "onUpdate:modelValue", "maxlength"])]), createElementVNode("div", _hoisted_8, [createVNode(_component_tiny_button, {
            type: "primary",
            onClick: _ctx.save
          }, {
            default: withCtx(function() {
              return [createTextVNode(
                toDisplayString(_ctx.t("ui.base.confirm")),
                1
                /* TEXT */
              )];
            }),
            _: 1
            /* STABLE */
          }, 8, ["onClick"]), createVNode(_component_tiny_button, {
            onClick: _ctx.reset
          }, {
            default: withCtx(function() {
              return [createTextVNode(
                toDisplayString(_ctx.t("ui.base.reset")),
                1
                /* TEXT */
              )];
            }),
            _: 1
            /* STABLE */
          }, 8, ["onClick"])])],
          512
          /* NEED_PATCH */
        )];
      }),
      _: 1
      /* STABLE */
    }, 8, ["modelValue", "popper-class", "append-to-body"])],
    16
    /* FULL_PROPS */
  );
}
var Amount = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.13.0";
Amount.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Amount.install = function(Vue) {
  Vue.component(Amount.name, Amount);
};
Amount.version = version;
export {
  Amount as default
};
