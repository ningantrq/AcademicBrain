import { renderless, api } from "@opentiny/vue-renderless/autocomplete/vue";
import { defineComponent, directive, props, setup as _setup } from "@opentiny/vue-common";
import Scrollbar from "@opentiny/vue-scrollbar";
import Input from "@opentiny/vue-input";
import Clickoutside from "@opentiny/vue-renderless/common/deps/clickoutside";
import { iconLoading } from "@opentiny/vue-icon";
import { resolveComponent, resolveDirective, withDirectives, openBlock, createElementBlock, createVNode, mergeProps, withKeys, withModifiers, createSlots, withCtx, renderSlot, Transition, createElementVNode, normalizeClass, normalizeStyle, Fragment, renderList, createTextVNode, toDisplayString, vShow } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  components: {
    TinyInput: Input,
    TinyScrollbar: Scrollbar,
    IconLoading: iconLoading()
  },
  directives: directive({
    Clickoutside
  }),
  props: [].concat(props, ["valueKey", "popperClass", "tabindex", "popperOptions", "placeholder", "clearable", "disabled", "name", "size", "modelValue", "maxlength", "minlength", "autofocus", "fetchSuggestions", "triggerOnFocus", "customItem", "selectWhenUnmatched", "prefixIcon", "suffixIcon", "label", "debounce", "placement", "hideLoading", "popperAppendToBody", "highlightFirstItem", "displayOnly"]),
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = ["aria-expanded", "aria-owns"];
var _hoisted_2 = {
  key: 0,
  class: "tiny-autocomplete-suggestion__list-loading"
};
var _hoisted_3 = ["onClick", "id", "aria-selected"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_input = resolveComponent("tiny-input");
  var _component_icon_loading = resolveComponent("icon-loading");
  var _component_tiny_scrollbar = resolveComponent("tiny-scrollbar");
  var _directive_clickoutside = resolveDirective("clickoutside");
  return withDirectives((openBlock(), createElementBlock("div", {
    class: "tiny-autocomplete",
    "aria-haspopup": "listbox",
    role: "combobox",
    "aria-expanded": _ctx.state.suggestionVisible,
    "aria-owns": _ctx.state.id
  }, [createVNode(_component_tiny_input, mergeProps({
    tabindex: _ctx.tabindex,
    "display-only": _ctx.displayOnly,
    ref: "input"
  }, _ctx.f(_ctx.$props, _ctx.$attrs), {
    "onUpdate:modelValue": _ctx.handleChange,
    onFocus: _ctx.handleFocus,
    onBlur: _ctx.handleBlur,
    onClear: _ctx.handleClear,
    onKeydown: [_cache[0] || (_cache[0] = withKeys(withModifiers(function($event) {
      return _ctx.highlight(_ctx.state.highlightedIndex - 1);
    }, ["prevent"]), ["up"])), _cache[1] || (_cache[1] = withKeys(withModifiers(function($event) {
      return _ctx.highlight(_ctx.state.highlightedIndex + 1);
    }, ["prevent"]), ["down"])), withKeys(_ctx.handleKeyEnter, ["enter"]), withKeys(_ctx.close, ["tab"])]
  }), createSlots({
    _: 2
    /* DYNAMIC */
  }, [_ctx.slots.prepend ? {
    name: "prepend",
    fn: withCtx(function() {
      return [renderSlot(_ctx.$slots, "prepend")];
    }),
    key: "0"
  } : void 0, _ctx.slots.append ? {
    name: "append",
    fn: withCtx(function() {
      return [renderSlot(_ctx.$slots, "append")];
    }),
    key: "1"
  } : void 0, _ctx.slots.prefix ? {
    name: "prefix",
    fn: withCtx(function() {
      return [renderSlot(_ctx.$slots, "prefix")];
    }),
    key: "2"
  } : void 0, _ctx.slots.suffix ? {
    name: "suffix",
    fn: withCtx(function() {
      return [renderSlot(_ctx.$slots, "suffix")];
    }),
    key: "3"
  } : void 0]), 1040, ["tabindex", "display-only", "onUpdate:modelValue", "onFocus", "onBlur", "onClear", "onKeydown"]), createVNode(Transition, {
    name: "tiny-zoom-in-top",
    onAfterLeave: _ctx.doDestroy,
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        {
          ref: "popper",
          class: normalizeClass(["tiny-autocomplete tiny-autocomplete-suggestion tiny-popper", [_ctx.popperClass ? _ctx.popperClass : "", {
            "is-loading": !_ctx.hideLoading && _ctx.state.loading
          }]]),
          style: normalizeStyle({
            width: _ctx.suggestionState.dropdownWidth
          }),
          role: "region"
        },
        [createVNode(_component_tiny_scrollbar, {
          tag: "ul",
          "wrap-class": "tiny-autocomplete-suggestion__wrap",
          "view-class": "tiny-autocomplete-suggestion__list",
          "margin-bottom-adjust": 6
        }, {
          default: withCtx(function() {
            return [!_ctx.hideLoading && _ctx.state.loading ? (openBlock(), createElementBlock("li", _hoisted_2, [createVNode(_component_icon_loading, {
              width: "1em",
              height: "1em"
            })])) : (openBlock(true), createElementBlock(
              Fragment,
              {
                key: 1
              },
              renderList(_ctx.state.suggestions, function(item, index) {
                return openBlock(), createElementBlock("li", {
                  key: index,
                  class: normalizeClass(["tiny-autocomplete-suggestion__list-item", {
                    highlighted: _ctx.state.highlightedIndex === index
                  }]),
                  onClick: function onClick($event) {
                    return _ctx.select(item);
                  },
                  id: _ctx.state.id + "-item-" + index,
                  role: "option",
                  "aria-selected": _ctx.state.highlightedIndex === index
                }, [renderSlot(_ctx.$slots, "default", {
                  slotScope: item
                }, function() {
                  return [createTextVNode(
                    toDisplayString(item[_ctx.valueKey]),
                    1
                    /* TEXT */
                  )];
                })], 10, _hoisted_3);
              }),
              128
              /* KEYED_FRAGMENT */
            ))];
          }),
          _: 3
          /* FORWARDED */
        })],
        6
        /* CLASS, STYLE */
      ), [[vShow, _ctx.suggestionState.showPopper]])];
    }),
    _: 3
    /* FORWARDED */
  }, 8, ["onAfterLeave"])], 8, _hoisted_1)), [[_directive_clickoutside, _ctx.close]]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
