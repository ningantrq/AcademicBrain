import { createVNode } from "vue";
import { defineComponent, $prefix, setup as _setup, h } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/avatar/vue";
import "@opentiny/vue-theme-mobile/avatar/index.css";
var $constants = {
  COMPONENT_PREFIX: "tiny-mobile-avatar",
  ICON: "icon"
};
var _sfc_main = /* @__PURE__ */ defineComponent({
  name: $prefix + "Avatar",
  props: {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    alt: String,
    error: Function,
    fit: {
      type: String,
      default: "cover"
    },
    icon: Object,
    shape: {
      type: String,
      default: "circle",
      validator: function validator(val) {
        return ~["circle", "square"].indexOf(val);
      }
    },
    size: {
      type: [Number, String],
      validator: function validator2(val) {
        return typeof val === "string" ? ~["large", "medium", "small"].indexOf(val) : typeof val === "number";
      }
    },
    src: String,
    srcSet: String
  },
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true,
      h
    });
  },
  render: function render() {
    var _this = this;
    var alt = this.alt, fit = this.fit, Icon = this.icon, size = this.size, src = this.src, srcSet = this.srcSet, _this$state = this.state, isImageExist = _this$state.isImageExist, avatarClass = _this$state.avatarClass;
    var hasImageSrc = isImageExist && src;
    var sizeStyle = {};
    if (typeof size === "number") {
      sizeStyle = {
        height: size + "px",
        width: size + "px",
        lineHeight: size + "px"
      };
    }
    var renderAvatar = function renderAvatar2() {
      if (hasImageSrc) {
        return createVNode("img", {
          "src": src,
          "alt": alt,
          "srcSet": srcSet,
          "style": {
            "object-fit": fit
          },
          "onError": _this.handleError
        }, null);
      }
      if (Icon) {
        return createVNode(Icon, null, null);
      }
      return _this.$slots.default && _this.$slots.default();
    };
    return createVNode("span", {
      "class": avatarClass,
      "style": sizeStyle
    }, [renderAvatar()]);
  }
});
var version = "3.13.0";
_sfc_main.install = function(Vue) {
  Vue.component(_sfc_main.name, _sfc_main);
};
_sfc_main.version = version;
export {
  _sfc_main as default
};
