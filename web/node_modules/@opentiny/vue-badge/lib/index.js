function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var badgeProps = _extends({}, $props, {
  showLeft: {
    type: Boolean,
    default: false
  },
  isDot: {
    type: Boolean,
    default: false
  },
  isFixed: {
    type: Boolean,
    default: true
  },
  isMini: {
    type: Boolean,
    default: false
  },
  max: Number,
  value: [String, Number],
  modelValue: [String, Number],
  href: String,
  target: String,
  hidden: {
    type: Boolean,
    default: false
  },
  type: {
    type: String,
    validator: function validator(value) {
      return Boolean(~["primary", "success", "warning", "info", "danger", "icon", "label"].indexOf(value));
    }
  },
  badgeClass: String,
  offset: {
    type: Array,
    default: function _default() {
      return [0, 0];
    }
  },
  data: [String, Number]
});
var Badge = defineComponent({
  name: $prefix + "Badge",
  props: badgeProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
Badge.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Badge.install = function(Vue) {
  Vue.component(Badge.name, Badge);
};
Badge.version = version;
export {
  Badge as default
};
