function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var buttonProps = _extends({}, $props, {
  type: {
    type: String,
    default: "default"
  },
  tabindex: {
    type: String,
    default: "1"
  },
  icon: {
    type: [Object, String],
    default: ""
  },
  text: {
    type: String,
    default: ""
  },
  resetTime: {
    type: Number,
    default: 1e3
  },
  nativeType: {
    type: String,
    default: "button"
  },
  size: {
    type: String,
    default: "",
    validator: function validator(val) {
      return ["large", "medium", "small", "mini", ""].includes(val);
    }
  },
  round: Boolean,
  plain: Boolean,
  circle: Boolean,
  loading: Boolean,
  disabled: Boolean,
  autofocus: Boolean,
  customClass: {
    type: String,
    default: ""
  },
  banner: {
    type: Boolean,
    default: false
  },
  ghost: Boolean
});
var Button = defineComponent({
  name: $prefix + "Button",
  inject: {
    buttonGroup: {
      default: ""
    }
  },
  props: buttonProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
Button.install = function(Vue) {
  Vue.component(Button.name, Button);
};
Button.version = version;
export {
  Button as default
};
