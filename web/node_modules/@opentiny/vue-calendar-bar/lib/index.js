function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return MobileFirstTemplate;
};
var $constants = {
  POSITON: {
    START: "start",
    CENTER: "center",
    END: "end"
  }
};
var CalendarBar = defineComponent({
  name: $prefix + "CalendarBar",
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    modelValue: String,
    config: {
      type: Object,
      default: function _default2() {
        return {};
      }
    },
    cascaderPosition: {
      type: String,
      default: "center",
      validator: function validator(value) {
        return Boolean(~Object.values($constants.POSITON).indexOf(value));
      }
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
CalendarBar.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
CalendarBar.install = function(Vue) {
  Vue.component(CalendarBar.name, CalendarBar);
};
CalendarBar.version = version;
export {
  CalendarBar as default
};
