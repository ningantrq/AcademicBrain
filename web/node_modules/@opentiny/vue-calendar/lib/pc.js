import { renderless, api } from "@opentiny/vue-renderless/calendar/vue";
import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import Tooltip from "@opentiny/vue-tooltip";
import Popover from "@opentiny/vue-popover";
import Button from "@opentiny/vue-button";
import { iconChevronUp, iconChevronDown } from "@opentiny/vue-icon";
import { resolveComponent, openBlock, createElementBlock, createElementVNode, toDisplayString, createCommentVNode, renderSlot, createVNode, withCtx, createBlock, resolveDynamicComponent, Fragment, renderList, normalizeClass, withDirectives, vShow, createTextVNode } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  components: {
    Tooltip,
    Popover,
    Button,
    IconChevronUp: iconChevronUp(),
    IconChevronDown: iconChevronDown()
  },
  props: [].concat(props, ["mode", "year", "month", "events", "showSelected"]),
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-calendar"
};
var _hoisted_2 = {
  class: "tiny-calendar__header"
};
var _hoisted_3 = {
  key: 0,
  class: "tiny-calendar__selected"
};
var _hoisted_4 = {
  class: "tiny-calendar__tool"
};
var _hoisted_5 = {
  class: "tiny-calendar__input"
};
var _hoisted_6 = ["value"];
var _hoisted_7 = {
  class: "tiny-calendar__input-btn"
};
var _hoisted_8 = {
  class: "tiny-calendar__selector"
};
var _hoisted_9 = {
  class: "tiny-calendar__poplist"
};
var _hoisted_10 = ["onClick", "title"];
var _hoisted_11 = {
  class: "tiny-calendar__input"
};
var _hoisted_12 = ["value"];
var _hoisted_13 = {
  class: "tiny-calendar__input-btn"
};
var _hoisted_14 = {
  class: "tiny-calendar__selector"
};
var _hoisted_15 = {
  class: "tiny-calendar__poplist"
};
var _hoisted_16 = ["onClick", "title"];
var _hoisted_17 = {
  class: "tiny-calendar__tabs"
};
var _hoisted_18 = {
  style: {
    "table-layout": "fixed"
  }
};
var _hoisted_19 = ["onClick"];
var _hoisted_20 = {
  class: "label"
};
var _hoisted_21 = {
  key: 0,
  class: "tiny-calendar__events tiny-min-scrollbar"
};
var _hoisted_22 = {
  class: "tiny-calendar__tip-header"
};
var _hoisted_23 = {
  class: "tiny-calendar__tip-year"
};
var _hoisted_24 = {
  class: "tiny-calendar__tip-hours"
};
var _hoisted_25 = {
  class: "tiny-calendar__tip-content"
};
var _hoisted_26 = {
  style: {
    "table-layout": "fixed"
  }
};
var _hoisted_27 = ["onClick"];
var _hoisted_28 = {
  class: "label"
};
var _hoisted_29 = {
  class: "tiny-calendar__events tiny-min-scrollbar"
};
var _hoisted_30 = {
  class: "tiny-calendar__tip-header"
};
var _hoisted_31 = {
  class: "tiny-calendar__tip-year"
};
var _hoisted_32 = {
  class: "tiny-calendar__tip-hours"
};
var _hoisted_33 = {
  class: "tiny-calendar__tip-content"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_Popover = resolveComponent("Popover");
  var _component_Button = resolveComponent("Button");
  var _component_tooltip = resolveComponent("tooltip");
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode("div", _hoisted_2, [_ctx.showSelected && _ctx.state.selectedTip ? (openBlock(), createElementBlock(
    "div",
    _hoisted_3,
    toDisplayString(_ctx.state.selectedTip),
    1
    /* TEXT */
  )) : createCommentVNode("v-if", true), renderSlot(_ctx.$slots, "tool", {
    slotScope: _ctx.state
  }, function() {
    return [createElementVNode("ul", _hoisted_4, [createElementVNode("li", null, [createVNode(_component_Popover, {
      modelValue: _ctx.state.showYear,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = function($event) {
        return _ctx.state.showYear = $event;
      }),
      placement: "bottom-start",
      trigger: "click",
      transition: "tiny-transition-zoom-in-top",
      "popper-class": "tiny-calendar is-popover",
      "visible-arrow": false
    }, {
      reference: withCtx(function() {
        return [createElementVNode("div", _hoisted_5, [createElementVNode("input", {
          value: _ctx.state.activeYear + _ctx.t("ui.datepicker.year"),
          type: "text",
          readonly: ""
        }, null, 8, _hoisted_6), createElementVNode("div", _hoisted_7, [(openBlock(), createBlock(resolveDynamicComponent(_ctx.state.showYear ? "icon-chevron-up" : "icon-chevron-down"), {
          class: "tiny-svg-size"
        }))])])];
      }),
      default: withCtx(function() {
        return [createElementVNode("div", _hoisted_8, [createElementVNode("ul", _hoisted_9, [(openBlock(true), createElementBlock(
          Fragment,
          null,
          renderList(_ctx.state.dropdownYear, function(year) {
            return openBlock(), createElementBlock("li", {
              key: year,
              class: normalizeClass(["tiny-calendar__list-item", {
                "is-selected": _ctx.state.activeYear === year
              }]),
              onClick: function onClick() {
                _ctx.state.activeYear = year;
                _ctx.state.showYear = false;
              },
              title: year + _ctx.t("ui.datepicker.year")
            }, toDisplayString(year + _ctx.t("ui.datepicker.year")), 11, _hoisted_10);
          }),
          128
          /* KEYED_FRAGMENT */
        ))])])];
      }),
      _: 1
      /* STABLE */
    }, 8, ["modelValue"])]), withDirectives(createElementVNode(
      "li",
      null,
      [createVNode(_component_Popover, {
        modelValue: _ctx.state.showMonth,
        "onUpdate:modelValue": _cache[1] || (_cache[1] = function($event) {
          return _ctx.state.showMonth = $event;
        }),
        transition: "tiny-transition-zoom-in-top",
        placement: "bottom-start",
        trigger: "click",
        "popper-class": "tiny-calendar is-popover",
        "visible-arrow": false
      }, {
        reference: withCtx(function() {
          return [createElementVNode("div", _hoisted_11, [createElementVNode("input", {
            value: _ctx.t("ui.datepicker.month" + _ctx.state.activeMonth),
            type: "text",
            readonly: ""
          }, null, 8, _hoisted_12), createElementVNode("div", _hoisted_13, [(openBlock(), createBlock(resolveDynamicComponent(_ctx.state.showYear ? "icon-chevron-up" : "icon-chevron-down"), {
            class: "tiny-svg-size"
          }))])])];
        }),
        default: withCtx(function() {
          return [createElementVNode("div", _hoisted_14, [createElementVNode("ul", _hoisted_15, [(openBlock(), createElementBlock(
            Fragment,
            null,
            renderList(12, function(month) {
              return createElementVNode("li", {
                key: month,
                class: normalizeClass(["tiny-calendar__list-item", {
                  "is-selected": _ctx.state.activeMonth === month
                }]),
                onClick: function onClick() {
                  _ctx.state.activeMonth = month;
                  _ctx.state.showMonth = false;
                },
                title: _ctx.t("ui.datepicker.month" + month)
              }, toDisplayString(_ctx.t("ui.datepicker.month" + month)), 11, _hoisted_16);
            }),
            64
            /* STABLE_FRAGMENT */
          ))])])];
        }),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"])],
      512
      /* NEED_PATCH */
    ), [[vShow, _ctx.state.displayMode === "month"]]), createElementVNode("li", null, [createVNode(_component_Button, {
      type: "primary",
      onClick: _ctx.toToday
    }, {
      default: withCtx(function() {
        return [createTextVNode(
          toDisplayString(_ctx.state.displayMode === "month" ? _ctx.t("ui.datepicker.today") : _ctx.t("ui.datepicker.currentMonth")),
          1
          /* TEXT */
        )];
      }),
      _: 1
      /* STABLE */
    }, 8, ["onClick"])]), createElementVNode("li", null, [createElementVNode("ul", _hoisted_17, [createElementVNode(
      "li",
      {
        class: normalizeClass({
          active: _ctx.state.displayMode === "month"
        }),
        onClick: _cache[2] || (_cache[2] = function($event) {
          return _ctx.toggeModel("month");
        })
      },
      toDisplayString(_ctx.t("ui.datepicker.month")),
      3
      /* TEXT, CLASS */
    ), createElementVNode(
      "li",
      {
        class: normalizeClass({
          active: _ctx.state.displayMode === "year"
        }),
        onClick: _cache[3] || (_cache[3] = function($event) {
          return _ctx.toggeModel("year");
        })
      },
      toDisplayString(_ctx.t("ui.calendar.showType.year")),
      3
      /* TEXT, CLASS */
    )])])])];
  })]), createElementVNode(
    "div",
    {
      class: normalizeClass(["tiny-calendar__main", _ctx.state.displayMode])
    },
    [withDirectives(createElementVNode(
      "table",
      _hoisted_18,
      [createElementVNode("tr", null, [createElementVNode(
        "th",
        null,
        toDisplayString(_ctx.t("ui.datepicker.weeks.sun")),
        1
        /* TEXT */
      ), createElementVNode(
        "th",
        null,
        toDisplayString(_ctx.t("ui.datepicker.weeks.mon")),
        1
        /* TEXT */
      ), createElementVNode(
        "th",
        null,
        toDisplayString(_ctx.t("ui.datepicker.weeks.tue")),
        1
        /* TEXT */
      ), createElementVNode(
        "th",
        null,
        toDisplayString(_ctx.t("ui.datepicker.weeks.wed")),
        1
        /* TEXT */
      ), createElementVNode(
        "th",
        null,
        toDisplayString(_ctx.t("ui.datepicker.weeks.thu")),
        1
        /* TEXT */
      ), createElementVNode(
        "th",
        null,
        toDisplayString(_ctx.t("ui.datepicker.weeks.fri")),
        1
        /* TEXT */
      ), createElementVNode(
        "th",
        null,
        toDisplayString(_ctx.t("ui.datepicker.weeks.sat")),
        1
        /* TEXT */
      )]), (openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.state.calendar, function(item, index) {
          return openBlock(), createElementBlock("tr", {
            key: index
          }, [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(item, function(day, i) {
              return openBlock(), createElementBlock("td", {
                key: i,
                onClick: function onClick($event) {
                  return _ctx.selectDay(day);
                },
                width: "14.2857%"
              }, [createElementVNode(
                "div",
                {
                  class: normalizeClass(["tiny-calendar__day", {
                    selected: !(day.isLast || day.isNext) && _ctx.state.selectedDate === _ctx.getTime(day.value),
                    disable: day.isLast || day.isNext,
                    today: _ctx.isToday(day)
                  }])
                },
                [createElementVNode(
                  "div",
                  _hoisted_20,
                  toDisplayString(day.value),
                  1
                  /* TEXT */
                ), !(day.isLast || day.isNext) ? (openBlock(), createElementBlock("ul", _hoisted_21, [(openBlock(true), createElementBlock(
                  Fragment,
                  null,
                  renderList(_ctx.getEventByDay(day.value), function(_ref, j) {
                    var type = _ref.type, title = _ref.title, content = _ref.content, _ref$parseTime = _ref.parseTime, year = _ref$parseTime.year, month = _ref$parseTime.month, day2 = _ref$parseTime.day, hours = _ref$parseTime.hours, minutes = _ref$parseTime.minutes;
                    return openBlock(), createElementBlock("li", {
                      key: j
                    }, [renderSlot(_ctx.$slots, "day", {
                      slotScope: {
                        type,
                        title,
                        content,
                        year,
                        month,
                        day: day2,
                        hours,
                        minutes
                      }
                    }, function() {
                      return [createVNode(_component_tooltip, {
                        type,
                        placement: "right",
                        class: "tiny-calendar__tip",
                        "popper-class": "tiny-calendar__tip",
                        mode: "hover"
                      }, {
                        content: withCtx(function() {
                          return [createElementVNode("div", null, [createElementVNode("div", _hoisted_22, [createElementVNode(
                            "div",
                            _hoisted_23,
                            toDisplayString(year + "-" + month + "-" + day2),
                            1
                            /* TEXT */
                          ), createElementVNode(
                            "div",
                            _hoisted_24,
                            toDisplayString(hours + ":" + minutes),
                            1
                            /* TEXT */
                          )]), createElementVNode(
                            "div",
                            {
                              class: normalizeClass(["tiny-calendar__tip-title", type || "info"])
                            },
                            toDisplayString(title),
                            3
                            /* TEXT, CLASS */
                          ), createElementVNode(
                            "div",
                            _hoisted_25,
                            toDisplayString(content),
                            1
                            /* TEXT */
                          )])];
                        }),
                        default: withCtx(function() {
                          return [createElementVNode(
                            "div",
                            {
                              class: normalizeClass(["event", type || "info"])
                            },
                            toDisplayString(title),
                            3
                            /* TEXT, CLASS */
                          )];
                        }),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["type"])];
                    })]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))])) : createCommentVNode("v-if", true)],
                2
                /* CLASS */
              )], 8, _hoisted_19);
            }),
            128
            /* KEYED_FRAGMENT */
          ))]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))],
      512
      /* NEED_PATCH */
    ), [[vShow, _ctx.state.displayMode === "month"]]), withDirectives(createElementVNode(
      "table",
      _hoisted_26,
      [(openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.genMonths(), function(item, i) {
          return openBlock(), createElementBlock("tr", {
            key: i
          }, [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(item, function(mth, j) {
              return openBlock(), createElementBlock("td", {
                key: j,
                onClick: function onClick($event) {
                  return _ctx.selectMonth(mth);
                },
                width: "25%"
              }, [createElementVNode(
                "div",
                {
                  class: normalizeClass(["tiny-calendar__day", {
                    selected: _ctx.state.activeMonth === mth,
                    "this-month": _ctx.isThisMonth(mth)
                  }])
                },
                [createElementVNode(
                  "div",
                  _hoisted_28,
                  toDisplayString(_ctx.t("ui.datepicker.month" + mth)),
                  1
                  /* TEXT */
                ), createElementVNode("ul", _hoisted_29, [(openBlock(true), createElementBlock(
                  Fragment,
                  null,
                  renderList(_ctx.getEventByMonth(mth), function(_ref2, k) {
                    var type = _ref2.type, title = _ref2.title, content = _ref2.content, _ref2$parseTime = _ref2.parseTime, year = _ref2$parseTime.year, month = _ref2$parseTime.month, day = _ref2$parseTime.day, hours = _ref2$parseTime.hours, minutes = _ref2$parseTime.minutes;
                    return openBlock(), createElementBlock("li", {
                      key: k
                    }, [renderSlot(_ctx.$slots, "month", {
                      slotScope: {
                        type,
                        title,
                        content,
                        year,
                        month,
                        day,
                        hours,
                        minutes
                      }
                    }, function() {
                      return [createVNode(_component_tooltip, {
                        type,
                        class: "tiny-calendar__tip",
                        placement: "right",
                        "popper-class": "tiny-calendar__tip",
                        mode: "hover"
                      }, {
                        content: withCtx(function() {
                          return [createElementVNode("div", null, [createElementVNode("div", _hoisted_30, [createElementVNode(
                            "div",
                            _hoisted_31,
                            toDisplayString(year + "-" + month + "-" + day),
                            1
                            /* TEXT */
                          ), createElementVNode(
                            "div",
                            _hoisted_32,
                            toDisplayString(hours + ":" + minutes),
                            1
                            /* TEXT */
                          )]), createElementVNode(
                            "div",
                            {
                              class: normalizeClass(["tiny-calendar__tip-title", type || "info"])
                            },
                            toDisplayString(title),
                            3
                            /* TEXT, CLASS */
                          ), createElementVNode(
                            "div",
                            _hoisted_33,
                            toDisplayString(content),
                            1
                            /* TEXT */
                          )])];
                        }),
                        default: withCtx(function() {
                          return [createElementVNode(
                            "div",
                            {
                              class: normalizeClass(["event", type || "info"])
                            },
                            toDisplayString(title),
                            3
                            /* TEXT, CLASS */
                          )];
                        }),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["type"])];
                    })]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))])],
                2
                /* CLASS */
              )], 8, _hoisted_27);
            }),
            128
            /* KEYED_FRAGMENT */
          ))]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))],
      512
      /* NEED_PATCH */
    ), [[vShow, _ctx.state.displayMode === "year"]])],
    2
    /* CLASS */
  )]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
