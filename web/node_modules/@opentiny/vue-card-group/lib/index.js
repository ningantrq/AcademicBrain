function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { renderless, api } from "@opentiny/vue-renderless/card-group/vue";
import { defineComponent, $prefix, $props, setup as _setup } from "@opentiny/vue-common";
import { openBlock, createElementBlock, renderSlot } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  name: $prefix + "CardGroup",
  componentName: "CardGroup",
  emits: ["update:modelValue", "change"],
  props: _extends({}, $props, {
    modelValue: {},
    customClass: String,
    height: String,
    autoWidth: {
      type: Boolean,
      default: true
    },
    size: {
      type: String,
      default: "small"
    },
    status: {
      type: String,
      default: "default"
    },
    checkType: {
      type: String,
      default: ""
    },
    type: {
      type: String,
      default: "text"
    },
    disabled: {
      type: Boolean,
      default: false
    }
  }),
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _hoisted_1 = {
  "data-tag": "tiny-card-group",
  class: "w-full grid gap-4 grid-cols-[repeat(auto-fill,minmax(theme(spacing.54),1fr))]"
};
function _sfc_render(_ctx, _cache, $props2, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [renderSlot(_ctx.$slots, "default")]);
}
var CardGroup = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.13.0";
CardGroup.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
CardGroup.install = function(Vue) {
  Vue.component(CardGroup.name, CardGroup);
};
CardGroup.version = version;
export {
  CardGroup as default
};
