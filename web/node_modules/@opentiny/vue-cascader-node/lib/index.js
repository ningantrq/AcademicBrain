function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { createVNode, resolveComponent } from "vue";
import { renderless, api } from "@opentiny/vue-renderless/cascader-node/vue";
import { defineComponent, $prefix, setup as _setup, h } from "@opentiny/vue-common";
import Checkbox from "@opentiny/vue-checkbox";
import Radio from "@opentiny/vue-radio";
import { isEqual } from "@opentiny/vue-renderless/common/object";
import { iconYes, iconLoading, iconChevronRight } from "@opentiny/vue-icon";
import "@opentiny/vue-theme/cascader-node/index.css";
var _sfc_main = /* @__PURE__ */ defineComponent({
  name: $prefix + "CascaderNode",
  components: {
    TinyCheckbox: Checkbox,
    TinyRadio: Radio,
    IconYes: iconYes(),
    IconLoading: iconLoading(),
    IconChevronRight: iconChevronRight()
  },
  inheritAttrs: false,
  emits: ["expand", "update:modelValue", "expand-change", "active-item-change", "change"],
  inject: ["panel"],
  props: {
    node: {
      type: Object,
      required: true
    },
    nodeId: String
  },
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  },
  render: function render() {
    var _this = this;
    var renderPrefix = function renderPrefix2() {
      var _this$state = _this.state, isLeaf = _this$state.isLeaf, isChecked = _this$state.isChecked, config = _this$state.config;
      var checkStrictly2 = config.checkStrictly, multiple2 = config.multiple;
      if (multiple2) {
        return renderCheckbox();
      } else if (checkStrictly2) {
        return renderRadio();
      } else if (isLeaf && isChecked) {
        return renderCheckIcon();
      }
      return null;
    };
    var renderPostfix = function renderPostfix2() {
      var node = _this.node, state2 = _this.state;
      if (node.loading) {
        return renderLoadingIcon();
      } else if (!state2.isLeaf) {
        return renderExpandIcon();
      }
      return null;
    };
    var stopPropagation = function stopPropagation2(e) {
      return e.stopPropagation();
    };
    var renderCheckbox = function renderCheckbox2() {
      var state2 = _this.state, node = _this.node;
      return createVNode(resolveComponent("tiny-checkbox"), {
        "modelValue": node.checked,
        "indeterminate": node.indeterminate,
        "disabled": state2.isDisabled,
        "onChange": _this.handleMultiCheckChange,
        "nativeOnClick": stopPropagation
      }, null);
    };
    var renderRadio = function renderRadio2() {
      var _this$state2 = _this.state, checkedValue = _this$state2.checkedValue, value = _this$state2.value, isDisabled = _this$state2.isDisabled;
      if (isEqual(value, checkedValue)) {
        value = checkedValue;
      }
      return createVNode(resolveComponent("tiny-radio"), {
        "modelValue": checkedValue,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return checkedValue = $event;
        },
        "disabled": isDisabled,
        "label": value,
        "nativeOnClick": stopPropagation,
        "onChange": _this.handleCheckChange
      }, {
        default: function _default() {
          return [createVNode("span", null, null)];
        }
      });
    };
    var renderCheckIcon = function renderCheckIcon2() {
      return createVNode(resolveComponent("icon-yes"), {
        "class": "tiny-cascader-node__prefix"
      }, null);
    };
    var renderLoadingIcon = function renderLoadingIcon2() {
      return createVNode(resolveComponent("icon-loading"), {
        "class": "tiny-cascader-node__postfix"
      }, null);
    };
    var renderExpandIcon = function renderExpandIcon2() {
      return createVNode(resolveComponent("icon-chevron-right"), {
        "class": "tiny-cascader-node__postfix"
      }, null);
    };
    var renderContent = function renderContent2() {
      var panel = _this.panel, node = _this.node;
      var render2 = panel.state.renderLabelFn;
      var vnode = render2 ? render2({
        node,
        data: node.data
      }) : null;
      return createVNode("span", {
        "class": "tiny-cascader-node__label"
      }, [vnode || node.label]);
    };
    var state = this.state;
    var _state$config = state.config, checkStrictly = _state$config.checkStrictly, expandTrigger = _state$config.expandTrigger, multiple = _state$config.multiple;
    var disabled = !checkStrictly && state.isDisabled;
    var events = {};
    events.on = {};
    if (expandTrigger === "click") {
      events.on.click = this.handleExpand;
    } else {
      var handler = function handler2(e) {
        _this.handleExpand();
        _this.$emit("expand", e);
      };
      events.on.mouseenter = handler;
      events.on.focus = handler;
    }
    if (state.isLeaf && !(state.isDisabled || checkStrictly || multiple)) {
      events.on.click = this.handleCheckChange;
    }
    return h("li", _extends({
      attrs: {
        role: "menuitem",
        id: this.nodeId,
        tabindex: disabled ? null : -1,
        "aria-expanded": state.inActivePath
      },
      class: {
        "tiny-cascader-node": true,
        "is-selectable": checkStrictly,
        "in-active-path": state.inActivePath,
        "in-checked-path": state.inCheckedPath,
        "is-active": state.isChecked,
        "is-disabled": disabled
      }
    }, events), [renderPrefix(), renderContent(), renderPostfix()]);
  }
});
var version = "3.13.0";
_sfc_main.install = function(Vue) {
  Vue.component(_sfc_main.name, _sfc_main);
};
_sfc_main.version = version;
export {
  _sfc_main as default
};
