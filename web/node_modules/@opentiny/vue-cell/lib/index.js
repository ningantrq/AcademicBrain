import { t } from "@opentiny/vue-locale";
import { renderless, api } from "@opentiny/vue-renderless/cell/vue";
import { defineComponent, $prefix, setup as _setup } from "@opentiny/vue-common";
import { IconChevronRight } from "@opentiny/vue-icon";
import { openBlock, createElementBlock, normalizeClass, createTextVNode, toDisplayString, renderSlot, createBlock, resolveDynamicComponent, createCommentVNode } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  name: $prefix + "Cell",
  componentName: "Cell",
  props: {
    placeholder: {
      type: String,
      default: t("ui.cell.placeholder")
    },
    disabled: {
      type: Boolean,
      default: false
    },
    data: {
      type: String,
      default: ""
    },
    icon: {
      type: [Object, String],
      default: function _default() {
        return IconChevronRight();
      }
    }
  },
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _hoisted_1 = {
  key: 0,
  "data-tag": "tiny-cell-icon"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock(
    "div",
    {
      "data-tag": "tiny-cell",
      class: normalizeClass(["border-0 border-color-border rounded relative w-full h-7 leading-7 sm:leading-6.5 pr-5 sm:pr-7 cursor-pointer line-clamp-1 pl-3", [_ctx.m(_ctx.data ? "text-color-text-primary" : "text-color-icon-placeholder", _ctx.state.isDisplayOnly ? "pointer-events-none cursor-default text-color-text-primary pl-0" : "sm:border", _ctx.state.isDisabled ? "bg-color-bg-4 cursor-not-allowed" : "")]]),
      onClick: _cache[0] || (_cache[0] = function($event) {
        return _ctx.state.isDisabled ? "" : _ctx.$emit("click", $event);
      })
    },
    [createTextVNode(
      toDisplayString(_ctx.state.isDisplayOnly ? _ctx.data || "-" : _ctx.data || _ctx.placeholder) + " ",
      1
      /* TEXT */
    ), !(_ctx.state.isDisplayOnly || _ctx.state.isDisabled) ? (openBlock(), createElementBlock("div", _hoisted_1, [renderSlot(_ctx.$slots, "icon", {}, function() {
      return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon), {
        class: "h-4 w-4 absolute top-1.5 sm:top-1 right-0 sm:right-2 fill-color-icon-placeholder"
      }))];
    })])) : createCommentVNode("v-if", true)],
    2
    /* CLASS */
  );
}
var Cell = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.13.0";
Cell.install = function(Vue) {
  Vue.component(Cell.name, Cell);
};
Cell.version = version;
export {
  Cell as default
};
