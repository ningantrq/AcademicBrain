import { renderless, api } from "@opentiny/vue-renderless/chart-core/vue";
import { defineComponent, $prefix, appProperties, setup as _setup } from "@opentiny/vue-common";
import * as echarts from "echarts";
import * as echarts$1 from "echarts/core";
import { TooltipComponent, LegendComponent, TitleComponent } from "echarts/components";
import { openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, toDisplayString, renderSlot } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

import "@opentiny/vue-theme/chart-core/index.css";
echarts$1.use([TooltipComponent, LegendComponent, TitleComponent]);
var _sfc_main = /* @__PURE__ */ defineComponent({
  name: $prefix + "ChartCore",
  props: {
    afterConfig: {
      type: Function
    },
    afterSetOption: {
      type: Function
    },
    afterSetOptionOnce: {
      type: Function
    },
    animation: Object,
    axisPointer: [Object, Array],
    backgroundColor: [Object, String],
    beforeConfig: {
      type: Function
    },
    brush: [Object, Array],
    cancelResizeCheck: Boolean,
    changeDelay: {
      type: Number,
      default: 0
    },
    colors: {
      type: Array
    },
    data: {
      type: [Object, Array],
      default: function _default() {
        return {};
      }
    },
    dataEmpty: Boolean,
    dataZoom: {
      type: [Object, Array]
    },
    events: {
      type: Object
    },
    extend: Object,
    geo: [Object, Array],
    graphic: [Object, Array],
    grid: {
      type: [Object, Array]
    },
    height: {
      type: String,
      default: "400px"
    },
    initOptions: {
      type: Object,
      default: function _default2() {
        return {};
      }
    },
    judgeWidth: {
      type: Boolean,
      default: false
    },
    legend: [Object, Array],
    legendPosition: {
      type: String
    },
    legendVisible: {
      type: Boolean,
      default: true
    },
    loading: Boolean,
    markArea: {
      type: Object
    },
    markLine: {
      type: Object
    },
    markPoint: {
      type: Object
    },
    notSetUnchange: Array,
    radar: Object,
    resizeDelay: {
      type: Number,
      default: 200
    },
    resizeable: {
      type: Boolean,
      default: true
    },
    series: [Object, Array],
    setOptionOpts: {
      type: [Boolean, Object],
      default: true
    },
    settings: {
      type: Object,
      default: function _default3() {
        return {};
      }
    },
    textStyle: [Object, Array],
    theme: {
      type: Object,
      default: function _default4() {
        var ctx = appProperties();
        return ctx.tiny_chart_theme ? ctx.tiny_chart_theme.value : null;
      }
    },
    themeName: [Object, String],
    timeline: [Object, Array],
    title: [Object, Array],
    toolbox: {
      type: [Object, Array]
    },
    tooltip: Object,
    tooltipFormatter: {
      type: Function
    },
    tooltipVisible: {
      type: Boolean,
      default: true
    },
    visualMap: {
      type: [Object, Array]
    },
    width: {
      type: String,
      default: "auto"
    },
    widthChangeDelay: {
      type: Number,
      default: 300
    },
    xAxis: [Object, Array],
    yAxis: [Object, Array],
    colorMode: {
      type: String,
      default: ""
    }
  },
  emits: ["ready", "ready-once", "handle-color"],
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true,
      extendOptions: {
        echartsLib: echarts
      }
    });
  }
});
var _hoisted_1 = /* @__PURE__ */ createElementVNode(
  "div",
  {
    class: "loader"
  },
  [/* @__PURE__ */ createElementVNode("div", {
    class: "loading-spinner"
  }, [/* @__PURE__ */ createElementVNode("svg", {
    class: "circular",
    viewBox: "25 25 50 50"
  }, [/* @__PURE__ */ createElementVNode("circle", {
    class: "path",
    cx: "50",
    cy: "50",
    r: "20",
    fill: "none"
  })])])],
  -1
  /* HOISTED */
);
var _hoisted_2 = [_hoisted_1];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock(
    "div",
    {
      class: normalizeClass([_ctx.camelToKebab(_ctx.$options.name || _ctx.$options._componentTag)]),
      style: normalizeStyle(_ctx.state.canvasStyle)
    },
    [createElementVNode(
      "div",
      {
        ref: "canvas",
        class: normalizeClass({
          "tiny-chart-mask-status": _ctx.dataEmpty || _ctx.loading
        }),
        style: normalizeStyle(_ctx.state.canvasStyle)
      },
      null,
      6
      /* CLASS, STYLE */
    ), createElementVNode(
      "div",
      {
        class: "tiny-chart-data-empty",
        style: normalizeStyle({
          display: _ctx.dataEmpty ? "" : "none"
        })
      },
      toDisplayString(_ctx.t("ui.chart.emptyText")),
      5
      /* TEXT, STYLE */
    ), createElementVNode(
      "div",
      {
        class: "tiny-chart-component-loading",
        style: normalizeStyle({
          display: _ctx.loading ? "" : "none"
        })
      },
      _hoisted_2,
      4
      /* STYLE */
    ), renderSlot(_ctx.$slots, "default")],
    6
    /* CLASS, STYLE */
  );
}
var Core = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.12.0";
Core.install = function(Vue) {
  Vue.component(Core.name, Core);
};
Core.version = version;
export {
  Core as default
};
