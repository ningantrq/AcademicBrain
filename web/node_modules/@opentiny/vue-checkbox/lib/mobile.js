import { renderless, api } from "@opentiny/vue-renderless/checkbox/vue";
import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import "@opentiny/vue-theme-mobile/checkbox/index.css";
import { openBlock, createElementBlock, normalizeClass, createElementVNode, withDirectives, vModelCheckbox, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  inheritAttrs: false,
  props: [].concat(props, ["modelValue", "text", "events", "label", "indeterminate", "disabled", "checked", "name", "trueLabel", "falseLabel", "id", "iconPosition"]),
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = ["id"];
var _hoisted_2 = ["tabindex", "role", "aria-checked"];
var _hoisted_3 = /* @__PURE__ */ createElementVNode(
  "span",
  {
    class: "tiny-mobile-checkbox__inner"
  },
  null,
  -1
  /* HOISTED */
);
var _hoisted_4 = ["aria-hidden", "name", "disabled", "true-value", "false-value"];
var _hoisted_5 = ["aria-hidden", "disabled", "value", "name"];
var _hoisted_6 = {
  key: 0,
  class: "tiny-mobile-checkbox__label"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("label", {
    class: normalizeClass(["tiny-mobile-checkbox", {
      "is-disabled": _ctx.state.isDisabled,
      "is-checked": _ctx.state.isChecked,
      "is-indeterminate": _ctx.indeterminate,
      "is-focus": _ctx.state.focus,
      "icon-position-top": _ctx.state.iconPosition === "top"
    }]),
    id: _ctx.id
  }, [createElementVNode("span", {
    class: "tiny-mobile-checkbox__input",
    tabindex: _ctx.indeterminate ? 0 : false,
    role: _ctx.indeterminate ? "checkbox" : false,
    "aria-checked": _ctx.indeterminate ? "mixed" : false
  }, [_hoisted_3, _ctx.trueLabel || _ctx.falseLabel ? withDirectives((openBlock(), createElementBlock("input", {
    key: 0,
    class: "tiny-mobile-checkbox__original",
    type: "checkbox",
    "aria-hidden": _ctx.indeterminate ? "true" : "false",
    name: _ctx.name,
    disabled: _ctx.state.isDisabled,
    "true-value": _ctx.trueLabel,
    "false-value": _ctx.falseLabel,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = function($event) {
      return _ctx.state.model = $event;
    }),
    onChange: _cache[1] || (_cache[1] = function() {
      return _ctx.handleChange && _ctx.handleChange.apply(_ctx, arguments);
    }),
    onFocus: _cache[2] || (_cache[2] = function($event) {
      return _ctx.state.focus = true;
    }),
    onBlur: _cache[3] || (_cache[3] = function($event) {
      return _ctx.state.focus = false;
    })
  }, null, 40, _hoisted_4)), [[vModelCheckbox, _ctx.state.model]]) : withDirectives((openBlock(), createElementBlock("input", {
    key: 1,
    class: "tiny-mobile-checkbox__original",
    type: "checkbox",
    "aria-hidden": _ctx.indeterminate ? "true" : "false",
    disabled: _ctx.state.isDisabled,
    value: _ctx.label,
    name: _ctx.name,
    "onUpdate:modelValue": _cache[4] || (_cache[4] = function($event) {
      return _ctx.state.model = $event;
    }),
    onChange: _cache[5] || (_cache[5] = function() {
      return _ctx.handleChange && _ctx.handleChange.apply(_ctx, arguments);
    }),
    onFocus: _cache[6] || (_cache[6] = function($event) {
      return _ctx.state.focus = true;
    }),
    onBlur: _cache[7] || (_cache[7] = function($event) {
      return _ctx.state.focus = false;
    })
  }, null, 40, _hoisted_5)), [[vModelCheckbox, _ctx.state.model]])], 8, _hoisted_2), _ctx.slots.default && _ctx.slots.default() || _ctx.state.isShowText ? (openBlock(), createElementBlock("span", _hoisted_6, [renderSlot(_ctx.$slots, "default", {}, function() {
    return [createTextVNode(
      toDisplayString(_ctx.state.showText),
      1
      /* TEXT */
    )];
  })])) : createCommentVNode("v-if", true)], 10, _hoisted_1);
}
var mobile = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  mobile as default
};
