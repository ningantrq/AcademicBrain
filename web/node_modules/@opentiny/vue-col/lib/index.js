function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import "@opentiny/vue-theme/col/index.css";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return PcTemplate;
};
var Col = defineComponent({
  name: $prefix + "Col",
  props: _extends({}, $props, {
    /**
     * @property {number} [span=12] - 栅格占据的列数（一行以12栅格划分）
     */
    span: {
      type: Number,
      default: 12,
      validator: function validator(value) {
        return Math.floor(value) === value && value > 0 && value <= 12;
      }
    },
    /**
     * @property {number} [offset=0] - 栅格左侧的间隔格数
     */
    offset: {
      type: Number,
      default: 0,
      validator: function validator2(value) {
        return value >= 0;
      }
    },
    /**
     * @property {no} [no=0] - 排序编号
     */
    no: {
      type: Number,
      default: 0
    },
    /**
     * @property {number} [move=0] - 栅格向左向右移动格数
     */
    move: {
      type: Number,
      default: 0
    },
    /**
     * @property {(number|object)} xs - <768px 响应式栅格数或者栅格属性对象
     */
    xs: {
      type: [Number, Object]
    },
    /**
     * @property {(number|object)} sm - ≥768px 响应式栅格数或者栅格属性对象
     */
    sm: {
      type: [Number, Object]
    },
    /**
     * @property {(number|object)} md - ≥992px 响应式栅格数或者栅格属性对象
     */
    md: {
      type: [Number, Object]
    },
    /**
     * @property {(number|object)} lg - ≥1200px 响应式栅格数或者栅格属性对象
     */
    lg: {
      type: [Number, Object]
    },
    /**
     * @property {(number|object)} xl - ≥1920px 响应式栅格数或者栅格属性对象
     */
    xl: {
      type: [Number, Object]
    },
    /**
     * @property {string} [tag=div] - 自定义元素标签
     */
    tag: {
      type: String,
      default: "div"
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
Col.install = function(Vue) {
  Vue.component(Col.name, Col);
};
Col.version = version;
export {
  Col as default
};
