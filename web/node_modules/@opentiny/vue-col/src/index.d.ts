declare const _default: import("@vue/runtime-core").DefineComponent<{
    /**
     * @property {number} [span=12] - 栅格占据的列数（一行以12栅格划分）
     */
    span: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    /**
     * @property {number} [offset=0] - 栅格左侧的间隔格数
     */
    offset: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    /**
     * @property {no} [no=0] - 排序编号
     */
    no: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * @property {number} [move=0] - 栅格向左向右移动格数
     */
    move: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * @property {(number|object)} xs - <768px 响应式栅格数或者栅格属性对象
     */
    xs: {
        type: (ObjectConstructor | NumberConstructor)[];
    };
    /**
     * @property {(number|object)} sm - ≥768px 响应式栅格数或者栅格属性对象
     */
    sm: {
        type: (ObjectConstructor | NumberConstructor)[];
    };
    /**
     * @property {(number|object)} md - ≥992px 响应式栅格数或者栅格属性对象
     */
    md: {
        type: (ObjectConstructor | NumberConstructor)[];
    };
    /**
     * @property {(number|object)} lg - ≥1200px 响应式栅格数或者栅格属性对象
     */
    lg: {
        type: (ObjectConstructor | NumberConstructor)[];
    };
    /**
     * @property {(number|object)} xl - ≥1920px 响应式栅格数或者栅格属性对象
     */
    xl: {
        type: (ObjectConstructor | NumberConstructor)[];
    };
    /**
     * @property {string} [tag=div] - 自定义元素标签
     */
    tag: {
        type: StringConstructor;
        default: string;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    /**
     * @property {number} [span=12] - 栅格占据的列数（一行以12栅格划分）
     */
    span: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    /**
     * @property {number} [offset=0] - 栅格左侧的间隔格数
     */
    offset: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    /**
     * @property {no} [no=0] - 排序编号
     */
    no: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * @property {number} [move=0] - 栅格向左向右移动格数
     */
    move: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * @property {(number|object)} xs - <768px 响应式栅格数或者栅格属性对象
     */
    xs: {
        type: (ObjectConstructor | NumberConstructor)[];
    };
    /**
     * @property {(number|object)} sm - ≥768px 响应式栅格数或者栅格属性对象
     */
    sm: {
        type: (ObjectConstructor | NumberConstructor)[];
    };
    /**
     * @property {(number|object)} md - ≥992px 响应式栅格数或者栅格属性对象
     */
    md: {
        type: (ObjectConstructor | NumberConstructor)[];
    };
    /**
     * @property {(number|object)} lg - ≥1200px 响应式栅格数或者栅格属性对象
     */
    lg: {
        type: (ObjectConstructor | NumberConstructor)[];
    };
    /**
     * @property {(number|object)} xl - ≥1920px 响应式栅格数或者栅格属性对象
     */
    xl: {
        type: (ObjectConstructor | NumberConstructor)[];
    };
    /**
     * @property {string} [tag=div] - 自定义元素标签
     */
    tag: {
        type: StringConstructor;
        default: string;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    span: number;
    tiny_mode_root: boolean;
    offset: number;
    move: number;
    tag: string;
    no: number;
}, {}>;
export default _default;
