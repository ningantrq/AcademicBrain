import { addClass, removeClass } from "@opentiny/vue-renderless/common/deps/dom";
import { defineComponent, $prefix } from "@opentiny/vue-common";
import { openBlock, createBlock, Transition, toHandlers, withCtx, renderSlot } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

import "@opentiny/vue-theme/collapse/index.css";
var _sfc_main = defineComponent({
  name: $prefix + "CollapseTransition",
  setup: function setup() {
    return {
      on: {
        beforeEnter: function beforeEnter(elem) {
          addClass(elem, "collapse-transition");
          if (!elem.dataset)
            elem.dataset = {};
          elem.dataset.oldPaddingBottom = elem.style.paddingBottom;
          elem.dataset.oldPaddingTop = elem.style.paddingTop;
          elem.style.height = "0";
          elem.style.paddingTop = 0;
          elem.style.paddingBottom = 0;
        },
        enter: function enter(elem) {
          elem.dataset.oldOverflow = elem.style.overflow;
          if (elem.scrollHeight === 0) {
            elem.style.height = "";
            elem.style.paddingBottom = elem.dataset.oldPaddingBottom;
            elem.style.paddingTop = elem.dataset.oldPaddingTop;
          } else {
            elem.style.height = elem.scrollHeight + "px";
            elem.style.paddingBottom = elem.dataset.oldPaddingBottom;
            elem.style.paddingTop = elem.dataset.oldPaddingTop;
          }
          elem.style.overflow = "hidden";
        },
        afterEnter: function afterEnter(elem) {
          removeClass(elem, "collapse-transition");
          elem.style.height = "";
          elem.style.overflow = elem.dataset.oldOverflow;
        },
        beforeLeave: function beforeLeave(elem) {
          if (!elem.dataset)
            elem.dataset = {};
          elem.dataset.oldOverflow = elem.style.overflow;
          elem.dataset.oldPaddingBottom = elem.style.paddingBottom;
          elem.dataset.oldPaddingTop = elem.style.paddingTop;
          elem.style.height = elem.scrollHeight + "px";
          elem.style.overflow = "hidden";
        },
        leave: function leave(elem) {
          if (elem.scrollHeight === 0)
            return;
          addClass(elem, "collapse-transition");
          elem.style.transitionProperty = "height";
          elem.style.height = 0;
          elem.style.paddingTop = 0;
          elem.style.paddingBottom = 0;
        },
        afterLeave: function afterLeave(elem) {
          removeClass(elem, "collapse-transition");
          elem.style.height = "";
          elem.style.overflow = elem.dataset.oldOverflow;
          elem.style.paddingBottom = elem.dataset.oldPaddingBottom;
          elem.style.paddingTop = elem.dataset.oldPaddingTop;
        }
      }
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(
    Transition,
    toHandlers(_ctx.on),
    {
      default: withCtx(function() {
        return [renderSlot(_ctx.$slots, "default")];
      }),
      _: 3
      /* FORWARDED */
    },
    16
    /* FULL_PROPS */
  );
}
var CollapseTransition = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.13.0";
CollapseTransition.install = function(Vue) {
  Vue.component(CollapseTransition.name, CollapseTransition);
};
CollapseTransition.version = version;
export {
  CollapseTransition as default
};
