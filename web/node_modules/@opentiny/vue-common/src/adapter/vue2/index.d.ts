import Vue from 'vue';
import * as compositionHooks from '@vue/composition-api';
import { bindFilter, emitter, getElementCssClass, getElementStatusClass } from '../utils';
declare const hooks: typeof Vue | typeof compositionHooks;
declare const Teleport: any;
export { emitter, bindFilter, getElementCssClass, getElementStatusClass, Teleport };
export declare const defineAsyncComponent: ({ loader, loadingComponent, errorComponent, delay, timeout }: {
    loader: any;
    loadingComponent: any;
    errorComponent: any;
    delay: any;
    timeout: any;
}) => () => {
    component: any;
    loading: any;
    error: any;
    delay: any;
    timeout: any;
};
export declare const markRaw: (ref: any) => any;
export declare const renderComponent: ({ view, component, props, context: { attrs, listeners: on, slots }, extend }: {
    view?: any;
    component?: any;
    props: any;
    context: {
        attrs: any;
        listeners: any;
        slots: any;
    };
    extend?: {} | undefined;
}) => () => any;
export declare const rootConfig: () => any;
export declare const getComponentName: () => any;
export declare const appContext: () => typeof Vue;
export declare const appProperties: () => any;
export declare const useRouter: (instance?: any) => {
    route: any;
    router: any;
};
export declare const tools: (context: any, mode: any) => {
    framework: string;
    vm: any;
    emit: (...args: any[]) => void;
    emitter: () => {
        emit(eventName: any): void;
        on: (event: any, callback: any, once?: boolean) => void;
        once(event: any, callback: any): void;
        off(event: any, callback: any): void;
    };
    route: any;
    router: any;
    dispatch: (componentName: any, eventName: any, params: any) => void;
    broadcast: (componentName: any, eventName: any, params: any) => void;
    parentHandler: (handler: any) => {} | undefined;
    childrenHandler: (handler: any) => any;
    refs: any;
    i18n: any;
    slots: any;
    scopedSlots: any;
    attrs: any;
    parent: any;
    nextTick: any;
    constants: any;
    mode: any;
    isPCMode: boolean;
    isMobileMode: boolean;
    service: any;
    getService: () => any;
    setParentAttribute: ({ name, value }: {
        name: any;
        value: any;
    }) => void;
    defineInstanceProperties: (props: any) => void;
    defineParentInstanceProperties: (props: any) => void;
};
export declare const directive: (directives: any) => any;
export declare const parseVnode: (vnode: any) => any;
export declare const isEmptyVnode: (vnode: any) => boolean;
export declare const h: any;
export declare const createComponentFn: (design: any) => ({ component, propsData, el }: {
    component: any;
    propsData: any;
    el: any;
}) => any;
export declare const defineComponent: typeof Vue.defineComponent | typeof compositionHooks.defineComponent;
export default hooks;
export declare const isVue2 = true;
export declare const isVue3 = false;
export type { PropType, ExtractPropTypes, ComponentPublicInstance, SetupContext, ComputedRef } from '@vue/composition-api';
export type DefineComponent = typeof defineComponent;
