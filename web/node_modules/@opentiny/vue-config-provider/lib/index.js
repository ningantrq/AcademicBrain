function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, props, hooks, provideDesignConfig, isVue2 } from "@opentiny/vue-common";
import "@opentiny/vue-theme/config-provider/index.css";
var _sfc_main = defineComponent({
  name: $prefix + "ConfigProvider",
  props: _extends({
    design: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    breakPoints: {
      type: Object,
      default: function _default2() {
        return {
          breakPoints: {
            "xs": 480,
            "sm": 640,
            "md": 768,
            "lg": 1024,
            "xl": 1280,
            "2xl": 1536
          }
        };
      }
    },
    direction: {
      type: String,
      default: "ltr"
    },
    tag: {
      type: Object,
      default: function _default3() {
        return {
          enable: true,
          name: "div"
        };
      }
    }
  }, props.map(function(item) {
    var _ref;
    return _ref = {}, _ref[item] = {
      type: String
    }, _ref;
  }).reduce(function(pre, cur) {
    return _extends({}, pre, cur);
  })),
  setup: function setup(props2, _ref2) {
    var slots = _ref2.slots;
    var _hooks$toRefs = hooks.toRefs(props2), direction = _hooks$toRefs.direction;
    provideDesignConfig(props2.design);
    var isRTL = hooks.computed(function() {
      return direction.value === "rtl";
    });
    var cssVar = hooks.computed(function() {
      return {
        "--text-direction": direction.value
      };
    });
    var classNames = hooks.reactive({
      "tiny-config-provider": true,
      "tiny-config-provider__rtl": isRTL
    });
    hooks.provide(configProviderContextKey, props2);
    return {
      slots,
      classNames,
      cssVar,
      props: props2,
      isVue2
    };
  },
  render: function render() {
    var _this$$slots, _this$slots, _this$props$tag$name;
    var attr = {
      class: this.classNames,
      style: this.cssVar
    };
    var slots = isVue2 ? (_this$$slots = this.$slots) == null ? void 0 : _this$$slots.default : (_this$slots = this.slots) == null ? void 0 : _this$slots.default == null ? void 0 : _this$slots.default();
    if (!this.props.tag.enable) {
      var _slots$length;
      if (isVue2 && ((_slots$length = slots == null ? void 0 : slots.length) != null ? _slots$length : 1) > 1) {
        return hooks.h("div", {}, slots);
      }
      return slots;
    }
    var tagName = (_this$props$tag$name = this.props.tag.name) != null ? _this$props$tag$name : "div";
    return hooks.h(tagName, attr, slots);
  }
});
var version = "3.13.0";
var configProviderContextKey = Symbol("CONFIG_PROVIDER_CONTEXT_KEY");
_sfc_main.install = function(Vue) {
  Vue.component(_sfc_main.name, _sfc_main);
};
_sfc_main.version = version;
export {
  configProviderContextKey,
  _sfc_main as default
};
