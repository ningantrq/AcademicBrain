import { defineComponent, $prefix, setup as _setup } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/crop/vue";
import { iconConmentRefresh, iconNew, iconZoomIn, iconZoomOut, iconRepeat, iconRefres, iconClose, iconYes, iconCrop } from "@opentiny/vue-icon";
import Cropper from "cropperjs";
import "cropperjs/dist/cropper.css";
import { openBlock, createElementBlock, normalizeStyle, createCommentVNode, withDirectives, createElementVNode, Fragment, renderList, withModifiers, createBlock, resolveDynamicComponent, toDisplayString, vShow, createStaticVNode } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

import "@opentiny/vue-theme/crop/index.css";
var $constants = {
  CROP_IMAGE: "ui.crop.cropImage"
};
var _sfc_main = defineComponent({
  name: $prefix + "Crop",
  components: {
    IconConmentRefresh: iconConmentRefresh(),
    IconNew: iconNew(),
    IconZoomIn: iconZoomIn(),
    IconZoomOut: iconZoomOut(),
    IconRepeat: iconRepeat(),
    IconRefres: iconRefres(),
    IconClose: iconClose(),
    IconYes: iconYes(),
    IconCrop: iconCrop()
  },
  props: {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    alt: {
      type: String,
      default: "image"
    },
    aspectRatio: {
      type: Number,
      default: 16 / 9
    },
    autoCrop: {
      type: Boolean,
      default: true
    },
    autoCropArea: {
      type: Number,
      default: 0.8
    },
    background: {
      type: Boolean,
      default: true
    },
    center: {
      type: Boolean,
      default: false
    },
    cropType: {
      type: String,
      default: "base64"
    },
    cropvisible: {
      type: Boolean,
      default: false
    },
    dragMode: {
      type: String,
      default: "crop"
    },
    guides: {
      type: Boolean,
      default: true
    },
    maxSize: {
      type: String,
      default: "1M"
    },
    minContainerHeight: {
      type: Number,
      default: 300
    },
    minContainerWidth: {
      type: Number,
      default: 652
    },
    minCropBoxHeight: {
      type: Number,
      default: 0
    },
    minCropBoxWidth: {
      type: Number,
      default: 0
    },
    modal: {
      type: Boolean,
      default: true
    },
    movable: {
      type: Boolean,
      default: true
    },
    plugin: {
      type: [Object, Function],
      default: function _default2() {
        return Cropper;
      }
    },
    preview: {
      type: Boolean,
      default: false
    },
    previewShow: {
      type: Boolean,
      default: false
    },
    quality: {
      type: Number,
      default: 0.92,
      validator: function validator(value) {
        return value <= 1 && value > 0;
      }
    },
    rotatable: {
      type: Boolean,
      default: true
    },
    src: {
      type: String,
      default: ""
    },
    viewMode: {
      type: Number,
      default: 0
    },
    wheelZoomRatio: {
      type: Number,
      default: 0.1
    },
    zoomOnWheel: {
      type: Boolean,
      default: true
    },
    zoomable: {
      type: Boolean,
      default: true
    }
  },
  emits: ["update:cropvisible", "update:visible", "ready", "cropstart", "cropmove", "cropend", "crop", "cropdata"],
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _hoisted_1 = {
  class: "tiny-crop__wrapper"
};
var _hoisted_2 = /* @__PURE__ */ createStaticVNode('<div class="croppreviewb"><div class="croppreview"></div></div><div class="croppreviewm"><div class="croppreview"></div></div><div class="croppreviews"><div class="croppreview"></div></div>', 3);
var _hoisted_5 = [_hoisted_2];
var _hoisted_6 = {
  class: "tiny-crop"
};
var _hoisted_7 = {
  class: "tiny-crop__dialog"
};
var _hoisted_8 = {
  class: "tiny-crop__dialog-cropper"
};
var _hoisted_9 = ["src", "alt"];
var _hoisted_10 = {
  class: "tiny-crop__dialog-content__handle"
};
var _hoisted_11 = {
  class: "tiny-crop__dialog-content__handle__button"
};
var _hoisted_12 = ["onClick"];
var _hoisted_13 = {
  class: "tiny-crop__dialog-content"
};
var _hoisted_14 = {
  class: "tiny-crop__dialog-content__crop"
};
var _hoisted_15 = ["src"];
var _hoisted_16 = {
  key: 1
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [_ctx.preview ? (openBlock(), createElementBlock(
    "div",
    {
      key: 0,
      class: "tiny-croppreview",
      style: normalizeStyle({
        opacity: _ctx.state.cropvisible ? 1 : 0
      })
    },
    _hoisted_5,
    4
    /* STYLE */
  )) : createCommentVNode("v-if", true), withDirectives(createElementVNode(
    "div",
    _hoisted_6,
    [createElementVNode("div", _hoisted_7, [createElementVNode(
      "input",
      {
        ref: "cropInput",
        type: "file",
        name: "image",
        accept: "image/*",
        onChange: _cache[0] || (_cache[0] = function() {
          return _ctx.setImage && _ctx.setImage.apply(_ctx, arguments);
        })
      },
      null,
      544
      /* NEED_HYDRATION, NEED_PATCH */
    ), createElementVNode("div", _hoisted_8, [createElementVNode("img", {
      src: _ctx.state.src,
      ref: "cropImage",
      id: "crops",
      alt: _ctx.state.alt
    }, null, 8, _hoisted_9)]), createElementVNode("div", _hoisted_10, [createElementVNode("div", _hoisted_11, [(openBlock(true), createElementBlock(
      Fragment,
      null,
      renderList(_ctx.state.renderIcon, function(item, index) {
        return openBlock(), createElementBlock("div", {
          class: "iconButton",
          onClick: withModifiers(item.method, ["prevent"]),
          key: index
        }, [(openBlock(), createBlock(resolveDynamicComponent(item.icon), {
          class: "iconButtonset"
        }))], 8, _hoisted_12);
      }),
      128
      /* KEYED_FRAGMENT */
    ))])]), createElementVNode("div", _hoisted_13, [createElementVNode("div", _hoisted_14, [_ctx.state.cropImg ? (openBlock(), createElementBlock("img", {
      key: 0,
      src: _ctx.state.cropImg,
      alt: "post-crop"
    }, null, 8, _hoisted_15)) : (openBlock(), createElementBlock(
      "h1",
      _hoisted_16,
      toDisplayString(_ctx.t("ui.crop.croppedImage")),
      1
      /* TEXT */
    ))])])])],
    512
    /* NEED_PATCH */
  ), [[vShow, _ctx.state.cropvisible]])]);
}
var Crop = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.13.0";
Crop.install = function(Vue) {
  Vue.component(Crop.name, Crop);
};
Crop.version = version;
export {
  Crop as default
};
