import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/date-picker/vue";
import MiniPicker from "@opentiny/vue-mini-picker";
import Input from "@opentiny/vue-input";
import { iconCloseCircle } from "@opentiny/vue-icon";
import { resolveComponent, openBlock, createElementBlock, createVNode, withCtx, createBlock, createCommentVNode } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  components: {
    TinyMiniPicker: MiniPicker,
    TinyInput: Input,
    IconClose: iconCloseCircle()
  },
  props: [].concat(props, ["modelValue", "type", "clearable", "visible", "minDate", "maxDate", "formatter"]),
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_icon_close = resolveComponent("icon-close");
  var _component_tiny_input = resolveComponent("tiny-input");
  var _component_tiny_mini_picker = resolveComponent("tiny-mini-picker");
  return openBlock(), createElementBlock("div", null, [createVNode(_component_tiny_input, {
    onHookMounted: _ctx.hookMounted,
    modelValue: _ctx.state.displayValue,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = function($event) {
      return _ctx.state.displayValue = $event;
    }),
    ref: "refrence",
    onFocus: _ctx.showPickerAndLockScroll,
    readOnly: "true",
    _mode: _ctx._mode
  }, {
    default: withCtx(function() {
      return [!_ctx.state.clearable ? (openBlock(), createBlock(_component_icon_close, {
        key: 0,
        slot: "suffix",
        onClick: _ctx.clearDisplayValue
      }, null, 8, ["onClick"])) : createCommentVNode("v-if", true)];
    }),
    _: 1
    /* STABLE */
  }, 8, ["onHookMounted", "modelValue", "onFocus", "_mode"]), createVNode(_component_tiny_mini_picker, {
    visible: _ctx.state.visible,
    "onUpdate:visible": _cache[1] || (_cache[1] = function($event) {
      return _ctx.state.visible = $event;
    }),
    ref: "picker",
    columns: _ctx.state.columns,
    onChange: _ctx.onChange,
    onConfirm: _ctx.onConfirm,
    onCancel: _ctx.onCancel
  }, null, 8, ["visible", "columns", "onChange", "onConfirm", "onCancel"])]);
}
var mobile = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  mobile as default
};
