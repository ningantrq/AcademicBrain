import { renderless, api } from "@opentiny/vue-renderless/date-range/vue";
import { defineComponent, $prefix, directive, setup as _setup } from "@opentiny/vue-common";
import Clickoutside from "@opentiny/vue-renderless/common/deps/clickoutside";
import Time from "@opentiny/vue-time";
import DateTable from "@opentiny/vue-date-table";
import Input from "@opentiny/vue-input";
import Button from "@opentiny/vue-button";
import { iconDoubleRight, iconDoubleLeft, iconChevronLeft, iconChevronRight } from "@opentiny/vue-icon";
import { resolveComponent, resolveDirective, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, renderSlot, createElementBlock, Fragment, renderList, toDisplayString, createCommentVNode, createVNode, createTextVNode, vShow } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

import "@opentiny/vue-theme/date-range/index.css";
var $constants = {
  startDate: /* @__PURE__ */ new Date("1970-01-01"),
  endDate: /* @__PURE__ */ new Date("2099-12-31")
};
var _sfc_main = defineComponent({
  name: $prefix + "DateRange",
  directives: directive({
    Clickoutside
  }),
  components: {
    TimePicker: Time,
    DateTable,
    TinyInput: Input,
    TinyButton: Button,
    IconDoubleRight: iconDoubleRight(),
    IconDoubleLeft: iconDoubleLeft(),
    IconChevronLeft: iconChevronLeft(),
    IconChevronRight: iconChevronRight()
  },
  props: {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    emitter: Object,
    step: {
      type: Object,
      default: function _default2() {
        return {
          hour: 1,
          minute: 1,
          second: 1
        };
      }
    },
    showWeekNumber: {
      type: Boolean,
      default: false
    },
    formatWeeks: Function,
    timeEditable: {
      type: Boolean,
      default: true
    }
  },
  emits: ["dodestroy", "pick"],
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _hoisted_1 = {
  class: "tiny-picker-panel__body-wrapper"
};
var _hoisted_2 = {
  key: 0,
  ref: "shortcut",
  class: "tiny-picker-panel__sidebar"
};
var _hoisted_3 = ["onClick"];
var _hoisted_4 = {
  class: "tiny-picker-panel__body"
};
var _hoisted_5 = {
  key: 0,
  class: "tiny-date-range-picker__time-header"
};
var _hoisted_6 = {
  class: "tiny-date-range-picker__editors-wrap"
};
var _hoisted_7 = {
  class: "tiny-date-range-picker__time-picker-wrap"
};
var _hoisted_8 = {
  class: "tiny-date-range-picker__time-picker-wrap"
};
var _hoisted_9 = /* @__PURE__ */ createElementVNode(
  "span",
  {
    class: "tiny-icon-arrow-right"
  },
  null,
  -1
  /* HOISTED */
);
var _hoisted_10 = {
  class: "tiny-date-range-picker__editors-wrap is-right"
};
var _hoisted_11 = {
  class: "tiny-date-range-picker__time-picker-wrap"
};
var _hoisted_12 = {
  class: "tiny-date-range-picker__time-picker-wrap"
};
var _hoisted_13 = {
  class: "tiny-picker-panel__content tiny-date-range-picker__content is-left"
};
var _hoisted_14 = {
  class: "tiny-date-range-picker__header"
};
var _hoisted_15 = ["disabled"];
var _hoisted_16 = ["disabled"];
var _hoisted_17 = {
  class: "tiny-picker-panel__content tiny-date-range-picker__content is-right"
};
var _hoisted_18 = {
  class: "tiny-date-range-picker__header"
};
var _hoisted_19 = ["disabled"];
var _hoisted_20 = ["disabled"];
var _hoisted_21 = {
  key: 0,
  class: "tiny-picker-panel__footer"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_input = resolveComponent("tiny-input");
  var _component_time_picker = resolveComponent("time-picker");
  var _component_icon_double_left = resolveComponent("icon-double-left");
  var _component_icon_chevron_left = resolveComponent("icon-chevron-left");
  var _component_icon_double_right = resolveComponent("icon-double-right");
  var _component_icon_chevron_right = resolveComponent("icon-chevron-right");
  var _component_date_table = resolveComponent("date-table");
  var _component_tiny_button = resolveComponent("tiny-button");
  var _directive_clickoutside = resolveDirective("clickoutside");
  return openBlock(), createBlock(Transition, {
    name: "tiny-zoom-in-top",
    onAfterLeave: _cache[19] || (_cache[19] = function($event) {
      return _ctx.$emit("dodestroy");
    }),
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        {
          class: normalizeClass(["tiny-picker-panel tiny-date-range-picker tiny-popper", [{
            "has-sidebar": _ctx.slots.sidebar || _ctx.state.shortcuts,
            "has-time": _ctx.state.showTime
          }, _ctx.state.popperClass]]),
          ref: "refDateRange"
        },
        [createElementVNode("div", _hoisted_1, [renderSlot(_ctx.$slots, "sidebar", {
          class: "tiny-picker-panel__sidebar"
        }), _ctx.state.shortcuts ? (openBlock(), createElementBlock(
          "div",
          _hoisted_2,
          [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.state.shortcuts, function(shortcut, key) {
              return openBlock(), createElementBlock("button", {
                type: "button",
                class: normalizeClass(["tiny-picker-panel__shortcut", {
                  "tiny-picker-panel__shortcut-selected": _ctx.state.singleSelect && shortcut.type === _ctx.state.shortcutType && shortcut.text === _ctx.state.shortcutText
                }]),
                key,
                onClick: function onClick($event) {
                  return _ctx.handleShortcutClick(shortcut);
                }
              }, toDisplayString(shortcut.text), 11, _hoisted_3);
            }),
            128
            /* KEYED_FRAGMENT */
          ))],
          512
          /* NEED_PATCH */
        )) : createCommentVNode("v-if", true), createElementVNode("div", _hoisted_4, [_ctx.state.showTime ? (openBlock(), createElementBlock("div", _hoisted_5, [createElementVNode("span", _hoisted_6, [createElementVNode("span", _hoisted_7, [createVNode(_component_tiny_input, {
          size: "small",
          disabled: _ctx.state.rangeState.selecting,
          ref: "minInput",
          placeholder: _ctx.t("ui.datepicker.startDate"),
          class: "tiny-date-range-picker__editor",
          modelValue: _ctx.state.minVisibleDate,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = function(val) {
            return _ctx.handleDateInput(val, "min");
          }),
          onChange: _cache[1] || (_cache[1] = function(val) {
            return _ctx.handleDateChange(val, "min");
          })
        }, null, 8, ["disabled", "placeholder", "modelValue"])]), withDirectives((openBlock(), createElementBlock("span", _hoisted_8, [createVNode(_component_tiny_input, {
          size: "small",
          class: "tiny-date-range-picker__editor",
          disabled: _ctx.state.rangeState.selecting,
          placeholder: _ctx.t("ui.datepicker.startTime"),
          modelValue: _ctx.state.minVisibleTime,
          onFocus: _cache[2] || (_cache[2] = function($event) {
            return _ctx.state.minTimePickerVisible = true;
          }),
          "onUpdate:modelValue": _cache[3] || (_cache[3] = function(val) {
            return _ctx.handleTimeInput(val, "min");
          }),
          onChange: _cache[4] || (_cache[4] = function(val) {
            return _ctx.handleTimeChange(val, "min");
          }),
          readonly: !_ctx.timeEditable
        }, null, 8, ["disabled", "placeholder", "modelValue", "readonly"]), createVNode(_component_time_picker, {
          ref: "minTimePicker",
          step: _ctx.step,
          "time-arrow-control": _ctx.state.arrowControl,
          show: _ctx.state.minTimePickerVisible,
          value: _ctx.state.minDate,
          onPick: _ctx.handleMinTimePick
        }, null, 8, ["step", "time-arrow-control", "show", "value", "onPick"])])), [[_directive_clickoutside, _ctx.handleMinTimeClose]])]), _hoisted_9, createElementVNode("span", _hoisted_10, [createElementVNode("span", _hoisted_11, [createVNode(_component_tiny_input, {
          size: "small",
          class: "tiny-date-range-picker__editor",
          disabled: _ctx.state.rangeState.selecting,
          placeholder: _ctx.t("ui.datepicker.endDate"),
          modelValue: _ctx.state.maxVisibleDate,
          readonly: !_ctx.state.minDate,
          "onUpdate:modelValue": _cache[5] || (_cache[5] = function(val) {
            return _ctx.handleDateInput(val, "max");
          }),
          onChange: _cache[6] || (_cache[6] = function(val) {
            return _ctx.handleDateChange(val, "max");
          })
        }, null, 8, ["disabled", "placeholder", "modelValue", "readonly"])]), withDirectives((openBlock(), createElementBlock("span", _hoisted_12, [createVNode(_component_tiny_input, {
          size: "small",
          class: "tiny-date-range-picker__editor",
          disabled: _ctx.state.rangeState.selecting,
          placeholder: _ctx.t("ui.datepicker.endTime"),
          modelValue: _ctx.state.maxVisibleTime,
          readonly: !_ctx.state.minDate || !_ctx.timeEditable,
          onFocus: _cache[7] || (_cache[7] = function($event) {
            return _ctx.state.minDate && (_ctx.state.maxTimePickerVisible = true);
          }),
          "onUpdate:modelValue": _cache[8] || (_cache[8] = function(val) {
            return _ctx.handleTimeInput(val, "max");
          }),
          onChange: _cache[9] || (_cache[9] = function(val) {
            return _ctx.handleTimeChange(val, "max");
          })
        }, null, 8, ["disabled", "placeholder", "modelValue", "readonly"]), createVNode(_component_time_picker, {
          ref: "maxTimePicker",
          step: _ctx.step,
          "time-arrow-control": _ctx.state.arrowControl,
          show: _ctx.state.maxTimePickerVisible,
          value: _ctx.state.maxDate,
          onPick: _ctx.handleMaxTimePick
        }, null, 8, ["step", "time-arrow-control", "show", "value", "onPick"])])), [[_directive_clickoutside, _ctx.handleMaxTimeClose]])])])) : createCommentVNode("v-if", true), createElementVNode("div", _hoisted_13, [createElementVNode("div", _hoisted_14, [createElementVNode("button", {
          type: "button",
          onClick: _cache[10] || (_cache[10] = function() {
            return _ctx.leftPrevYear && _ctx.leftPrevYear.apply(_ctx, arguments);
          }),
          class: "tiny-picker-panel__icon-btn tiny-icon-d-arrow-left"
        }, [createVNode(_component_icon_double_left)]), createElementVNode("button", {
          type: "button",
          onClick: _cache[11] || (_cache[11] = function() {
            return _ctx.leftPrevMonth && _ctx.leftPrevMonth.apply(_ctx, arguments);
          }),
          class: "tiny-picker-panel__icon-btn tiny-icon-arrow-left"
        }, [createVNode(_component_icon_chevron_left)]), _ctx.state.unlinkPanels ? (openBlock(), createElementBlock("button", {
          key: 0,
          type: "button",
          onClick: _cache[12] || (_cache[12] = function() {
            return _ctx.leftNextYear && _ctx.leftNextYear.apply(_ctx, arguments);
          }),
          disabled: !_ctx.state.enableYearArrow,
          class: normalizeClass([{
            "is-disabled": !_ctx.state.enableYearArrow
          }, "tiny-picker-panel__icon-btn tiny-icon-d-arrow-right"])
        }, [createVNode(_component_icon_double_right)], 10, _hoisted_15)) : createCommentVNode("v-if", true), _ctx.state.unlinkPanels ? (openBlock(), createElementBlock("button", {
          key: 1,
          type: "button",
          onClick: _cache[13] || (_cache[13] = function() {
            return _ctx.leftNextMonth && _ctx.leftNextMonth.apply(_ctx, arguments);
          }),
          disabled: !_ctx.state.enableMonthArrow,
          class: normalizeClass([{
            "is-disabled": !_ctx.state.enableMonthArrow
          }, "tiny-picker-panel__icon-btn tiny-icon-arrow-right"])
        }, [createVNode(_component_icon_chevron_right)], 10, _hoisted_16)) : createCommentVNode("v-if", true), createElementVNode(
          "div",
          null,
          toDisplayString(_ctx.state.leftLabel),
          1
          /* TEXT */
        )]), createVNode(_component_date_table, {
          "selection-mode": "range",
          date: _ctx.state.leftDate,
          "default-value": _ctx.state.defaultValue,
          "min-date": _ctx.state.minDate,
          "max-date": _ctx.state.maxDate,
          "range-state": _ctx.state.rangeState,
          "disabled-date": _ctx.state.disabledDate,
          "cell-class-name": _ctx.state.cellClassName,
          onChangerange: _ctx.handleChangeRange,
          "first-day-of-week": _ctx.state.firstDayOfWeek,
          "show-week-number": _ctx.showWeekNumber,
          "format-weeks": _ctx.formatWeeks,
          onPick: _ctx.handleRangePick
        }, null, 8, ["date", "default-value", "min-date", "max-date", "range-state", "disabled-date", "cell-class-name", "onChangerange", "first-day-of-week", "show-week-number", "format-weeks", "onPick"])]), createElementVNode("div", _hoisted_17, [createElementVNode("div", _hoisted_18, [_ctx.state.unlinkPanels ? (openBlock(), createElementBlock("button", {
          key: 0,
          type: "button",
          onClick: _cache[14] || (_cache[14] = function() {
            return _ctx.rightPrevYear && _ctx.rightPrevYear.apply(_ctx, arguments);
          }),
          disabled: !_ctx.state.enableYearArrow,
          class: normalizeClass([{
            "is-disabled": !_ctx.state.enableYearArrow
          }, "tiny-picker-panel__icon-btn tiny-icon-d-arrow-left"])
        }, [createVNode(_component_icon_double_left)], 10, _hoisted_19)) : createCommentVNode("v-if", true), _ctx.state.unlinkPanels ? (openBlock(), createElementBlock("button", {
          key: 1,
          type: "button",
          onClick: _cache[15] || (_cache[15] = function() {
            return _ctx.rightPrevMonth && _ctx.rightPrevMonth.apply(_ctx, arguments);
          }),
          disabled: !_ctx.state.enableMonthArrow,
          class: normalizeClass([{
            "is-disabled": !_ctx.state.enableMonthArrow
          }, "tiny-picker-panel__icon-btn tiny-icon-arrow-left"])
        }, [createVNode(_component_icon_chevron_left)], 10, _hoisted_20)) : createCommentVNode("v-if", true), createElementVNode("button", {
          type: "button",
          onClick: _cache[16] || (_cache[16] = function() {
            return _ctx.rightNextYear && _ctx.rightNextYear.apply(_ctx, arguments);
          }),
          class: "tiny-picker-panel__icon-btn tiny-icon-d-arrow-right"
        }, [createVNode(_component_icon_double_right)]), createElementVNode("button", {
          type: "button",
          onClick: _cache[17] || (_cache[17] = function() {
            return _ctx.rightNextMonth && _ctx.rightNextMonth.apply(_ctx, arguments);
          }),
          class: "tiny-picker-panel__icon-btn tiny-icon-arrow-right"
        }, [createVNode(_component_icon_chevron_right)]), createElementVNode(
          "div",
          null,
          toDisplayString(_ctx.state.rightLabel),
          1
          /* TEXT */
        )]), createVNode(_component_date_table, {
          "selection-mode": "range",
          date: _ctx.state.rightDate,
          "default-value": _ctx.state.defaultValue,
          "min-date": _ctx.state.minDate,
          "max-date": _ctx.state.maxDate,
          "range-state": _ctx.state.rangeState,
          "disabled-date": _ctx.state.disabledDate,
          "cell-class-name": _ctx.state.cellClassName,
          onChangerange: _ctx.handleChangeRange,
          "first-day-of-week": _ctx.state.firstDayOfWeek,
          "show-week-number": _ctx.showWeekNumber,
          "format-weeks": _ctx.formatWeeks,
          onPick: _ctx.handleRangePick
        }, null, 8, ["date", "default-value", "min-date", "max-date", "range-state", "disabled-date", "cell-class-name", "onChangerange", "first-day-of-week", "show-week-number", "format-weeks", "onPick"])])])]), _ctx.state.showTime ? (openBlock(), createElementBlock("div", _hoisted_21, [createVNode(_component_tiny_button, {
          size: "mini",
          type: "text",
          class: "tiny-picker-panel__link-btn",
          onClick: _ctx.handleClear
        }, {
          default: withCtx(function() {
            return [createTextVNode(
              toDisplayString(_ctx.t("ui.datepicker.clear")),
              1
              /* TEXT */
            )];
          }),
          _: 1
          /* STABLE */
        }, 8, ["onClick"]), createVNode(_component_tiny_button, {
          plain: "",
          size: "mini",
          class: "tiny-picker-panel__link-btn",
          disabled: _ctx.state.btnDisabled,
          onClick: _cache[18] || (_cache[18] = function($event) {
            return _ctx.handleConfirm(false);
          })
        }, {
          default: withCtx(function() {
            return [createTextVNode(
              toDisplayString(_ctx.t("ui.datepicker.confirm")),
              1
              /* TEXT */
            )];
          }),
          _: 1
          /* STABLE */
        }, 8, ["disabled"])])) : createCommentVNode("v-if", true)],
        2
        /* CLASS */
      ), [[vShow, _ctx.state.visible]])];
    }),
    _: 3
    /* FORWARDED */
  });
}
var DateRange = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.13.0";
DateRange.install = function(Vue) {
  Vue.component(DateRange.name, DateRange);
};
DateRange.version = version;
export {
  DateRange as default
};
