import { renderless, api } from "@opentiny/vue-renderless/dialog-box/vue";
import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import { iconClose, iconFullscreen, iconMinscreen } from "@opentiny/vue-icon";
import "@opentiny/vue-theme/dialog-box/index.css";
import { resolveComponent, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, withModifiers, createElementBlock, normalizeStyle, renderSlot, toDisplayString, createVNode, createCommentVNode, vShow } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  components: {
    IconClose: iconClose(),
    IconFullscreen: iconFullscreen(),
    IconMinscreen: iconMinscreen()
  },
  emits: ["update:visible", "change", "before-close", "open", "close", "opened", "confirm", "cancel", "closed", "drag-start", "drag-move", "drag-end"],
  props: [].concat(props, ["resize", "isFormReset", "visible", "title", "modal", "modalAppendToBody", "appendToBody", "lockScroll", "closeOnClickModal", "closeOnPressEscape", "showClose", "width", "fullscreen", "top", "center", "draggable", "showHeader", "rightSlide", "destroyOnClose", "dialogClass", "beforeClose", "maxHeight"]),
  model: {
    prop: "visible",
    event: "update:visible"
  },
  provide: function provide() {
    return {
      dialog: this
    };
  },
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-dialog-box__title"
};
var _hoisted_2 = {
  key: 1,
  class: "tiny-dialog-box__footer"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_icon_close = resolveComponent("icon-close");
  var _component_icon_fullscreen = resolveComponent("icon-fullscreen");
  var _component_icon_minscreen = resolveComponent("icon-minscreen");
  return openBlock(), createBlock(Transition, {
    name: _ctx.state.animationName,
    onAfterEnter: _ctx.afterEnter,
    onAfterLeave: _ctx.afterLeave,
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        {
          class: normalizeClass(["tiny-dialog-box__wrapper", _ctx.dialogClass]),
          onClick: _cache[4] || (_cache[4] = withModifiers(function() {
            return _ctx.handleWrapperClick && _ctx.handleWrapperClick.apply(_ctx, arguments);
          }, ["self"]))
        },
        [(_ctx.destroyOnClose ? _ctx.visible : true) ? (openBlock(), createElementBlock(
          "div",
          {
            ref: "dialog",
            class: normalizeClass([[{
              "is-fullscreen": _ctx.state.isFull,
              "is-center": _ctx.center,
              "is-right-slide": _ctx.rightSlide
            }], "tiny-dialog-box"]),
            style: normalizeStyle(_ctx.state.style),
            key: _ctx.state.key
          },
          [_ctx.showHeader ? (openBlock(), createElementBlock(
            "div",
            {
              key: 0,
              class: "tiny-dialog-box__header",
              onMousedown: _cache[3] || (_cache[3] = function() {
                return _ctx.handleDrag && _ctx.handleDrag.apply(_ctx, arguments);
              })
            },
            [renderSlot(_ctx.$slots, "title", {}, function() {
              return [createElementVNode(
                "span",
                _hoisted_1,
                toDisplayString(_ctx.title),
                1
                /* TEXT */
              )];
            }), _ctx.showClose ? (openBlock(), createElementBlock("button", {
              key: 0,
              type: "button",
              class: "tiny-dialog-box__headerbtn",
              "aria-label": "Close",
              onClick: _cache[0] || (_cache[0] = function($event) {
                return _ctx.handleClose("close", $event);
              })
            }, [createVNode(_component_icon_close, {
              class: "tiny-svg-size tiny-dialog-box__close"
            })])) : createCommentVNode("v-if", true), _ctx.resize && !_ctx.state.isFull ? (openBlock(), createElementBlock("button", {
              key: 1,
              type: "button",
              class: "tiny-dialog-box__headerbtn",
              "aria-label": "Resize",
              onClick: _cache[1] || (_cache[1] = function($event) {
                return _ctx.state.isFull = true;
              })
            }, [createVNode(_component_icon_fullscreen, {
              class: "tiny-svg-size tiny-dialog-box__close"
            })])) : createCommentVNode("v-if", true), _ctx.resize && _ctx.state.isFull ? (openBlock(), createElementBlock("button", {
              key: 2,
              type: "button",
              class: "tiny-dialog-box__headerbtn",
              "aria-label": "Resize",
              onClick: _cache[2] || (_cache[2] = function($event) {
                return _ctx.state.isFull = false;
              })
            }, [createVNode(_component_icon_minscreen, {
              class: "tiny-svg-size tiny-dialog-box__close"
            })])) : createCommentVNode("v-if", true)],
            32
            /* NEED_HYDRATION */
          )) : createCommentVNode("v-if", true), createElementVNode(
            "div",
            {
              class: "tiny-dialog-box__body",
              style: normalizeStyle(_ctx.state.bodyStyle)
            },
            [renderSlot(_ctx.$slots, "default")],
            4
            /* STYLE */
          ), _ctx.slots.footer ? (openBlock(), createElementBlock("div", _hoisted_2, [renderSlot(_ctx.$slots, "footer", {
            beforeClose: _ctx.beforeClose
          })])) : createCommentVNode("v-if", true)],
          6
          /* CLASS, STYLE */
        )) : createCommentVNode("v-if", true)],
        2
        /* CLASS */
      ), [[vShow, _ctx.visible]])];
    }),
    _: 3
    /* FORWARDED */
  }, 8, ["name", "onAfterEnter", "onAfterLeave"]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
