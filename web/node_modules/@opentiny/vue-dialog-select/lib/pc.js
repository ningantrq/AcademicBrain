import { renderless, api } from "@opentiny/vue-renderless/dialog-select/vue";
import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import DialogBox from "@opentiny/vue-dialog-box";
import Button from "@opentiny/vue-button";
import Pager from "@opentiny/vue-pager";
import Grid from "@opentiny/vue-grid";
import Split from "@opentiny/vue-split";
import SelectedBox from "@opentiny/vue-selected-box";
import Input from "@opentiny/vue-input";
import Tree from "@opentiny/vue-tree";
import "@opentiny/vue-theme/dialog-select/index.css";
import { resolveComponent, openBlock, createBlock, mergeProps, createSlots, withCtx, createElementVNode, createElementBlock, renderSlot, createCommentVNode, createVNode, normalizeStyle, normalizeProps, guardReactiveProps, createTextVNode, toDisplayString } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  emits: ["open", "close", "opened", "closed", "drag-start", "drag-end", "drag-move", "update:visible", "size-change", "current-change", "prev-click", "next-click", "before-page-change", "change"],
  props: [].concat(props, ["dialogOp", "visible", "popseletor", "multi", "gridOp", "textField", "textSplit", "valueField", "valueSplit", "remoteSearch", "showPager", "pagerOp", "showSelectedBox", "selectedBoxOp", "treeOp", "beforeClose", "autoLookup", "lookupMethod", "mainHeight"]),
  components: {
    TinyDialogBox: DialogBox,
    TinyButton: Button,
    TinyPager: Pager,
    TinyGrid: Grid,
    TinySplit: Split,
    TinySelectedBox: SelectedBox,
    TinyInput: Input,
    TinyTree: Tree
  },
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-dialog-select__body"
};
var _hoisted_2 = {
  key: 0,
  class: "tiny-dialog-select__body-search"
};
var _hoisted_3 = {
  class: "tiny-dialog-select__body-selector"
};
var _hoisted_4 = {
  style: {
    "height": "calc(100% - 28px)"
  },
  class: "tiny-dialog-select__body-tree-wrapper"
};
var _hoisted_5 = {
  class: "tiny-dialog-select__footer"
};
var _hoisted_6 = {
  class: "tiny-dialog-select__footer-pager"
};
var _hoisted_7 = {
  class: "tiny-dialog-select__footer-buttons"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_grid = resolveComponent("tiny-grid");
  var _component_tiny_input = resolveComponent("tiny-input");
  var _component_tiny_tree = resolveComponent("tiny-tree");
  var _component_tiny_selected_box = resolveComponent("tiny-selected-box");
  var _component_tiny_split = resolveComponent("tiny-split");
  var _component_tiny_pager = resolveComponent("tiny-pager");
  var _component_tiny_button = resolveComponent("tiny-button");
  var _component_tiny_dialog_box = resolveComponent("tiny-dialog-box");
  return openBlock(), createBlock(_component_tiny_dialog_box, mergeProps({
    class: ["tiny-dialog-select", {
      "radio-check": !_ctx.multi
    }],
    visible: _ctx.visible,
    "onUpdate:visible": _cache[7] || (_cache[7] = function($event) {
      return _ctx.$emit("update:visible", $event);
    }),
    modal: "",
    draggable: "",
    "append-to-body": "",
    "modal-append-to-body": "",
    "close-on-press-escape": false,
    "close-on-click-modal": false
  }, _ctx.dialogOp, {
    onOpen: _cache[8] || (_cache[8] = function($event) {
      return _ctx.$emit("open", $event);
    }),
    onClose: _cache[9] || (_cache[9] = function($event) {
      return _ctx.$emit("close", $event);
    }),
    onOpened: _cache[10] || (_cache[10] = function($event) {
      return _ctx.$emit("opened", $event);
    }),
    onClosed: _cache[11] || (_cache[11] = function($event) {
      return _ctx.$emit("closed", $event);
    }),
    onDragStart: _cache[12] || (_cache[12] = function($event) {
      return _ctx.$emit("drag-start", $event);
    }),
    onDragEnd: _cache[13] || (_cache[13] = function($event) {
      return _ctx.$emit("drag-end", $event);
    }),
    onDragMove: _cache[14] || (_cache[14] = function($event) {
      return _ctx.$emit("drag-move", $event);
    })
  }), createSlots({
    default: withCtx(function() {
      return [createElementVNode("div", _hoisted_1, [_ctx.popseletor === "grid" && _ctx.slots.search ? (openBlock(), createElementBlock("div", _hoisted_2, [renderSlot(_ctx.$slots, "search")])) : createCommentVNode("v-if", true), createElementVNode("div", _hoisted_3, [createVNode(_component_tiny_split, {
        modelValue: _ctx.state.splitValue,
        "onUpdate:modelValue": _cache[1] || (_cache[1] = function($event) {
          return _ctx.state.splitValue = $event;
        }),
        "trigger-simple": "",
        style: normalizeStyle("height:" + _ctx.mainHeight + "px"),
        disabled: !_ctx.multi
      }, {
        left: withCtx(function() {
          return [_ctx.popseletor === "grid" ? (openBlock(), createElementBlock(
            "div",
            {
              key: 0,
              style: normalizeStyle("height:" + _ctx.mainHeight + "px"),
              class: "tiny-dialog-select__body-grid"
            },
            [_ctx.visible || _ctx.state.multiGridStore.inited ? (openBlock(), createBlock(_component_tiny_grid, mergeProps({
              key: 0,
              ref: "multiGrid"
            }, _ctx.gridOp, {
              border: "",
              stripe: false,
              size: "small",
              "auto-resize": "",
              height: _ctx.mainHeight + "px",
              loading: _ctx.state.multiGridStore.loading,
              "row-id": _ctx.valueField,
              columns: _ctx.state.gridColumns,
              "select-config": _ctx.state.multiGridStore.selectConfig,
              "radio-config": _ctx.state.multiGridStore.radioConfig,
              onSelectAll: _ctx.multiGridSelectAll,
              onSelectChange: _ctx.multiGridSelectChange,
              onRadioChange: _ctx.multiGridRadioChange
            }), null, 16, ["height", "loading", "row-id", "columns", "select-config", "radio-config", "onSelectAll", "onSelectChange", "onRadioChange"])) : createCommentVNode("v-if", true)],
            4
            /* STYLE */
          )) : createCommentVNode("v-if", true), _ctx.popseletor === "tree" ? (openBlock(), createElementBlock(
            "div",
            {
              key: 1,
              style: normalizeStyle("height:" + _ctx.mainHeight + "px"),
              class: "tiny-dialog-select__body-tree"
            },
            [createVNode(_component_tiny_input, {
              placeholder: _ctx.t("ui.dialogSelect.treeSearch"),
              modelValue: _ctx.state.multiTreeStore.filterText,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = function($event) {
                return _ctx.state.multiTreeStore.filterText = $event;
              }),
              onChange: _ctx.doMultiTreeFilter,
              clearable: ""
            }, null, 8, ["placeholder", "modelValue", "onChange"]), createElementVNode("div", _hoisted_4, [_ctx.visible || _ctx.state.multiTreeStore.inited ? (openBlock(), createBlock(_component_tiny_tree, mergeProps({
              key: 0,
              ref: "multiTree",
              "show-checkbox": _ctx.multi,
              "show-radio": !_ctx.multi,
              "lazy-current": "",
              lazy: "",
              "after-load": _ctx.multiTreeAfterLoad,
              "view-type": _ctx.state.multiTreeStore.viewType,
              "default-expanded-keys": _ctx.state.multiTreeStore.expandedKeys,
              "default-expanded-keys-highlight": _ctx.state.multiTreeStore.highlight,
              "filter-node-method": _ctx.multiTreeFilterNode,
              "filter-plain-method": _ctx.multiTreeFilterPlain,
              "default-checked-keys": _ctx.state.multiTreeStore.checkedKeys
            }, _ctx.treeOp, {
              onLeavePlainView: _ctx.multiTreeLeavePlain,
              onCheck: _ctx.multiTreeCheck,
              onNodeExpand: _ctx.multiTreeCheck,
              onNodeCollapse: _ctx.multiTreeCheck,
              onCheckPlain: _ctx.multiTreeCheck,
              onCheckChange: _ctx.multiTreeRadio
            }), null, 16, ["show-checkbox", "show-radio", "after-load", "view-type", "default-expanded-keys", "default-expanded-keys-highlight", "filter-node-method", "filter-plain-method", "default-checked-keys", "onLeavePlainView", "onCheck", "onNodeExpand", "onNodeCollapse", "onCheckPlain", "onCheckChange"])) : createCommentVNode("v-if", true)])],
            4
            /* STYLE */
          )) : createCommentVNode("v-if", true)];
        }),
        right: withCtx(function() {
          return [_ctx.multi ? (openBlock(), createElementBlock(
            "div",
            {
              key: 0,
              style: normalizeStyle("height:" + _ctx.mainHeight + "px"),
              class: "tiny-dialog-select__body-box"
            },
            [_ctx.showSelectedBox ? (openBlock(), createBlock(_component_tiny_selected_box, mergeProps({
              key: 0,
              ref: "selectedBox",
              select: _ctx.state.selectedDatas
            }, _ctx.selectedBoxOp, {
              onClear: _ctx.selectedBoxClear,
              onDelete: _ctx.selectedBoxDelete,
              onDrag: _ctx.selectedBoxDrag
            }), createSlots({
              _: 2
              /* DYNAMIC */
            }, [_ctx.slots.select ? {
              name: "select",
              fn: withCtx(function(params) {
                return [renderSlot(_ctx.$slots, "select", normalizeProps(guardReactiveProps(params)))];
              }),
              key: "0"
            } : void 0, _ctx.slots.button ? {
              name: "button",
              fn: withCtx(function(params) {
                return [renderSlot(_ctx.$slots, "button", normalizeProps(guardReactiveProps(params)))];
              }),
              key: "1"
            } : void 0, _ctx.slots.clear ? {
              name: "clear",
              fn: withCtx(function(params) {
                return [renderSlot(_ctx.$slots, "clear", normalizeProps(guardReactiveProps(params)))];
              }),
              key: "2"
            } : void 0, _ctx.slots.option ? {
              name: "option",
              fn: withCtx(function(params) {
                return [renderSlot(_ctx.$slots, "option", normalizeProps(guardReactiveProps(params)))];
              }),
              key: "3"
            } : void 0, _ctx.slots.close ? {
              name: "close",
              fn: withCtx(function(params) {
                return [renderSlot(_ctx.$slots, "close", normalizeProps(guardReactiveProps(params)))];
              }),
              key: "4"
            } : void 0]), 1040, ["select", "onClear", "onDelete", "onDrag"])) : createCommentVNode("v-if", true)],
            4
            /* STYLE */
          )) : createCommentVNode("v-if", true)];
        }),
        _: 3
        /* FORWARDED */
      }, 8, ["modelValue", "style", "disabled"])])])];
    }),
    _: 2
    /* DYNAMIC */
  }, [_ctx.slots.title ? {
    name: "title",
    fn: withCtx(function(params) {
      return [renderSlot(_ctx.$slots, "title", normalizeProps(guardReactiveProps(params)))];
    }),
    key: "0"
  } : void 0, _ctx.slots.footer ? {
    name: "footer",
    fn: withCtx(function(params) {
      return [renderSlot(_ctx.$slots, "footer", normalizeProps(guardReactiveProps(params)))];
    }),
    key: "1"
  } : void 0, !_ctx.slots.footer ? {
    name: "footer",
    fn: withCtx(function() {
      return [createElementVNode("div", _hoisted_5, [createElementVNode("div", _hoisted_6, [_ctx.popseletor === "grid" && _ctx.showPager ? (openBlock(), createBlock(
        _component_tiny_pager,
        mergeProps({
          key: 0,
          ref: "pager"
        }, _ctx.pagerOp, {
          "pager-count": 7,
          onSizeChange: _cache[2] || (_cache[2] = function($event) {
            return _ctx.$emit("size-change", $event);
          }),
          onCurrentChange: _cache[3] || (_cache[3] = function($event) {
            return _ctx.$emit("current-change", $event);
          }),
          onPrevClick: _cache[4] || (_cache[4] = function($event) {
            return _ctx.$emit("prev-click", $event);
          }),
          onNextClick: _cache[5] || (_cache[5] = function($event) {
            return _ctx.$emit("next-click", $event);
          }),
          onBeforePageChange: _cache[6] || (_cache[6] = function($event) {
            return _ctx.$emit("before-page-change", $event);
          })
        }),
        null,
        16
        /* FULL_PROPS */
      )) : createCommentVNode("v-if", true)]), createElementVNode("div", _hoisted_7, [createVNode(_component_tiny_button, {
        onClick: _ctx.onFooterCancel
      }, {
        default: withCtx(function() {
          return [createTextVNode(
            toDisplayString(_ctx.t("ui.button.cancel")),
            1
            /* TEXT */
          )];
        }),
        _: 1
        /* STABLE */
      }, 8, ["onClick"]), createVNode(_component_tiny_button, {
        onClick: _ctx.onFooterConfirm,
        type: "primary"
      }, {
        default: withCtx(function() {
          return [createTextVNode(
            toDisplayString(_ctx.t("ui.button.confirm")),
            1
            /* TEXT */
          )];
        }),
        _: 1
        /* STABLE */
      }, 8, ["onClick"])])])];
    }),
    key: "2"
  } : void 0]), 1040, ["class", "visible"]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
