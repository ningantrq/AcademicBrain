import type { PropType } from '@opentiny/vue-common';
export type DirectionType = 'horizontal' | 'vertical';
export type BorderStyleType = 'dashed' | 'solid';
export type ContentPositionType = 'left' | 'right' | 'center';
declare const _default: import("@vue/runtime-core").DefineComponent<{
    _constants: {
        type: ObjectConstructor;
        default: () => {};
    };
    direction: {
        type: PropType<DirectionType>;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    borderStyle: {
        type: PropType<BorderStyleType>;
        default: string;
    };
    contentPosition: {
        type: PropType<ContentPositionType>;
        default: string;
    };
    contentColor: {
        type: StringConstructor;
        default: string;
    };
    contentBackgroundColor: {
        type: StringConstructor;
        default: string;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    _constants: {
        type: ObjectConstructor;
        default: () => {};
    };
    direction: {
        type: PropType<DirectionType>;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    borderStyle: {
        type: PropType<BorderStyleType>;
        default: string;
    };
    contentPosition: {
        type: PropType<ContentPositionType>;
        default: string;
    };
    contentColor: {
        type: StringConstructor;
        default: string;
    };
    contentBackgroundColor: {
        type: StringConstructor;
        default: string;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    color: string;
    tiny_mode_root: boolean;
    _constants: Record<string, any>;
    direction: DirectionType;
    contentPosition: ContentPositionType;
    borderStyle: BorderStyleType;
    contentColor: string;
    contentBackgroundColor: string;
}, {}>;
export default _default;
