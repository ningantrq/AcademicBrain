function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { $prefix, $props, $setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  SCROLL_LOCK_CLASS: function SCROLL_LOCK_CLASS(mode) {
    var scrollLockClasses = {
      "mobile-first": "overflow-hidden"
    };
    return scrollLockClasses[mode] || "";
  }
};
var Drawer = {
  name: $prefix + "Drawer",
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    visible: {
      type: Boolean,
      default: false
    },
    customClass: [String, Object, Array],
    placement: {
      type: String,
      default: "right"
    },
    width: {
      type: String,
      default: "500px"
    },
    title: String,
    showClose: {
      type: Boolean,
      default: true
    },
    showHeader: {
      type: Boolean,
      default: true
    },
    showFooter: {
      type: Boolean,
      default: false
    },
    mask: {
      type: Boolean,
      default: true
    },
    maskClosable: {
      type: Boolean,
      default: true
    },
    dragable: Boolean,
    lockScroll: {
      type: Boolean,
      default: true
    },
    flex: {
      type: Boolean,
      default: false
    },
    zIndex: {
      type: Number,
      default: 2e3
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
};
var version = "3.13.0";
Drawer.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Drawer.install = function(Vue) {
  Vue.component(Drawer.name, Drawer);
};
Drawer.version = version;
export {
  Drawer as default
};
