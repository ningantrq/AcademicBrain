import { renderless, api } from "@opentiny/vue-renderless/drawer/vue";
import { props, setup as _setup } from "@opentiny/vue-common";
import "@opentiny/vue-theme/drawer/index.css";
import { IconClose } from "@opentiny/vue-icon";
import Button from "@opentiny/vue-button";
import { resolveComponent, openBlock, createElementBlock, createVNode, Transition, withCtx, normalizeClass, normalizeStyle, createCommentVNode, withDirectives, createElementVNode, renderSlot, toDisplayString, createTextVNode, vShow } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = {
  components: {
    TinyButton: Button,
    IconClose: IconClose()
  },
  props: [].concat(props, ["visible", "title", "showHeader", "showFooter", "customClass", "placement", "width", "mask", "dragable", "maskClosable", "lockScroll", "flex", "showClose", "zIndex"]),
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
};
var _hoisted_1 = {
  "data-tag": "tiny-drawer",
  class: "tiny-drawer"
};
var _hoisted_2 = {
  key: 0,
  "data-tag": "drawer-drag-bar",
  ref: "dragBar",
  class: /* @__PURE__ */ normalizeClass(["tiny-drawer__drag-bar"])
};
var _hoisted_3 = {
  class: "tiny-drawer__box"
};
var _hoisted_4 = {
  key: 0,
  "data-tag": "drawer-header",
  ref: "header",
  class: "tiny-drawer__header-wrapper"
};
var _hoisted_5 = {
  class: "tiny-drawer__header"
};
var _hoisted_6 = {
  key: 0,
  class: "tiny-drawer__title"
};
var _hoisted_7 = {
  class: "tiny-drawer__header-right"
};
var _hoisted_8 = {
  key: 1,
  "data-tag": "drawer-footer",
  ref: "footer",
  class: "tiny-drawer__footer"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_icon_close = resolveComponent("icon-close");
  var _component_tiny_button = resolveComponent("tiny-button");
  return openBlock(), createElementBlock("div", _hoisted_1, [createVNode(Transition, {
    name: "drawer-fade"
  }, {
    default: withCtx(function() {
      return [$props.mask && $props.visible ? (openBlock(), createElementBlock(
        "div",
        {
          key: 0,
          ref: "mask",
          class: normalizeClass(["tiny-drawer__mask", {
            "show-bg-color": _ctx.state.toggle
          }]),
          style: normalizeStyle({
            zIndex: $props.zIndex
          }),
          onClick: _cache[0] || (_cache[0] = function($event) {
            return $props.maskClosable && _ctx.close();
          })
        },
        null,
        6
        /* CLASS, STYLE */
      )) : createCommentVNode("v-if", true)];
    }),
    _: 1
    /* STABLE */
  }), createVNode(Transition, {
    name: "drawer-slide-" + $props.placement,
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        {
          "data-tag": "tiny-drawer-main",
          ref: "drawerBox",
          class: normalizeClass(["tiny-drawer__main", {
            "is-left": $props.placement === "left",
            "is-right": $props.placement === "right",
            "is-top": $props.placement === "top",
            "is-bottom": $props.placement === "bottom",
            "drag-effects": !_ctx.state.dragEvent.isDrag,
            "toggle": _ctx.state.toggle
          }, $props.customClass]),
          style: normalizeStyle({
            width: ["left", "right"].includes($props.placement) ? _ctx.state.computedWidth : null,
            zIndex: $props.zIndex
          })
        },
        [$props.dragable ? (openBlock(), createElementBlock(
          "div",
          _hoisted_2,
          null,
          512
          /* NEED_PATCH */
        )) : createCommentVNode("v-if", true), createElementVNode("div", _hoisted_3, [$props.showHeader ? (openBlock(), createElementBlock(
          "div",
          _hoisted_4,
          [renderSlot(_ctx.$slots, "header", {}, function() {
            return [createElementVNode("div", _hoisted_5, [$props.title ? (openBlock(), createElementBlock(
              "div",
              _hoisted_6,
              toDisplayString($props.title),
              1
              /* TEXT */
            )) : createCommentVNode("v-if", true), createElementVNode("div", _hoisted_7, [renderSlot(_ctx.$slots, "header-right")])])];
          }), $props.showClose ? (openBlock(), createElementBlock("button", {
            key: 0,
            type: "button",
            class: "tiny-drawer__headerbtn",
            "aria-label": "Close",
            onClick: _cache[1] || (_cache[1] = function() {
              return _ctx.close && _ctx.close.apply(_ctx, arguments);
            })
          }, [createVNode(_component_icon_close, {
            class: "tiny-svg-size tiny-drawer__close"
          })])) : createCommentVNode("v-if", true)],
          512
          /* NEED_PATCH */
        )) : createCommentVNode("v-if", true), createElementVNode(
          "div",
          {
            "data-tag": "drawer-body",
            ref: "body",
            class: normalizeClass(["tiny-drawer__body", {
              "flex flex-col": $props.flex
            }])
          },
          [renderSlot(_ctx.$slots, "default")],
          2
          /* CLASS */
        ), $props.showFooter ? (openBlock(), createElementBlock(
          "div",
          _hoisted_8,
          [renderSlot(_ctx.$slots, "footer", {}, function() {
            return [createVNode(_component_tiny_button, {
              type: "primary",
              onClick: _ctx.confirm
            }, {
              default: withCtx(function() {
                return [createTextVNode(
                  toDisplayString(_ctx.t("ui.button.confirm")),
                  1
                  /* TEXT */
                )];
              }),
              _: 1
              /* STABLE */
            }, 8, ["onClick"]), createVNode(_component_tiny_button, {
              plain: "",
              onClick: _ctx.close
            }, {
              default: withCtx(function() {
                return [createTextVNode(
                  toDisplayString(_ctx.t("ui.button.cancel")),
                  1
                  /* TEXT */
                )];
              }),
              _: 1
              /* STABLE */
            }, 8, ["onClick"])];
          })],
          512
          /* NEED_PATCH */
        )) : createCommentVNode("v-if", true)])],
        6
        /* CLASS, STYLE */
      ), [[vShow, $props.visible]])];
    }),
    _: 3
    /* FORWARDED */
  }, 8, ["name"])]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
