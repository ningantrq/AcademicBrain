function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import "@opentiny/vue-theme/drop-roles/index.css";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return PcTemplate;
};
var DropRoles = defineComponent({
  name: $prefix + "DropRoles",
  props: _extends({}, $props, {
    modelValue: {},
    placeholder: {
      type: String,
      default: ""
    },
    size: String,
    fetchRole: Function,
    fetchCurrentRole: Function,
    fields: Object,
    popperClass: String,
    popperAppendToBody: {
      type: Boolean,
      default: true
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
DropRoles.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
DropRoles.install = function(Vue) {
  Vue.component(DropRoles.name, DropRoles);
};
DropRoles.version = version;
export {
  DropRoles as default
};
