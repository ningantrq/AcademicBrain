import { renderless, api } from "@opentiny/vue-renderless/drop-times/vue";
import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import Select from "@opentiny/vue-select";
import Option from "@opentiny/vue-option";
import { resolveComponent, openBlock, createBlock, mergeProps, withCtx, createElementBlock, Fragment, renderList } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  components: {
    TinySelect: Select,
    TinyOption: Option
  },
  props: [].concat(props, ["size", "tabindex", "modelValue", "placeholder", "start", "end", "step", "popperClass", "popperAppendToBody"]),
  emits: ["change", "update:modelValue", "clear", "visible-change"],
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_option = resolveComponent("tiny-option");
  var _component_tiny_select = resolveComponent("tiny-select");
  return openBlock(), createBlock(_component_tiny_select, mergeProps({
    tabindex: _ctx.tabindex,
    size: _ctx.size,
    modelValue: _ctx.state.selectedValue,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = function($event) {
      return _ctx.state.selectedValue = $event;
    }),
    placeholder: _ctx.placeholder,
    onChange: _ctx.change,
    "popper-class": "tiny-drop-times" + (_ctx.popperClass ? " " + _ctx.popperClass : ""),
    "popper-append-to-body": _ctx.popperAppendToBody
  }, _ctx.a(_ctx.$attrs, ["^on[A-Z]"]), {
    onClear: _cache[1] || (_cache[1] = function($event) {
      return _ctx.$emit("clear");
    }),
    onVisibleChange: _cache[2] || (_cache[2] = function($event) {
      return _ctx.$emit("visible-change", $event);
    })
  }), {
    default: withCtx(function() {
      return [(openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.state.options, function(item, index) {
          return openBlock(), createBlock(_component_tiny_option, {
            key: index,
            label: item.label,
            value: item.value
          }, null, 8, ["label", "value"]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))];
    }),
    _: 1
    /* STABLE */
  }, 16, ["tabindex", "size", "modelValue", "placeholder", "onChange", "popper-class", "popper-append-to-body"]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
