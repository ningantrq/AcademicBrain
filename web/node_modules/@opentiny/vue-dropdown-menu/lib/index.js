function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var dropdownMenuProps = _extends({}, $props, {
  multiStage: {
    type: Boolean,
    default: false
  },
  checkedStatus: {
    type: Boolean,
    default: false
  },
  visibleArrow: {
    type: Boolean,
    default: false
  },
  arrowOffset: {
    type: Number,
    default: 0
  },
  placement: {
    type: String,
    default: "bottom-end"
    // aui的默认值为bottom-start
  },
  popperClass: String,
  popperAppendToBody: {
    type: Boolean,
    default: true
  },
  activeColor: String,
  closeOnClickOutside: {
    type: Boolean,
    default: true
  },
  closeOnClickOverlay: {
    type: Boolean,
    default: true
  },
  direction: {
    type: String,
    default: "down"
  },
  duration: {
    type: [Number, String],
    default: 0.2
  },
  overlay: {
    type: Boolean,
    default: true
  },
  zIndex: [Number, String],
  maxHeight: {
    type: [Number, String],
    default: "400"
  },
  // tiny新增
  options: {
    type: Array,
    default: function _default() {
      return [];
    }
  },
  textField: {
    type: String,
    default: "label"
  }
});
var DropdownMenu = defineComponent({
  name: $prefix + "DropdownMenu",
  componentName: $prefix + "DropdownMenu",
  props: dropdownMenuProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
DropdownMenu.install = function(Vue) {
  Vue.component(DropdownMenu.name, DropdownMenu);
};
DropdownMenu.version = version;
export {
  DropdownMenu as default
};
