export declare const dropdownProps: {
    modelValue: (StringConstructor | NumberConstructor)[];
    type: StringConstructor;
    trigger: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    splitButton: BooleanConstructor;
    singleButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hideTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hideOnClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
    border: {
        type: BooleanConstructor;
        default: boolean;
    };
    round: {
        type: BooleanConstructor;
        default: boolean;
    };
    showIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSelfIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    menuOptions: {
        type: ObjectConstructor;
        default: () => {
            options: never[];
            textField: string;
            popperClass: string;
            placement: string;
        };
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    inheritWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    suffixIcon: ObjectConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};
declare const _default: import("@vue/runtime-core").DefineComponent<{
    modelValue: (StringConstructor | NumberConstructor)[];
    type: StringConstructor;
    trigger: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    splitButton: BooleanConstructor;
    singleButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hideTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hideOnClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
    border: {
        type: BooleanConstructor;
        default: boolean;
    };
    round: {
        type: BooleanConstructor;
        default: boolean;
    };
    showIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSelfIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    menuOptions: {
        type: ObjectConstructor;
        default: () => {
            options: never[];
            textField: string;
            popperClass: string;
            placement: string;
        };
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    inheritWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    suffixIcon: ObjectConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    modelValue: (StringConstructor | NumberConstructor)[];
    type: StringConstructor;
    trigger: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    splitButton: BooleanConstructor;
    singleButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hideTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hideOnClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
    border: {
        type: BooleanConstructor;
        default: boolean;
    };
    round: {
        type: BooleanConstructor;
        default: boolean;
    };
    showIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSelfIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    menuOptions: {
        type: ObjectConstructor;
        default: () => {
            options: never[];
            textField: string;
            popperClass: string;
            placement: string;
        };
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    inheritWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    suffixIcon: ObjectConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    title: string;
    disabled: boolean;
    tiny_mode_root: boolean;
    trigger: string;
    size: string;
    splitButton: boolean;
    singleButton: boolean;
    showTimeout: number;
    hideTimeout: number;
    hideOnClick: boolean;
    tabindex: number;
    border: boolean;
    round: boolean;
    showIcon: boolean;
    showSelfIcon: boolean;
    menuOptions: Record<string, any>;
    inheritWidth: boolean;
}, {}>;
export default _default;
