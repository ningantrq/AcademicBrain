import { renderless, api } from "@opentiny/vue-renderless/dynamic-scroller/vue";
import { defineComponent, props, setup as _setup, emitter } from "@opentiny/vue-common";
import RecycleScroller from "@opentiny/vue-recycle-scroller";
import { resolveComponent, openBlock, createBlock, mergeProps, withCtx, renderSlot, normalizeProps, guardReactiveProps } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  inheritAttrs: false,
  emits: ["resize", "visible"],
  props: [].concat(props, ["items", "keyField", "direction", "listTag", "itemTag", "minItemSize"]),
  components: {
    TinyRecycleScroller: RecycleScroller
  },
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api,
      extendOptions: {
        emitter
      }
    });
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_recycle_scroller = resolveComponent("tiny-recycle-scroller");
  return openBlock(), createBlock(_component_tiny_recycle_scroller, mergeProps({
    ref: "scroller",
    class: "tiny-dynamic-scroller",
    items: _ctx.state.itemsWithSize,
    "min-item-size": _ctx.minItemSize,
    direction: _ctx.direction,
    "key-field": _ctx.keyField,
    "list-tag": _ctx.listTag,
    "item-tag": _ctx.itemTag
  }, _ctx.$attrs, {
    onResize: _ctx.onScrollerResize,
    onVisible: _ctx.onScrollerVisible
  }), {
    default: withCtx(function(_ref) {
      var itemWithSize = _ref.item, index = _ref.index, active = _ref.active;
      return [renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps({
        item: itemWithSize.item,
        index,
        active,
        itemWithSize
      })))];
    }),
    before: withCtx(function() {
      return [renderSlot(_ctx.$slots, "before")];
    }),
    after: withCtx(function() {
      return [renderSlot(_ctx.$slots, "after")];
    }),
    empty: withCtx(function() {
      return [renderSlot(_ctx.$slots, "empty")];
    }),
    _: 3
    /* FORWARDED */
  }, 16, ["items", "min-item-size", "direction", "key-field", "list-tag", "item-tag", "onResize", "onVisible"]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
