function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { createVNode, createTextVNode, resolveComponent } from "vue";
import { renderless, api } from "@opentiny/vue-renderless/file-upload/vue";
import { defineComponent, props, setup as _setup, h } from "@opentiny/vue-common";
import UploadList from "@opentiny/vue-upload-list";
import Upload from "@opentiny/vue-upload";
import Progress from "@opentiny/vue-progress";
import { iconUpload } from "@opentiny/vue-icon";
import "@opentiny/vue-theme-mobile/file-upload/index.css";
import "@opentiny/vue-theme-mobile/upload-list/index.css";
import "@opentiny/vue-theme-mobile/upload-dragger/index.css";
import "@opentiny/vue-theme-mobile/upload/index.css";
var _sfc_main = /* @__PURE__ */ defineComponent({
  inheritAttrs: false,
  props: [].concat(props, ["size", "action", "drag", "headers", "data", "multiple", "name", "withCredentials", "showFileList", "accept", "type", "beforeUpload", "beforeRemove", "fileList", "autoUpload", "listType", "httpRequest", "disabled", "limit", "fileIconList", "display", "fileTitle", "headerShow", "successStatistics", "uploadIcon"]),
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  },
  components: {
    Progress,
    UploadList,
    Upload,
    IconUpload: iconUpload()
  },
  render: function render() {
    var _this = this;
    var _this$state$listeners = this.state.listeners, _this$state$listeners2 = _this$state$listeners.exceed, exceed = _this$state$listeners2 === void 0 ? function() {
    } : _this$state$listeners2, _this$state$listeners3 = _this$state$listeners.preview, preview = _this$state$listeners3 === void 0 ? function() {
    } : _this$state$listeners3;
    var fileTitle = this.fileTitle, headerShow = this.headerShow, successStatistics = this.successStatistics, uploadIcon = this.uploadIcon;
    var uploadList;
    var uploaArr = this.state.uploadFiles;
    var successNum = 0;
    var pictureArr = [];
    uploaArr && uploaArr.map(function(item) {
      if (_this.listType === "picture-card" && item.url) {
        pictureArr.push(item.url);
      }
      if (item.status === "success") {
        successNum += 1;
      }
    });
    if (this.showFileList) {
      var listData = {
        props: {
          disabled: this.state.uploadDisabled,
          listType: this.listType,
          files: this.state.uploadFiles,
          filesIcon: this.fileIconList,
          display: this.display,
          srcList: pictureArr,
          handlePreview: preview
        },
        on: {
          remove: this.handleRemove
        }
      };
      uploadList = h(UploadList, _extends({}, listData), function(props2) {
        if (_this.slots.file) {
          return _this.slots.file({
            file: props2.file
          });
        }
      });
    }
    var uploadData = {
      props: {
        type: this.type,
        drag: this.drag,
        action: this.state.url,
        multiple: this.multiple,
        withCredentials: this.withCredentials,
        headers: this.headers,
        name: this.name,
        data: this.data,
        accept: this.accept,
        fileList: this.state.uploadFiles,
        autoUpload: this.autoUpload,
        listType: this.listType,
        disabled: this.state.uploadDisabled,
        limit: this.limit,
        onExceed: exceed,
        onStart: this.handleStart,
        onProgress: this.handleProgress,
        onSuccess: this.handleSuccess,
        onError: this.handleError,
        onPreview: preview,
        httpRequest: this.state.httpRequest,
        size: this.size
      },
      ref: "upload-inner"
    };
    var trigger = this.slots.trigger && this.slots.trigger() || this.slots.default();
    var uploadComponent = !headerShow || this.listType === "picture-card" ? h(Upload, _extends({}, uploadData), trigger) : "";
    var header = createVNode("div", {
      "class": "tiny-mobile-file-upload__header"
    }, [createVNode("div", {
      "class": "tiny-mobile-file-upload__header-title"
    }, [fileTitle]), createVNode("div", {
      "class": "tiny-mobile-file-upload__header-upload"
    }, [successStatistics ? createVNode("span", {
      "class": "upload-status"
    }, [successNum, createTextVNode("/"), uploaArr.length]) : "", this.listType !== "picture-card" && uploadIcon ? createVNode("span", {
      "class": "upload-icon"
    }, [h(Upload, _extends({}, uploadData), trigger || createVNode(resolveComponent("icon-upload"), null, null))]) : ""])]);
    return createVNode("div", {
      "class": ["tiny-mobile-file-upload", this.$attrs.class],
      "ref": "fileUpload"
    }, [headerShow ? header : "", createVNode("div", {
      "class": {
        "tiny-mobile-file-upload__wrap": true,
        "is-card": this.listType === "picture-card"
      }
    }, [this.listType === "picture-card" ? uploadList : "", this.slots.trigger ? [uploadComponent, this.slots.default && this.slots.default()] : uploadComponent, this.slots.tip && this.slots.tip(), this.listType !== "picture-card" ? uploadList : ""])]);
  }
});
export {
  _sfc_main as default
};
