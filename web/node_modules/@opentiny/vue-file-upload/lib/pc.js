function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { createVNode, mergeProps, resolveComponent } from "vue";
import { renderless, api } from "@opentiny/vue-renderless/file-upload/vue";
import { defineComponent, props, setup as _setup, h } from "@opentiny/vue-common";
import UploadList from "@opentiny/vue-upload-list";
import Upload from "@opentiny/vue-upload";
import Progress from "@opentiny/vue-progress";
import "@opentiny/vue-theme/file-upload/index.css";
import "@opentiny/vue-theme/upload-list/index.css";
import "@opentiny/vue-theme/upload-dragger/index.css";
import "@opentiny/vue-theme/upload/index.css";
import Modal from "@opentiny/vue-modal";
import DialogBox from "@opentiny/vue-dialog-box";
import Popover from "@opentiny/vue-popover";
import { iconAttachment, iconSuccessful, iconClose, iconDownload, iconFileCloudupload } from "@opentiny/vue-icon";
import CryptoJS from "crypto-js/core.js";
import "crypto-js/sha256.js";
import "crypto-js/lib-typedarrays.js";
import Streamsaver from "streamsaver";
var _sfc_main = /* @__PURE__ */ defineComponent({
  inheritAttrs: false,
  props: [].concat(props, ["edm", "action", "headers", "data", "multiple", "name", "drag", "dragger", "withCredentials", "showFileList", "accept", "type", "beforeUpload", "beforeRemove", "fileList", "autoUpload", "listType", "httpRequest", "disabled", "limit", "openDownloadFile", "mergeService", "fileSize", "thumbOption", "isFolderTitle", "listOption", "maxNameLength", "isHidden", "sourceType", "cacheToken", "pasteUpload", "reUploadable", "reUploadTip"]),
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api,
      extendOptions: {
        Modal,
        CryptoJS,
        Streamsaver
      }
    });
  },
  components: {
    Progress,
    UploadList,
    Upload,
    TinyDialogBox: DialogBox,
    Popover,
    IconAttachment: iconAttachment(),
    IconSuccessful: iconSuccessful(),
    IconCloseCircle: iconClose(),
    IconDownload: iconDownload(),
    IconFileCloudupload: iconFileCloudupload()
  },
  render: function render() {
    var uploadList;
    var _this$state$listeners = this.state.listeners, _this$state$listeners2 = _this$state$listeners.exceed, exceed = _this$state$listeners2 === void 0 ? function() {
    } : _this$state$listeners2, _this$state$listeners3 = _this$state$listeners.preview, preview = _this$state$listeners3 === void 0 ? void 0 : _this$state$listeners3;
    var _this$state = this.state, uploadFiles = _this$state.uploadFiles, isEdm = _this$state.isEdm, dialogConfigObj = _this$state.dialogConfigObj, isSuccess = _this$state.isSuccess, uploadDisabled = _this$state.uploadDisabled, url = _this$state.url, accept = _this$state.accept, httpRequest = _this$state.httpRequest, edmToken = _this$state.edmToken, iframeUrl = _this$state.iframeUrl;
    var downloadFile = this.downloadFile, handleRemove = this.handleRemove, handleReUpload = this.handleReUpload, handleReUploadTotal = this.handleReUploadTotal, updateFile = this.updateFile, slots = this.slots, _this$edm = this.edm, edm = _this$edm === void 0 ? {} : _this$edm, t = this.t, $attrs = this.$attrs, a = this.a;
    var isPictureCard = this.listType === "picture-card";
    var _this$thumbOption = this.thumbOption, showDel = _this$thumbOption.showDel, showDownload = _this$thumbOption.showDownload, showTooltip = _this$thumbOption.showTooltip, showUpdate = _this$thumbOption.showUpdate, icon = _this$thumbOption.icon;
    var execDownload = this.thumbOption.downloadFile || downloadFile;
    var isFolder = edm.upload ? edm.upload.isFolder : false;
    var getThumIcon = function getThumIcon2(file) {
      return [showDownload && createVNode("span", {
        "class": "thumb-icon",
        "title": t("ui.fileUpload.downloadFile"),
        "onClick": function onClick() {
          return execDownload(file);
        }
      }, [createVNode(resolveComponent("icon-download"), {
        "class": "download-icon"
      }, null)]), isEdm && !isFolder && showUpdate && createVNode("span", {
        "class": "thumb-icon",
        "title": t("ui.fileUpload.updateFile"),
        "onClick": function onClick() {
          return updateFile(file);
        }
      }, [createVNode(resolveComponent("icon-file-cloudupload"), {
        "class": "refres-icon"
      }, null)]), showDel && createVNode("span", {
        "class": "thumb-icon",
        "title": t("ui.fileUpload.deleteFile"),
        "onClick": function onClick() {
          return handleRemove(file);
        }
      }, [createVNode(resolveComponent("icon-close-circle"), {
        "class": "close-icon"
      }, null)])];
    };
    var getThumbList = function getThumbList2(file) {
      var result = slots.file && slots.file({
        file
      });
      if (result) {
        return result;
      } else {
        return [createVNode(resolveComponent("icon-successful"), {
          "class": "thumb-success-icon"
        }, null), createVNode("span", {
          "class": ["thumb-item-name", !showDel ? "hide-close-icon" : "", !showDownload ? "hide-download-icon" : ""]
        }, [file.name]), getThumIcon(file)];
      }
    };
    var getFileSize = function getFileSize2() {
      return createVNode("span", null, [uploadFiles.length]);
    };
    if (this.showFileList) {
      if (this.listType === "thumb") {
        uploadList = uploadFiles.length === 0 ? "" : h("div", {
          class: "tiny-upload--thumb__wrap"
        }, [h("Popover", {
          props: {
            trigger: "hover",
            popperClass: this.thumbOption.popperClass,
            width: this.thumbOption.width
          },
          scopedSlots: {
            reference: function reference() {
              return h("div", {
                class: "tiny-upload--thumb__head"
              }, [h(icon || "icon-attachment", {
                class: "thumb-icon"
              }), getFileSize()]);
            },
            default: function _default() {
              return h("div", {
                class: "tiny-upload--thumb__body"
              }, [h("div", {
                class: "tiny-upload--thumb__list"
              }, [uploadFiles.map(function(item) {
                return h("Popover", {
                  props: {
                    content: item.name,
                    trigger: showTooltip ? "hover" : "manual",
                    placement: "top"
                  },
                  scopedSlots: {
                    reference: function reference() {
                      return h("div", {
                        class: "thumb-item"
                      }, [getThumbList(item)]);
                    }
                  }
                });
              })])]);
            }
          }
        })]);
      } else {
        uploadList = createVNode(UploadList, {
          "disabled": uploadDisabled,
          "reUploadable": this.reUploadable,
          "reUploadTip": this.reUploadTip,
          "isFolder": isFolder,
          "isEdm": isEdm,
          "listType": this.listType,
          "files": uploadFiles,
          "isFolderTitle": this.isFolderTitle,
          "listOption": this.listOption,
          "maxNameLength": this.maxNameLength,
          "onRemove": handleRemove,
          "onReUpload": handleReUpload,
          "onReUploadTotal": handleReUploadTotal,
          "handlePreview": preview,
          "openDownloadFile": this.openDownloadFile,
          "onUpdate": updateFile
        }, {
          default: function _default(props2) {
            if (slots.file) {
              return slots.file({
                file: props2.file
              });
            }
          }
        });
      }
    }
    var uploadData = {
      props: {
        type: this.type,
        drag: this.drag,
        action: url,
        multiple: this.multiple,
        withCredentials: this.withCredentials,
        headers: this.headers,
        name: this.name,
        data: this.data,
        edm: this.edm,
        accept: isEdm ? accept : this.accept,
        fileList: uploadFiles,
        autoUpload: this.autoUpload,
        listType: this.listType,
        disabled: uploadDisabled,
        limit: this.limit,
        onExceed: exceed,
        onStart: this.handleStart,
        onProgress: this.handleProgress,
        onSuccess: this.handleSuccess,
        onError: this.handleError,
        onPreview: preview,
        httpRequest,
        isFolder,
        edmToken,
        pasteUpload: this.pasteUpload,
        isHidden: this.isHidden
      },
      ref: "upload-inner"
    };
    var defaultSlot = slots.default && slots.default();
    var trigger = slots.trigger ? slots.trigger() : defaultSlot;
    var uploadComponent = h(Upload, uploadData, trigger);
    var previewComponent = null;
    if (isEdm && isSuccess) {
      uploadData.props.accept = accept;
      uploadData.props.edmToken = edmToken;
    }
    if (this.edm.preview) {
      previewComponent = h("tiny-dialog-box", _extends({
        minHeight: "600px",
        width: "60%"
      }, dialogConfigObj, {
        scopedSlots: {
          default: function _default() {
            return createVNode("iframe", {
              "id": "_iframe",
              "style": "display: block;width: 100%;height: 500px;display: inline-block;",
              "allowfullscreen": true,
              "allowtransparency": "true",
              "frameborder": "0",
              "border": "0",
              "marginwidth": "0",
              "marginheight": "0",
              "scrolling": "no",
              "src": iframeUrl
            }, null);
          }
        }
      }));
    }
    var attrs = a($attrs, ["^on[A-Z]"]);
    return createVNode("div", mergeProps({
      "class": "tiny-file-upload"
    }, attrs), [isPictureCard ? uploadList : "", slots.trigger ? [uploadComponent, defaultSlot] : uploadComponent, slots.tip && slots.tip(), isPictureCard ? "" : uploadList, previewComponent]);
  }
});
export {
  _sfc_main as default
};
