import { renderless, api } from "@opentiny/vue-renderless/floating-button/vue";
import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import { IconPlus } from "@opentiny/vue-icon";
import { openBlock, createElementBlock, normalizeClass, normalizeStyle, createBlock, resolveDynamicComponent } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  emits: ["touchstart"],
  props: [].concat(props, ["position", "backgroundColor", "icon", "resetTime", "animated"]),
  components: {
    IconPlus: IconPlus()
  },
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock(
    "button",
    {
      "data-tag": "tiny-floating-button",
      onTouchstart: _cache[0] || (_cache[0] = function() {
        return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);
      }),
      class: normalizeClass(_ctx.m("w-11 h-11 p-3 rounded-full fixed bottom-6 leading-none", _ctx.position === "center" ? "" : _ctx.position === "left" ? !_ctx.state.specialHiddenSpace && "left-3" : "right-3", _ctx.state.disabled ? "text-color-text-disabled bg-color-bg-3 border-transparent active:cursor-not-allowed" : _ctx.backgroundColor === "white" ? "bg-color-bg-1" : "text-color-bg-1 bg-color-brand")),
      style: normalizeStyle(_ctx.state.style)
    },
    [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon), {
      class: normalizeClass(["w-5 h-5", _ctx.state.disabled ? "fill-color-icon-disabled active:cursor-not-allowed" : _ctx.backgroundColor === "white" ? "fill-color-icon-secondary" : "fill-color-bg-1"])
    }, null, 8, ["class"]))],
    38
    /* CLASS, STYLE, NEED_HYDRATION */
  );
}
var mobileFirst = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  mobileFirst as default
};
