function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $props, $setup, props, setup as _setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
import { renderless, api } from "@opentiny/vue-renderless/flowchart/node";
import { IconYes, IconClose } from "@opentiny/vue-icon";
import { resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, createBlock, createCommentVNode, Fragment, renderList, toDisplayString } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

import ResizeObserver from "@opentiny/vue-renderless/common/deps/ResizeObserver";
import "@opentiny/vue-theme/flowchart/index.css";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {};
var createNode = function createNode2(name, status, label, date, items, row, col, other) {
  var info = {
    status,
    label,
    date,
    items,
    row,
    col,
    other
  };
  return {
    name,
    info
  };
};
var createLink = function createLink2(from, to, p, status, style, other) {
  var info = {
    status,
    style: style || "solid",
    other
  };
  return {
    from,
    to,
    p,
    info
  };
};
var createItem = function createItem2(key, name, role, status, comment, date, other) {
  return {
    key,
    name,
    role,
    status,
    comment,
    date,
    other
  };
};
var createConfig = function createConfig2() {
  return {
    width: 1024,
    height: 420,
    rows: 8,
    cols: 8,
    status: {
      1: "complete",
      2: "ongoing",
      3: "pending",
      4: "fail"
    },
    colors: {
      1: "#1890ff",
      2: "#096dd9",
      3: "#d9d9d9",
      4: "#f5222d"
    },
    background: "#fff",
    statusComplete: 1,
    statusOngoing: 2,
    statusFail: 4,
    anchor: "center",
    iconWrapperSize: 24,
    iconSize: 20,
    iconSvgSize: 14,
    labelSpacing: 8,
    labelWidth: 80,
    labelHeight: 60,
    labelDateColor: "#999",
    listWidth: 62,
    listThreshold: 1,
    listIconSize: 20,
    listBorderColor: "#d9d9d9",
    listIconColor: "#999",
    headUrl: "",
    headSize: 20,
    drawLink: null,
    styleLink: null,
    styleHoverLink: null,
    hoverHit: 3,
    checkItemStatus: null,
    font: '12px "Microsoft YaHei"',
    delay: 10,
    adjustPos: null,
    radius: 4,
    thin: true
  };
};
var Flowchart = defineComponent({
  name: $prefix + "Flowchart",
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    data: Object,
    config: Object
  }),
  setup: function setup(props2, context) {
    return $setup({
      props: props2,
      context,
      template
    });
  }
});
var _sfc_main = defineComponent({
  props: [].concat(props, ["node", "config", "titleClass"]),
  components: {
    TinyIconYes: IconYes(),
    TinyIconClose: IconClose()
  },
  setup: function setup2(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _hoisted_1 = ["title"];
function _sfc_render(_ctx, _cache, $props2, $setup2, $data, $options) {
  var _component_tiny_icon_yes = resolveComponent("tiny-icon-yes");
  var _component_tiny_icon_close = resolveComponent("tiny-icon-close");
  return openBlock(), createElementBlock(
    "div",
    {
      "data-tag": "tiny-flowchart-node",
      key: _ctx.state.nodeName,
      class: normalizeClass(["layout-" + _ctx.state.nodeLayout, "size-" + _ctx.state.nodeSize, "status-" + _ctx.state.nodeStatus, "absolute z-20 h-6", {
        "sm:h-4": _ctx.state.sizeMini,
        "sm:h-8": _ctx.state.sizeMedium
      }]),
      style: normalizeStyle({
        width: _ctx.state.nodeWidth + "px"
      })
    },
    [createElementVNode(
      "div",
      {
        ref: "icon",
        class: normalizeClass(["border-solid rounded-full flex items-center justify-center", "absolute z-0 translate-x-1 translate-y-1 w-4 h-4 text-base", "hover:ring hover:ring-color-bg-2 stroke-2 cursor-pointer", {
          "sm:w-2 sm:h-2": _ctx.state.sizeMini,
          "sm:w-6 sm:h-6 sm:text-2xl": _ctx.state.sizeMedium
        }, {
          "border-4 bg-clip-padding border-color-brand-hover-subtle bg-color-border-focus": _ctx.state.isSmall && _ctx.state.statOngoing || !_ctx.state.isSmall && _ctx.state.statOngoing && _ctx.state.sizeMedium,
          "border-0 border-color-bg-1 bg-color-border-focus": !_ctx.state.isSmall && _ctx.state.statOngoing && !_ctx.state.sizeMedium,
          "border-2 border-color-border bg-color-bg-1": _ctx.state.statNotStarted
        }, _ctx.state.isActive ? {
          "border-2 bg-clip-padding border-color-brand-hover-subtle bg-color-border-focus": _ctx.state.statCompleted,
          "border-2 bg-clip-padding border-color-brand-hover-subtle bg-color-error": _ctx.state.statFail
        } : {
          "border-2 border-color-border-focus bg-color-bg-1": _ctx.state.statCompleted,
          "border-2 border-color-error bg-color-bg-1": _ctx.state.statFail
        }])
      },
      [!_ctx.state.sizeMini || _ctx.state.sizeMini && _ctx.state.isSmall ? (openBlock(), createElementBlock(
        "span",
        {
          key: 0,
          class: normalizeClass(["inline-flex origin-center stroke-color-bg-1", _ctx.state.isSmall ? "scale-75" : "scale-95"])
        },
        [_ctx.state.statCompleted ? (openBlock(), createBlock(_component_tiny_icon_yes, {
          key: 0,
          class: normalizeClass({
            "stroke-color-border-focus": !_ctx.state.isActive
          })
        }, null, 8, ["class"])) : createCommentVNode("v-if", true), _ctx.state.statFail ? (openBlock(), createBlock(_component_tiny_icon_close, {
          key: 1,
          class: normalizeClass({
            "stroke-color-error": !_ctx.state.isActive
          })
        }, null, 8, ["class"])) : createCommentVNode("v-if", true)],
        2
        /* CLASS */
      )) : createCommentVNode("v-if", true)],
      2
      /* CLASS */
    ), createElementVNode(
      "div",
      {
        ref: "title",
        class: normalizeClass(_ctx.m("absolute z-0 translate-x-1", _ctx.state.layUpdown ? "top-6" : "left-6 translate-y-1", _ctx.state.layUpdown ? {
          "sm:top-4": _ctx.state.sizeMini,
          "sm:top-8": _ctx.state.sizeMedium
        } : {
          "sm:left-4": _ctx.state.sizeMini,
          "sm:left-8": _ctx.state.sizeMedium
        }, _ctx.titleClass || "")),
        style: normalizeStyle({
          maxWidth: _ctx.state.titleMaxWidth + "px",
          left: _ctx.state.layUpdown ? "-" + _ctx.state.posLeft + "px" : ""
        })
      },
      [(openBlock(), createElementBlock(
        Fragment,
        null,
        renderList(["title", "subtitle", "auxi"], function(key) {
          return openBlock(), createElementBlock(
            Fragment,
            null,
            [_ctx.state[key].show ? (openBlock(), createElementBlock("div", {
              key,
              title: _ctx.state[key].text,
              class: normalizeClass(["truncate", _ctx.state.layUpdown ? "text-center" : "text-left", key === "title" && _ctx.state.sizeMedium ? "text-sm" : "text-xs", _ctx.state.isSmall ? {
                "leading-5": key === "title",
                "leading-4": key !== "title"
              } : {
                "leading-6": key === "title" && _ctx.state.sizeMedium,
                "leading-5": key !== "title" && _ctx.state.sizeMedium || key === "title" && _ctx.state.sizeSmall,
                "leading-4": key !== "title" && _ctx.state.sizeSmall || _ctx.state.sizeMini
              }, {
                "text-color-icon-focus": _ctx.state.statOngoing,
                "text-color-text-primary": key === "title" && _ctx.state.statCompleted,
                "text-color-error": key === "title" && _ctx.state.statFail,
                "text-color-icon-secondary": key === "title" && _ctx.state.statNotStarted,
                "text-color-icon-placeholder": key !== "title" && !_ctx.state.statOngoing
              }])
            }, toDisplayString(_ctx.state[key].text), 11, _hoisted_1)) : createCommentVNode("v-if", true)],
            64
            /* STABLE_FRAGMENT */
          );
        }),
        64
        /* STABLE_FRAGMENT */
      ))],
      6
      /* CLASS, STYLE */
    )],
    6
    /* CLASS, STYLE */
  );
}
var Node = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var resizeMixin = function resizeMixin2(_ref) {
  var apiPrefix = _ref.apiPrefix, refName = _ref.refName, nodeWrapperSize = _ref.nodeWrapperSize;
  apiPrefix = apiPrefix || "rszmx";
  refName = refName || "chart";
  nodeWrapperSize = nodeWrapperSize || 32;
  var observer = apiPrefix + "ResizeObserver";
  var observed = apiPrefix + "ResizeObserved";
  return {
    mounted: function mounted() {
      var _this = this;
      this.$nextTick(function() {
        var observedElement = _this.$el.parentNode;
        if (observedElement) {
          _this[observer] = new ResizeObserver(function() {
            window.requestAnimationFrame(function() {
              if (_this.$refs[refName]) {
                _this.$refs[refName].refresh({
                  graphWidth: observedElement.offsetWidth,
                  adjustX: -nodeWrapperSize / 2
                });
              }
            });
          });
          _this[observer].observe(observedElement);
          _this[observed] = observedElement;
        }
      });
    },
    beforeUnmount: function beforeUnmount() {
      if (this[observer]) {
        this[observer].unobserve(this[observed]);
        this[observer].disconnect();
        this[observer] = null;
        this[observed] = null;
      }
    }
  };
};
var resizeMixin$1 = resizeMixin;
var version = "3.13.0";
Flowchart.install = function(Vue) {
  Vue.component(Flowchart.name, Flowchart);
};
Flowchart.version = version;
Flowchart.createNode = createNode;
Flowchart.createLink = createLink;
Flowchart.createItem = createItem;
Flowchart.createConfig = createConfig;
Flowchart.Node = Node;
Flowchart.resizeMixin = resizeMixin$1;
export {
  Flowchart as default
};
