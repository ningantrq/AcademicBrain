import { hooks } from '@opentiny/vue-common';
import type { IFormItemApi } from '@opentiny/vue-renderless/types/form-item.type';
declare const _default: hooks.DefineComponent<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            FORM_NAME: string;
            FORM_ITEM_NAME: string;
        };
    };
    appendToBody: {
        type: BooleanConstructor;
        default: undefined;
    };
    error: StringConstructor;
    for: StringConstructor;
    inlineMessage: {
        type: BooleanConstructor;
        default: undefined;
    };
    messageType: StringConstructor;
    label: StringConstructor;
    labelWidth: StringConstructor;
    manual: BooleanConstructor;
    popperOptions: {
        type: ObjectConstructor;
        default: () => {};
    };
    prop: StringConstructor;
    required: {
        type: BooleanConstructor;
        default: undefined;
    };
    rules: (ObjectConstructor | ArrayConstructor)[];
    showMessage: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: StringConstructor;
    validateDisabled: BooleanConstructor;
    validateDebounce: BooleanConstructor;
    validatePosition: StringConstructor;
    validateStatus: StringConstructor;
    validateType: StringConstructor;
    validateIcon: {
        type: ObjectConstructor;
        default: null;
    };
    ellipsis: {
        type: BooleanConstructor;
        default: boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, IFormItemApi, unknown, {}, {}, hooks.ComponentOptionsMixin, hooks.ComponentOptionsMixin, {}, string, hooks.VNodeProps & hooks.AllowedComponentProps & hooks.ComponentCustomProps, Readonly<hooks.ExtractPropTypes<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            FORM_NAME: string;
            FORM_ITEM_NAME: string;
        };
    };
    appendToBody: {
        type: BooleanConstructor;
        default: undefined;
    };
    error: StringConstructor;
    for: StringConstructor;
    inlineMessage: {
        type: BooleanConstructor;
        default: undefined;
    };
    messageType: StringConstructor;
    label: StringConstructor;
    labelWidth: StringConstructor;
    manual: BooleanConstructor;
    popperOptions: {
        type: ObjectConstructor;
        default: () => {};
    };
    prop: StringConstructor;
    required: {
        type: BooleanConstructor;
        default: undefined;
    };
    rules: (ObjectConstructor | ArrayConstructor)[];
    showMessage: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: StringConstructor;
    validateDisabled: BooleanConstructor;
    validateDebounce: BooleanConstructor;
    validatePosition: StringConstructor;
    validateStatus: StringConstructor;
    validateType: StringConstructor;
    validateIcon: {
        type: ObjectConstructor;
        default: null;
    };
    ellipsis: {
        type: BooleanConstructor;
        default: boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    ellipsis: boolean;
    required: boolean;
    tiny_mode_root: boolean;
    _constants: Record<string, any>;
    appendToBody: boolean;
    vertical: boolean;
    manual: boolean;
    popperOptions: Record<string, any>;
    inlineMessage: boolean;
    showMessage: boolean;
    validateDisabled: boolean;
    validateDebounce: boolean;
    validateIcon: Record<string, any>;
}, {}>;
export default _default;
