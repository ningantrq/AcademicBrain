function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var formProps = _extends({}, $props, {
  model: Object,
  rules: Object,
  inlineMessage: {
    type: Boolean,
    default: void 0
  },
  messageType: String,
  statusIcon: Boolean,
  showMessage: {
    type: Boolean,
    default: true
  },
  validatePosition: {
    type: String,
    default: "right"
  },
  size: String,
  disabled: Boolean,
  validateOnRuleChange: {
    type: Boolean,
    default: true
  },
  hideRequiredAsterisk: {
    type: Boolean,
    default: void 0
  },
  labelPosition: {
    type: String,
    default: "right",
    validator: function validator(value) {
      return ["left", "top", "right"].includes(value);
    }
  },
  labelWidth: {
    type: String,
    default: "80px"
  },
  labelAlign: {
    type: Boolean,
    default: false
  },
  contentOffset: Number,
  labelSuffix: {
    type: String,
    default: ""
  },
  inline: {
    type: Boolean,
    default: false
  },
  responsiveLayout: {
    type: Boolean,
    default: false
  },
  validateType: {
    type: String,
    default: "tip",
    validator: function validator2(value) {
      return Boolean(~["tip", "text"].indexOf(value));
    }
  },
  validateIcon: Object,
  manual: {
    type: Boolean,
    default: false
  },
  appendToBody: {
    type: Boolean,
    default: void 0
  },
  popperOptions: {
    type: Object,
    default: function _default() {
      return {};
    }
  },
  displayOnly: {
    type: Boolean,
    default: false
  },
  showAutoWidth: {
    type: Boolean,
    default: false
  },
  showEmptyValue: {
    type: Boolean,
    default: true
  },
  validateTag: {
    type: Boolean,
    default: false
  },
  overflowTitle: {
    type: Boolean,
    default: false
  }
});
var Form = defineComponent({
  name: $prefix + "Form",
  componentName: "Form",
  props: formProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
Form.install = function(Vue) {
  Vue.component(Form.name, Form);
};
Form.version = version;
export {
  Form as default
};
