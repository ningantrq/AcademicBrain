export declare const formProps: {
    model: ObjectConstructor;
    rules: ObjectConstructor;
    inlineMessage: {
        type: BooleanConstructor;
        default: undefined;
    };
    messageType: StringConstructor;
    statusIcon: BooleanConstructor;
    showMessage: {
        type: BooleanConstructor;
        default: boolean;
    };
    validatePosition: {
        type: StringConstructor;
        default: string;
    };
    size: StringConstructor;
    disabled: BooleanConstructor;
    validateOnRuleChange: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideRequiredAsterisk: {
        type: BooleanConstructor;
        default: undefined;
    };
    labelPosition: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    labelWidth: {
        type: StringConstructor;
        default: string;
    };
    labelAlign: {
        type: BooleanConstructor;
        default: boolean;
    };
    contentOffset: NumberConstructor;
    labelSuffix: {
        type: StringConstructor;
        default: string;
    };
    inline: {
        type: BooleanConstructor;
        default: boolean;
    };
    responsiveLayout: {
        type: BooleanConstructor;
        default: boolean;
    };
    validateType: {
        type: StringConstructor;
        default: string;
        validator(value: string): boolean;
    };
    validateIcon: ObjectConstructor;
    manual: {
        type: BooleanConstructor;
        default: boolean;
    };
    appendToBody: {
        type: BooleanConstructor;
        default: undefined;
    };
    popperOptions: {
        type: ObjectConstructor;
        default: () => {};
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    showAutoWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    showEmptyValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    validateTag: {
        type: BooleanConstructor;
        default: boolean;
    };
    overflowTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};
declare const _default: import("@vue/runtime-core").DefineComponent<{
    model: ObjectConstructor;
    rules: ObjectConstructor;
    inlineMessage: {
        type: BooleanConstructor;
        default: undefined;
    };
    messageType: StringConstructor;
    statusIcon: BooleanConstructor;
    showMessage: {
        type: BooleanConstructor;
        default: boolean;
    };
    validatePosition: {
        type: StringConstructor;
        default: string;
    };
    size: StringConstructor;
    disabled: BooleanConstructor;
    validateOnRuleChange: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideRequiredAsterisk: {
        type: BooleanConstructor;
        default: undefined;
    };
    labelPosition: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    labelWidth: {
        type: StringConstructor;
        default: string;
    };
    labelAlign: {
        type: BooleanConstructor;
        default: boolean;
    };
    contentOffset: NumberConstructor;
    labelSuffix: {
        type: StringConstructor;
        default: string;
    };
    inline: {
        type: BooleanConstructor;
        default: boolean;
    };
    responsiveLayout: {
        type: BooleanConstructor;
        default: boolean;
    };
    validateType: {
        type: StringConstructor;
        default: string;
        validator(value: string): boolean;
    };
    validateIcon: ObjectConstructor;
    manual: {
        type: BooleanConstructor;
        default: boolean;
    };
    appendToBody: {
        type: BooleanConstructor;
        default: undefined;
    };
    popperOptions: {
        type: ObjectConstructor;
        default: () => {};
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    showAutoWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    showEmptyValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    validateTag: {
        type: BooleanConstructor;
        default: boolean;
    };
    overflowTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    model: ObjectConstructor;
    rules: ObjectConstructor;
    inlineMessage: {
        type: BooleanConstructor;
        default: undefined;
    };
    messageType: StringConstructor;
    statusIcon: BooleanConstructor;
    showMessage: {
        type: BooleanConstructor;
        default: boolean;
    };
    validatePosition: {
        type: StringConstructor;
        default: string;
    };
    size: StringConstructor;
    disabled: BooleanConstructor;
    validateOnRuleChange: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideRequiredAsterisk: {
        type: BooleanConstructor;
        default: undefined;
    };
    labelPosition: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    labelWidth: {
        type: StringConstructor;
        default: string;
    };
    labelAlign: {
        type: BooleanConstructor;
        default: boolean;
    };
    contentOffset: NumberConstructor;
    labelSuffix: {
        type: StringConstructor;
        default: string;
    };
    inline: {
        type: BooleanConstructor;
        default: boolean;
    };
    responsiveLayout: {
        type: BooleanConstructor;
        default: boolean;
    };
    validateType: {
        type: StringConstructor;
        default: string;
        validator(value: string): boolean;
    };
    validateIcon: ObjectConstructor;
    manual: {
        type: BooleanConstructor;
        default: boolean;
    };
    appendToBody: {
        type: BooleanConstructor;
        default: undefined;
    };
    popperOptions: {
        type: ObjectConstructor;
        default: () => {};
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    showAutoWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    showEmptyValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    validateTag: {
        type: BooleanConstructor;
        default: boolean;
    };
    overflowTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    disabled: boolean;
    tiny_mode_root: boolean;
    appendToBody: boolean;
    manual: boolean;
    displayOnly: boolean;
    showEmptyValue: boolean;
    popperOptions: Record<string, any>;
    showAutoWidth: boolean;
    inline: boolean;
    inlineMessage: boolean;
    labelWidth: string;
    showMessage: boolean;
    validatePosition: string;
    validateType: string;
    statusIcon: boolean;
    validateTag: boolean;
    labelSuffix: string;
    validateOnRuleChange: boolean;
    hideRequiredAsterisk: boolean;
    labelPosition: string;
    labelAlign: boolean;
    responsiveLayout: boolean;
    overflowTitle: boolean;
}, {}>;
export default _default;
