import { defineComponent, $prefix, setup as _setup } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/fullscreen/vue";
import { openBlock, createElementBlock, mergeProps, renderSlot } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

import FullscreenApi from "@opentiny/vue-renderless/common/deps/fullscreen/apis";
import "@opentiny/vue-theme/fullscreen/index.css";
var _sfc_main = defineComponent({
  name: $prefix + "Fullscreen",
  props: {
    fullscreen: {
      type: Boolean,
      default: false
    },
    exitOnClickWrapper: {
      type: Boolean,
      default: true
    },
    fullscreenClass: {
      type: String,
      default: ""
    },
    pageOnly: {
      type: Boolean,
      default: false
    },
    teleport: {
      type: Boolean,
      default: false
    },
    zIndex: {
      type: Number,
      default: 0
    },
    beforeChange: Function
  },
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _class;
  return openBlock(), createElementBlock(
    "div",
    mergeProps({
      ref: "wrapper",
      class: "tiny-fullscreen"
    }, _ctx.$attrs, {
      style: _ctx.state.wrapperStyle,
      class: (_class = {}, _class[_ctx.fullscreenClass] = _ctx.state.isFullscreen, _class),
      onClick: _cache[0] || (_cache[0] = function($event) {
        return _ctx.shadeClick($event);
      }),
      onKeyup: _cache[1] || (_cache[1] = function() {
        return _ctx.exit && _ctx.exit.apply(_ctx, arguments);
      })
    }),
    [renderSlot(_ctx.$slots, "default")],
    16
    /* FULL_PROPS */
  );
}
var Fullscreen = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.13.0";
var apis = ["exit", "enter", "element", "getState", "isEnabled", "isFullscreen", "options", "request", "support", "toggle"];
apis.forEach(function(api2) {
  if (FullscreenApi[api2] && !Fullscreen[api2]) {
    Fullscreen[api2] = FullscreenApi[api2];
  }
});
Fullscreen.install = function(Vue) {
  Vue.component(Fullscreen.name, Fullscreen);
};
Fullscreen.version = version;
export {
  Fullscreen as default
};
