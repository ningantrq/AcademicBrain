declare const _default: import("@vue/runtime-core").DefineComponent<{
    customMode: StringConstructor;
    selectedTemplateVal: {
        type: ObjectConstructor;
        default: () => {};
    };
    historyConfig: {
        type: ObjectConstructor;
        default: () => {};
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, unknown, {
    IconSave: import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
        [key: string]: any;
    }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    IconEdit: import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
        [key: string]: any;
    }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    IconDel: import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
        [key: string]: any;
    }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    saveDisabled: boolean;
    selectDisabled: boolean;
    applyDisabled: boolean;
    editDisabled: boolean;
    delDisabled: boolean;
    options: never[];
    option: any;
    selected: null;
    selectedName: null;
    visible: boolean;
    userKey: null;
    status: null;
    editName: null;
    selectedTemplateName: string;
    savedTemplateName: string;
    templateVisible: boolean;
    saveMethod: string;
}, {
    dialogTitle(): any;
}, {
    t: (this: any, path: any, options?: any) => any;
    handleSave(): void;
    handleSaveConfirm(flag: any): void;
    handleApply(): void;
    handleApplyConfirm(flag: any): void;
    handleEdit(): void;
    handleEditConfirm(flag: any): void;
    handleDel(): void;
    handleDelConfirm(flag: any): void;
    doStorage(business: any, postOperate: any, noStore?: boolean): void;
    handleSelectChange(): void;
    doCheck({ storageType }: {
        storageType: any;
    }): boolean;
    setUserKey(): void;
    setSelected(): void;
    fixStatus(): void;
    enableAll(): void;
}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    customMode: StringConstructor;
    selectedTemplateVal: {
        type: ObjectConstructor;
        default: () => {};
    };
    historyConfig: {
        type: ObjectConstructor;
        default: () => {};
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    tiny_mode_root: boolean;
    historyConfig: Record<string, any>;
    selectedTemplateVal: Record<string, any>;
}, {}>;
export default _default;
