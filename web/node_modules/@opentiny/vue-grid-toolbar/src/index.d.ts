import { hooks } from '@opentiny/vue-common';
declare const _default: hooks.DefineComponent<{
    id: StringConstructor;
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    customMode: {
        type: StringConstructor;
        default: () => any;
    };
    resizable: {
        type: (ObjectConstructor | BooleanConstructor)[];
        default: () => {
            storage: boolean;
        };
    };
    refresh: {
        type: (ObjectConstructor | BooleanConstructor)[];
        default: () => any;
    };
    setting: {
        type: (ObjectConstructor | BooleanConstructor)[];
        default: () => any;
    };
    fullScreen: {
        type: BooleanConstructor;
        default: boolean;
    };
    buttons: {
        type: ArrayConstructor;
        default: () => never[];
    };
    size: StringConstructor;
    data: ArrayConstructor;
    customs: ArrayConstructor;
    beforeOpenFullScreen: FunctionConstructor;
    beforeCloseFullScreen: FunctionConstructor;
    resetMethod: FunctionConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, {
    slots: Readonly<{
        [name: string]: hooks.Slot<any> | undefined;
    }>;
    tableListeners: any;
}, {
    table: null;
    isRefresh: boolean;
    tableFullColumn: never[];
    initSettings: {
        pageSizes: never[];
        pageSize: number;
        sortType: string;
        showIndex: boolean;
        multipleHistory: {
            tableMaxHeight: string;
            showTitle: boolean;
            title: string;
            showSave: boolean;
            saveDisabled: boolean;
            saveText: string;
            labelText: string;
            selectPlaceholder: string;
            selectDisabled: boolean;
            showApply: boolean;
            applyDisabled: boolean;
            applyTitle: string;
            applyIcon: null;
            showEdit: boolean;
            editDisabled: boolean;
            editTitle: string;
            editIcon: null;
            showDel: boolean;
            delDisabled: boolean;
            delTitle: string;
            delIcon: null;
            storageKey: string;
            remoteMethod: null;
            userKey: string;
            remoteSelectedMethod: null;
        };
    };
    settingStore: {
        visible: boolean;
        customVisible: boolean;
    };
    isFull: boolean;
}, {
    vSize(): any;
    refreshOpts(): any;
    resizableOpts(): any;
    settingOpts(): any;
}, {
    updateConf(): void;
    closeSetting(): void;
    openSetting(): void;
    orderSetting(): {
        fileds: any;
        property: any;
        order: any;
        prop: any;
    }[];
    loadColWidth(): {} | undefined;
    loadStorage(): void;
    updateColumn(fullColumn: any): void;
    updateCustoms(customs: any): void;
    getStorageMap(key: any): any;
    saveCustomSettings(columnConfigs: any): Promise<void>;
    savePagerSettings(settingConfigs: any): Promise<void>;
    saveColumnHide(): Promise<void>;
    saveColumnWidth(isReset: any): Promise<void>;
    resetResizable(): void;
    updateResizable(isReset: any): any;
    updateSetting(): Promise<any>;
    applySettings({ columns, pageSize }: {
        columns: any;
        pageSize: any;
    }): void;
    handleSaveSettings(settingConfigs: any): void;
    handleGlobalMousedownEvent(event: any): void;
    handleGlobalBlurEvent(): void;
    handleClickSettingEvent(): void;
    handleClickCustomEvent(): void;
    handleMouseenterSettingEvent(): void;
    handleMouseleaveSettingEvent(): void;
    handleWrapperMouseenterEvent(): void;
    handleWrapperMouseleaveEvent(): void;
    refreshEvent(): void;
    btnEvent(event: any, item: any): void;
    fullscreenEvent(): void;
}, hooks.ComponentOptionsMixin, hooks.ComponentOptionsMixin, {}, string, hooks.VNodeProps & hooks.AllowedComponentProps & hooks.ComponentCustomProps, Readonly<hooks.ExtractPropTypes<{
    id: StringConstructor;
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    customMode: {
        type: StringConstructor;
        default: () => any;
    };
    resizable: {
        type: (ObjectConstructor | BooleanConstructor)[];
        default: () => {
            storage: boolean;
        };
    };
    refresh: {
        type: (ObjectConstructor | BooleanConstructor)[];
        default: () => any;
    };
    setting: {
        type: (ObjectConstructor | BooleanConstructor)[];
        default: () => any;
    };
    fullScreen: {
        type: BooleanConstructor;
        default: boolean;
    };
    buttons: {
        type: ArrayConstructor;
        default: () => never[];
    };
    size: StringConstructor;
    data: ArrayConstructor;
    customs: ArrayConstructor;
    beforeOpenFullScreen: FunctionConstructor;
    beforeCloseFullScreen: FunctionConstructor;
    resetMethod: FunctionConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    tiny_mode_root: boolean;
    loading: boolean;
    refresh: boolean | Record<string, any>;
    setting: boolean | Record<string, any>;
    resizable: boolean | Record<string, any>;
    buttons: unknown[];
    customMode: string;
    fullScreen: boolean;
}, {}>;
export default _default;
