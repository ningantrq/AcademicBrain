/**
 * MIT License
 *
 * Copyright (c) 2019 Xu Liangzhan
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */
declare const _default: import("@vue/runtime-core").DefineComponent<{
    isBeforePageChange: BooleanConstructor;
    showSaveMsg: {
        type: BooleanConstructor;
        default: boolean;
    };
    isMultipleHistory: BooleanConstructor;
    selectToolbar: (ObjectConstructor | BooleanConstructor)[];
    align: {
        type: StringConstructor;
        default: () => any;
    };
    autoResize: BooleanConstructor;
    border: {
        type: BooleanConstructor;
        default: () => any;
    };
    cellClassName: (StringConstructor | FunctionConstructor)[];
    columnKey: BooleanConstructor;
    columnMinWidth: (StringConstructor | NumberConstructor)[];
    columnWidth: (StringConstructor | NumberConstructor)[];
    contextMenu: ObjectConstructor;
    customs: ArrayConstructor;
    data: (ObjectConstructor | ArrayConstructor)[];
    dropConfig: ObjectConstructor;
    editConfig: (ObjectConstructor | BooleanConstructor)[];
    editRules: ObjectConstructor;
    expandConfig: ObjectConstructor;
    fit: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    footerAlign: {
        type: StringConstructor;
        default: () => any;
    };
    footerCellClassName: (StringConstructor | FunctionConstructor)[];
    footerMethod: FunctionConstructor;
    footerRowClassName: (StringConstructor | FunctionConstructor)[];
    footerSpanMethod: FunctionConstructor;
    headerAlign: {
        type: StringConstructor;
        default: () => any;
    };
    headerCellClassName: (StringConstructor | FunctionConstructor)[];
    headerRowClassName: (StringConstructor | FunctionConstructor)[];
    headerSuffixIconAbsolute: BooleanConstructor;
    height: (StringConstructor | NumberConstructor)[];
    highlightCell: BooleanConstructor;
    highlightCurrentColumn: {
        type: BooleanConstructor;
        default: () => any;
    };
    highlightCurrentRow: {
        type: BooleanConstructor;
        default: () => any;
    };
    highlightHoverColumn: {
        type: BooleanConstructor;
        default: () => any;
    };
    highlightHoverRow: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    isAsyncColumn: BooleanConstructor;
    isCenterEmpty: BooleanConstructor;
    isDragHeaderSorting: BooleanConstructor;
    keyboardConfig: ObjectConstructor;
    loading: BooleanConstructor;
    loadingComponent: ObjectConstructor;
    maxHeight: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    mouseConfig: ObjectConstructor;
    optimization: ObjectConstructor;
    params: ObjectConstructor;
    radioConfig: ObjectConstructor;
    remoteFilter: BooleanConstructor;
    remoteSort: BooleanConstructor;
    renderEmpty: FunctionConstructor;
    renderRowAfter: FunctionConstructor;
    resizable: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    rowClassName: (StringConstructor | FunctionConstructor)[];
    rowGroup: ObjectConstructor;
    rowId: {
        type: StringConstructor;
        default: () => string;
    };
    rowKey: BooleanConstructor;
    rowSpan: ArrayConstructor;
    scrollLoad: ObjectConstructor;
    selectConfig: ObjectConstructor;
    showFooter: BooleanConstructor;
    showHeader: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    showHeaderOverflow: {
        type: (StringConstructor | BooleanConstructor)[];
        default: () => any;
    };
    showOverflow: {
        type: (StringConstructor | BooleanConstructor)[];
        default: () => any;
    };
    size: {
        type: StringConstructor;
        default: () => any;
    };
    sortConfig: ObjectConstructor;
    sortMethod: FunctionConstructor;
    sortable: {
        type: BooleanConstructor;
        default: boolean;
    };
    spanMethod: FunctionConstructor;
    startIndex: {
        type: NumberConstructor;
        default: number;
    };
    stripe: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    stripeSaas: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    borderSaas: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    borderVertical: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    summaryConfig: ObjectConstructor;
    syncResize: BooleanConstructor;
    tableLayout: StringConstructor;
    tooltipConfig: {
        type: ObjectConstructor;
        default: () => {};
    };
    treeConfig: ObjectConstructor;
    validConfig: ObjectConstructor;
    cardConfig: ObjectConstructor;
    viewType: {
        type: StringConstructor;
        default: () => string;
    };
    mfShow: {
        type: StringConstructor;
        default: () => string;
    };
    columnAnchor: ArrayConstructor;
    renderFooter: FunctionConstructor;
    listConfig: ObjectConstructor;
    ganttConfig: ObjectConstructor;
    prefetch: (ArrayConstructor | BooleanConstructor)[];
    intersectionOption: ObjectConstructor;
    columns: ArrayConstructor;
    proxyConfig: ObjectConstructor;
    fetchData: ObjectConstructor;
    saveData: ObjectConstructor;
    deleteData: ObjectConstructor;
    toolbar: ObjectConstructor;
    pager: ObjectConstructor;
    dataset: ObjectConstructor;
    autoLoad: {
        type: BooleanConstructor;
        default: boolean;
    };
    seqSerial: {
        type: BooleanConstructor;
        default: boolean;
    };
    events: ObjectConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, {
    t: (this: any, path: any, options?: any) => any;
    vm: any;
    f: (props: any, attrs?: {}) => {};
    a: (attrs: any, filters: any, include: any) => {};
    d: (props: any) => void;
    dp: (props: any) => void;
    gcls: (key: any) => any;
}, {
    emitter: {
        emit(eventName: any): void;
        on: (event: any, callback: any, once?: boolean) => void;
        once(event: any, callback: any): void;
        off(event: any, callback: any): void;
    };
    fetchOption: null;
    filterData: never[];
    listeners: {};
    pagerConfig: null;
    pendingRecords: never[];
    seqIndex: number;
    sortData: {};
    tableCustoms: never[];
    tableData: never[];
    tableLoading: boolean;
    tablePage: {
        total: number;
        pageSize: number;
        currentPage: number;
    };
    toolBarVm: null;
    columnAnchorParams: {};
    columnAnchorKey: string;
    tasks: {};
}, {
    isMsg(): boolean;
    tableProps(): {};
    proxyOpts(): object;
    vSize(): any;
}, {
    updateParentHeight(): void;
    handleRowClassName(params: any): never[];
    handleActiveMethod(params: any): any;
    sortChangeEvent(params: any): void;
    viewCls(module: any): any;
    addIntersectionObserver(): void;
    removeIntersectionObserver(): void;
    filterChangeEvent(params: any): void;
}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    isBeforePageChange: BooleanConstructor;
    showSaveMsg: {
        type: BooleanConstructor;
        default: boolean;
    };
    isMultipleHistory: BooleanConstructor;
    selectToolbar: (ObjectConstructor | BooleanConstructor)[];
    align: {
        type: StringConstructor;
        default: () => any;
    };
    autoResize: BooleanConstructor;
    border: {
        type: BooleanConstructor;
        default: () => any;
    };
    cellClassName: (StringConstructor | FunctionConstructor)[];
    columnKey: BooleanConstructor;
    columnMinWidth: (StringConstructor | NumberConstructor)[];
    columnWidth: (StringConstructor | NumberConstructor)[];
    contextMenu: ObjectConstructor;
    customs: ArrayConstructor;
    data: (ObjectConstructor | ArrayConstructor)[];
    dropConfig: ObjectConstructor;
    editConfig: (ObjectConstructor | BooleanConstructor)[];
    editRules: ObjectConstructor;
    expandConfig: ObjectConstructor;
    fit: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    footerAlign: {
        type: StringConstructor;
        default: () => any;
    };
    footerCellClassName: (StringConstructor | FunctionConstructor)[];
    footerMethod: FunctionConstructor;
    footerRowClassName: (StringConstructor | FunctionConstructor)[];
    footerSpanMethod: FunctionConstructor;
    headerAlign: {
        type: StringConstructor;
        default: () => any;
    };
    headerCellClassName: (StringConstructor | FunctionConstructor)[];
    headerRowClassName: (StringConstructor | FunctionConstructor)[];
    headerSuffixIconAbsolute: BooleanConstructor;
    height: (StringConstructor | NumberConstructor)[];
    highlightCell: BooleanConstructor;
    highlightCurrentColumn: {
        type: BooleanConstructor;
        default: () => any;
    };
    highlightCurrentRow: {
        type: BooleanConstructor;
        default: () => any;
    };
    highlightHoverColumn: {
        type: BooleanConstructor;
        default: () => any;
    };
    highlightHoverRow: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    isAsyncColumn: BooleanConstructor;
    isCenterEmpty: BooleanConstructor;
    isDragHeaderSorting: BooleanConstructor;
    keyboardConfig: ObjectConstructor;
    loading: BooleanConstructor;
    loadingComponent: ObjectConstructor;
    maxHeight: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    mouseConfig: ObjectConstructor;
    optimization: ObjectConstructor;
    params: ObjectConstructor;
    radioConfig: ObjectConstructor;
    remoteFilter: BooleanConstructor;
    remoteSort: BooleanConstructor;
    renderEmpty: FunctionConstructor;
    renderRowAfter: FunctionConstructor;
    resizable: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    rowClassName: (StringConstructor | FunctionConstructor)[];
    rowGroup: ObjectConstructor;
    rowId: {
        type: StringConstructor;
        default: () => string;
    };
    rowKey: BooleanConstructor;
    rowSpan: ArrayConstructor;
    scrollLoad: ObjectConstructor;
    selectConfig: ObjectConstructor;
    showFooter: BooleanConstructor;
    showHeader: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    showHeaderOverflow: {
        type: (StringConstructor | BooleanConstructor)[];
        default: () => any;
    };
    showOverflow: {
        type: (StringConstructor | BooleanConstructor)[];
        default: () => any;
    };
    size: {
        type: StringConstructor;
        default: () => any;
    };
    sortConfig: ObjectConstructor;
    sortMethod: FunctionConstructor;
    sortable: {
        type: BooleanConstructor;
        default: boolean;
    };
    spanMethod: FunctionConstructor;
    startIndex: {
        type: NumberConstructor;
        default: number;
    };
    stripe: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    stripeSaas: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    borderSaas: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    borderVertical: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    summaryConfig: ObjectConstructor;
    syncResize: BooleanConstructor;
    tableLayout: StringConstructor;
    tooltipConfig: {
        type: ObjectConstructor;
        default: () => {};
    };
    treeConfig: ObjectConstructor;
    validConfig: ObjectConstructor;
    cardConfig: ObjectConstructor;
    viewType: {
        type: StringConstructor;
        default: () => string;
    };
    mfShow: {
        type: StringConstructor;
        default: () => string;
    };
    columnAnchor: ArrayConstructor;
    renderFooter: FunctionConstructor;
    listConfig: ObjectConstructor;
    ganttConfig: ObjectConstructor;
    prefetch: (ArrayConstructor | BooleanConstructor)[];
    intersectionOption: ObjectConstructor;
    columns: ArrayConstructor;
    proxyConfig: ObjectConstructor;
    fetchData: ObjectConstructor;
    saveData: ObjectConstructor;
    deleteData: ObjectConstructor;
    toolbar: ObjectConstructor;
    pager: ObjectConstructor;
    dataset: ObjectConstructor;
    autoLoad: {
        type: BooleanConstructor;
        default: boolean;
    };
    seqSerial: {
        type: BooleanConstructor;
        default: boolean;
    };
    events: ObjectConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    tiny_mode_root: boolean;
    size: string;
    loading: boolean;
    showFooter: boolean;
    showHeader: boolean;
    border: boolean;
    sortable: boolean;
    remoteSort: boolean;
    startIndex: number;
    rowKey: boolean;
    viewType: string;
    mfShow: string;
    highlightCurrentRow: boolean;
    highlightCurrentColumn: boolean;
    columnKey: boolean;
    isDragHeaderSorting: boolean;
    resizable: boolean;
    headerSuffixIconAbsolute: boolean;
    showHeaderOverflow: string | boolean;
    headerAlign: string;
    align: string;
    footerAlign: string;
    showOverflow: string | boolean;
    rowId: string;
    isCenterEmpty: boolean;
    remoteFilter: boolean;
    fit: boolean;
    isAsyncColumn: boolean;
    highlightCell: boolean;
    stripe: boolean;
    highlightHoverRow: boolean;
    highlightHoverColumn: boolean;
    stripeSaas: boolean;
    borderSaas: boolean;
    borderVertical: boolean;
    tooltipConfig: Record<string, any>;
    autoResize: boolean;
    autoLoad: boolean;
    seqSerial: boolean;
    isBeforePageChange: boolean;
    showSaveMsg: boolean;
    isMultipleHistory: boolean;
    syncResize: boolean;
}, {}>;
export default _default;
