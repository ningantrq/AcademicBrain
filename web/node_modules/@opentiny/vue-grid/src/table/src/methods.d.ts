import { handleGlobalMousedownEvent, handleGlobalBlurEvent, handleGlobalMousewheelEvent, handleArrowKeyDown, handleCopyKeyDown, handleCtxMenu, handleDelKeyDown, handleEnterKeyDown, handleEscKeyDown, handleF2KeyDown, handleOtherKeyDown, handleSpaceKeyDown, handleTabKeyDown, handleGlobalKeydownEvent, handleGlobalResizeEvent } from './events';
declare const Methods: {
    getParentElem(): any;
    updateParentHeight(): void;
    getParentHeight(): any;
    clearAll(silent: any): any;
    refreshData(data: any): any;
    refreshStyle(): any;
    updateData(): any;
    handleTableData(force: any): any;
    loadTableData(datas: any, notRefresh: any): any;
    reloadData(datas: any): any;
    loadData(datas: any): Promise<any>;
    reloadRow(row: any, record: any, field: any): any;
    reloadColumn(columns: any): any;
    loadColumn(columns: any): Promise<any>;
    updateCache(source: any): void;
    cacheColumnMap(): void;
    getRowNode(tr: any): any;
    getColumnNode(cell: any): any;
    getRowIndex(row: any): any;
    getColumnIndex(column: any): any;
    hasIndexColumn(column: any): any;
    defineField(row: any, copy: any): any;
    isTemporaryRow(row: any): any;
    createData(records: any, copy: any): Promise<unknown>;
    createRow(records: any): Promise<unknown>;
    clearData(rows: any, field: any): any;
    hasRowInsert(row: any): number;
    hasRowChange(row: any, field: any): boolean;
    getColumns(columnIndex: any): any;
    getColumnById(colid: any): any;
    getColumnByField(field: any): any;
    getTableColumn(): {
        fullColumn: any;
        visibleColumn: any;
        tableColumn: any;
        collectColumn: any;
    };
    getData(rowIndex: any): any;
    getSelectRecords(notCopy: any): any;
    updateAfterFullData(): any;
    buildGroupData(): void;
    getRowById(rowid: any): any;
    getTableData(): {
        visibleData: any;
        footerData: any;
        tableData: any;
        fullData: any;
    };
    handleDefault(): void;
    mergeCustomColumn(customColumns: any, sort: any, colWidth: any): void;
    resetAll(): void;
    hideColumn(tableColumn: any): any;
    showColumn(tableColumn: any): any;
    resetCustoms(): any;
    handleVisibleColumn(tableColumn: any, visible: any): any;
    reloadCustoms(customColumns: any, sort: any, colWidth: any): any;
    watchColumn(value: any): void;
    refreshColumn(): any;
    analyColumnWidth(): void;
    /**
     * 计算单元格列宽，动态分配可用剩余空间
     * 支持（width=?、width=?px、width=?%、min-width=?、min-width=?px、min-width=?%）
     */
    recalculate(): any;
    autoCellWidth(headerEl: any, bodyEl: any, footerEl: any): void;
    syncHeaderHeight(): void;
    resetResizable(): any;
    updateStyle(): any;
    preventEvent(event: any, type: any, args: any, next: any, end: any): void;
    blurOutside({ row, args, column }: {
        row: any;
        args: any;
        column: any;
    }, event: any): any;
    handleGlobalMousedownEvent: typeof handleGlobalMousedownEvent;
    handleGlobalBlurEvent: typeof handleGlobalBlurEvent;
    handleGlobalMousewheelEvent: typeof handleGlobalMousewheelEvent;
    handleEscKeyDown: typeof handleEscKeyDown;
    handleEnterKeyDown: typeof handleEnterKeyDown;
    handleCtxMenu: typeof handleCtxMenu;
    handleArrowKeyDown: typeof handleArrowKeyDown;
    handleDelKeyDown: typeof handleDelKeyDown;
    handleSpaceKeyDown: typeof handleSpaceKeyDown;
    handleTabKeyDown: typeof handleTabKeyDown;
    handleCopyKeyDown: typeof handleCopyKeyDown;
    handleF2KeyDown: typeof handleF2KeyDown;
    handleOtherKeyDown: typeof handleOtherKeyDown;
    handleGlobalKeydownEvent: typeof handleGlobalKeydownEvent;
    handleGlobalResizeEvent: typeof handleGlobalResizeEvent;
    handleRadioDefChecked(): void;
    triggerRadioRowEvent(event: any, params: any): void;
    triggerCurrentRowEvent(event: any, params: any): void;
    setCurrentRow(row: any): any;
    setRadioRow(row: any): any;
    clearCurrentRow(): any;
    clearRadioRow(): any;
    getCurrentRow(): any;
    getRadioRow(): any;
    triggerHeaderCellClickEvent(event: any, params: any): any;
    setCurrentColumn(column: any): any;
    clearCurrentColumn(): any;
    handleChangeCell(event: any, params: any): void;
    triggerCellClickEvent(event: any, params: any): void;
    triggerCellDBLClickEvent(event: any, params: any): void;
    triggerSortEvent(event: any, column: any, order: any): void;
    sort(field: any, order: any): any;
    clearSort(): any;
    toggleGroupExpansion(row: any): void;
    triggerRowExpandEvent(event: any, { row }: {
        row: any;
    }): any;
    toggleRowExpansion(row: any): any;
    handleDefaultRowExpand(): void;
    setAllRowExpansion(expanded: any): any;
    setRowExpansion(rows: any, expanded: any): any;
    hasRowExpand(row: any): number;
    clearRowExpand(): any;
    getVirtualScroller(): {
        scrollX: any;
        scrollY: any;
        scrollLeft: any;
        scrollTop: any;
    };
    triggerScrollXEvent(event: any): void;
    debounceScrollX(event: any): void;
    loadScrollXData(): void;
    triggerScrollYEvent(event: any): void;
    debounceScrollY(event: any): void;
    debounceScrollLoad(event: any): void;
    loadScrollYData(event: any): void;
    getRowHeight(): any;
    computeScrollLoad(): any;
    updateScrollXData(): void;
    updateScrollXSpace(): void;
    updateScrollYData(): void;
    updateScrollYSpace(): void;
    updateScrollLoadBar(event: any): void;
    scrollTo(scrollLeft: any, scrollTop: any): any;
    scrollToRow(row: any, column: any, isDelay: any, move: any): any;
    scrollToTreeRow(row: any): any;
    scrollToColumn(column: any, isDelay: any, move: any): any;
    resetScrollTop(): void;
    clearScroll(): any;
    updateFooter(): any;
    updateStatus(scope: any, cellValue: any, renderOpts: any): any;
    updateScrollStatus(): void;
    getAsyncColumnUniqueKey(property: any, row: any): string;
    getAsyncColumnName(property: any): string;
    collectAsyncColumn(tableData: any): never[];
    handleAsyncColumn(tableData: any): void;
    handleResolveColumn(tableData: any, fetchColumns: any): void;
    connect({ toolbar }: {
        toolbar: any;
    }): void;
    getEventTargetNode: (event: any, container: any, queryCls: any) => {
        flag: boolean;
        container: any;
        targetElem: any;
    } | {
        flag: boolean;
        container?: undefined;
        targetElem?: undefined;
    };
    handleVisibilityChange(visible: any, entry: any): void;
    updateTableBodyHeight(): void;
    toggleColumnOrder(column: any): "asc" | "desc" | null;
};
export default Methods;
