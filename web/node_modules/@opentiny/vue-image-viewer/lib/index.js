function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  MODE: {
    CONTAIN: {
      name: "contain",
      icon: "icon-fullscreen"
    },
    ORIGINAL: {
      name: "original",
      icon: "icon-minscreen"
    }
  },
  DEFAULT_POPPER_ZINDEX: Number.POSITIVE_INFINITY,
  THUMBNAILTOP: 8,
  MENUTOP: 10
};
var ImageViewer = defineComponent({
  name: $prefix + "ImageViewer",
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    urlList: {
      type: Array,
      default: function _default2() {
        return [];
      }
    },
    zIndex: {
      type: Number,
      default: $constants.DEFAULT_POPPER_ZINDEX
    },
    previewVisible: {
      type: Boolean,
      default: false
    },
    closeShow: {
      type: Boolean,
      default: false
    },
    arrowShow: {
      type: Boolean,
      default: false
    },
    toolShow: {
      type: Boolean,
      default: false
    },
    showIndex: {
      type: Boolean,
      default: false
    },
    imageFullCurrent: {
      type: Boolean,
      default: false
    },
    startPosition: {
      type: Number,
      default: 0
    },
    asyncClose: {
      type: Boolean,
      default: false
    },
    deleteButton: {
      type: Boolean,
      default: false
    },
    onSwitch: {
      type: Function,
      default: function _default3() {
      }
    },
    onClose: {
      type: Function,
      default: function _default4() {
      }
    },
    isThumbnail: {
      type: Boolean,
      default: false
    },
    isMenuView: {
      type: Boolean,
      default: false
    },
    modalView: {
      type: Boolean,
      default: false
    },
    modalHeight: {
      type: [String, Number],
      default: 400
    },
    bgColor: {
      type: String,
      default: "bg-color-icon-primary"
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
ImageViewer.install = function(Vue) {
  Vue.component(ImageViewer.name, ImageViewer);
};
ImageViewer.version = version;
export {
  ImageViewer as default
};
