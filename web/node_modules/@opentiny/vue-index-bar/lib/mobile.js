import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/index-bar/vue";
import "@opentiny/vue-theme-mobile/index-bar/index.css";
import { openBlock, createElementBlock, createElementVNode, renderSlot, Fragment, renderList, normalizeClass, toDisplayString } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  emits: ["select", "change"],
  props: [].concat(props, ["indexList"]),
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  ref: "indexBarContent"
};
var _hoisted_2 = ["id", "onClick"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock(
    "div",
    {
      class: "tiny-mobile-index-bar",
      onScroll: _cache[6] || (_cache[6] = function() {
        return _ctx.handleScroll && _ctx.handleScroll.apply(_ctx, arguments);
      })
    },
    [createElementVNode(
      "div",
      _hoisted_1,
      [renderSlot(_ctx.$slots, "default")],
      512
      /* NEED_PATCH */
    ), createElementVNode(
      "div",
      {
        ref: "indexSide",
        class: "tiny-mobile-index-bar__side",
        onMousedown: _cache[0] || (_cache[0] = function() {
          return _ctx.handleTouchDown && _ctx.handleTouchDown.apply(_ctx, arguments);
        }),
        onMousemove: _cache[1] || (_cache[1] = function() {
          return _ctx.handleTouchMove && _ctx.handleTouchMove.apply(_ctx, arguments);
        }),
        onMouseup: _cache[2] || (_cache[2] = function() {
          return _ctx.handleTouchUp && _ctx.handleTouchUp.apply(_ctx, arguments);
        }),
        onTouchstart: _cache[3] || (_cache[3] = function() {
          return _ctx.handleTouchDown && _ctx.handleTouchDown.apply(_ctx, arguments);
        }),
        onTouchmove: _cache[4] || (_cache[4] = function() {
          return _ctx.handleTouchMove && _ctx.handleTouchMove.apply(_ctx, arguments);
        }),
        onTouchend: _cache[5] || (_cache[5] = function() {
          return _ctx.handleTouchUp && _ctx.handleTouchUp.apply(_ctx, arguments);
        })
      },
      [(openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.indexList, function(label, index) {
          return openBlock(), createElementBlock("span", {
            key: label,
            id: index,
            class: normalizeClass(["tiny-mobile-index-bar__label", _ctx.state.index === index ? "tiny-mobile-index-bar__label--active" : null]),
            onClick: function onClick($event) {
              return _ctx.handleIndexClick({
                index,
                label
              });
            }
          }, toDisplayString(label), 11, _hoisted_2);
        }),
        128
        /* KEYED_FRAGMENT */
      ))],
      544
      /* NEED_HYDRATION, NEED_PATCH */
    )],
    32
    /* NEED_HYDRATION */
  );
}
var mobile = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  mobile as default
};
