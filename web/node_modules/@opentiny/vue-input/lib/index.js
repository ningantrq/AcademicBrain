function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  INPUT_PC: "tiny-input__",
  INPUTGROUP_PC: "tiny-input-group__",
  INPUT_MOBILE: "tiny-mobile-input__",
  INPUTGROUP_MOBILE: "tiny-mobile-input-group__",
  Mode: "pc",
  inputMode: function inputMode(mode) {
    return mode === this.Mode ? this.INPUT_PC : this.INPUT_MOBILE;
  },
  inputGroupMode: function inputGroupMode(mode) {
    return mode === this.Mode ? this.INPUTGROUP_PC : this.INPUTGROUP_MOBILE;
  },
  VALIDATE_ICON: {
    Validating: "tiny-icon-loading",
    Success: "tiny-icon-circle-check",
    Error: "tiny-icon-circle-close"
  },
  COMPONENT_NAME: {
    FormItem: "FormItem"
  },
  MASKSYMBOL: "******"
};
var inputProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  name: String,
  size: String,
  form: String,
  label: String,
  height: Number,
  resize: String,
  tabindex: {
    type: String,
    default: "1"
  },
  disabled: Boolean,
  readonly: Boolean,
  hoverExpand: Boolean,
  mask: Boolean,
  suffixIcon: [Object, String],
  prefixIcon: [Object, String],
  modelValue: [String, Number],
  type: {
    type: String,
    default: "text"
  },
  memorySpace: {
    type: Number,
    default: 5
  },
  vertical: {
    type: Boolean,
    default: false
  },
  selectMenu: {
    type: Array,
    default: function _default2() {
      return [];
    }
  },
  ellipsis: {
    type: Boolean,
    default: false
  },
  contentStyle: {
    type: Object,
    default: function _default3() {
      return {};
    }
  },
  isSelect: {
    type: Boolean,
    default: false
  },
  tips: String,
  counter: {
    type: Boolean,
    default: false
  },
  autosize: {
    type: [Boolean, Object],
    default: false
  },
  clearable: {
    type: Boolean,
    default: false
  },
  autocomplete: {
    type: String,
    default: "off"
  },
  showPassword: {
    type: Boolean,
    default: false
  },
  showWordLimit: {
    type: Boolean,
    default: false
  },
  showTitle: {
    type: Boolean,
    default: false
  },
  validateEvent: {
    type: Boolean,
    default: true
  },
  // mobile特有属性
  textareaTitle: {
    type: String,
    default: ""
  },
  displayOnly: {
    type: Boolean,
    default: false
  },
  displayOnlyContent: {
    type: String,
    default: ""
  },
  customClass: {
    type: String,
    default: ""
  },
  frontClearIcon: {
    type: Boolean,
    default: false
  },
  showEmptyValue: {
    type: Boolean,
    default: false
  },
  textAlign: {
    type: String,
    default: "left"
  },
  width: {
    type: [String, Number]
  }
});
var Input = defineComponent({
  name: $prefix + "Input",
  inheritAttrs: false,
  props: inputProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
Input.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Input.install = function(Vue) {
  Vue.component(Input.name, Input);
};
Input.version = version;
export {
  Input as default
};
