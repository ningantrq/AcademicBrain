import { renderless, api } from "@opentiny/vue-renderless/link-menu/vue";
import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import { iconSetting } from "@opentiny/vue-icon";
import Tree from "@opentiny/vue-tree";
import Input from "@opentiny/vue-input";
import Button from "@opentiny/vue-button";
import DialogBox from "@opentiny/vue-dialog-box";
import { resolveComponent, openBlock, createElementBlock, createElementVNode, Fragment, renderList, renderSlot, createBlock, resolveDynamicComponent, toDisplayString, createVNode, withCtx, createTextVNode, normalizeClass } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  props: [].concat(props, ["data", "maxItem", "icon", "props", "title", "defaultExpandAll", "searchIcon", "ellipsis", "wrap", "getMenuDataSync", "keepSelectedNodes"]),
  components: {
    TinyTree: Tree,
    TinyInput: Input,
    TinyButton: Button,
    TinyDialogBox: DialogBox,
    IconSetting: iconSetting()
  },
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-link-menu"
};
var _hoisted_2 = {
  class: "tiny-link-menu__nav"
};
var _hoisted_3 = ["href"];
var _hoisted_4 = {
  class: "tiny-link-menu__filert"
};
var _hoisted_5 = {
  class: "tree-node"
};
var _hoisted_6 = {
  class: "tree-menus-link"
};
var _hoisted_7 = ["title", "href"];
var _hoisted_8 = {
  class: "tree-node-name"
};
var _hoisted_9 = {
  class: "tiny-link-menu__dialog-btn"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_icon_setting = resolveComponent("icon-setting");
  var _component_tiny_input = resolveComponent("tiny-input");
  var _component_tiny_tree = resolveComponent("tiny-tree");
  var _component_tiny_button = resolveComponent("tiny-button");
  var _component_tiny_dialog_box = resolveComponent("tiny-dialog-box");
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode("div", _hoisted_2, [(openBlock(true), createElementBlock(
    Fragment,
    null,
    renderList(_ctx.state.listItem, function(item, index) {
      return openBlock(), createElementBlock("a", {
        class: "tiny-link-menu__nav-item",
        href: item.url,
        key: index
      }, [renderSlot(_ctx.$slots, "navicon", {
        slotScope: item.icon
      }, function() {
        return [(openBlock(), createBlock(resolveDynamicComponent(item.icon)))];
      }), createElementVNode(
        "span",
        null,
        toDisplayString(item.label),
        1
        /* TEXT */
      )], 8, _hoisted_3);
    }),
    128
    /* KEYED_FRAGMENT */
  )), createElementVNode("button", {
    type: "button",
    class: "tiny-link-menu__btn",
    onClick: _cache[0] || (_cache[0] = function() {
      return _ctx.showDialog && _ctx.showDialog.apply(_ctx, arguments);
    })
  }, [createVNode(_component_icon_setting)])]), createVNode(_component_tiny_dialog_box, {
    visible: _ctx.state.boxVisibility,
    "onUpdate:visible": _cache[2] || (_cache[2] = function($event) {
      return _ctx.state.boxVisibility = $event;
    }),
    title: _ctx.state.titles,
    width: "30%",
    "close-on-click-modal": false
  }, {
    footer: withCtx(function() {
      return [createElementVNode("div", _hoisted_9, [renderSlot(_ctx.$slots, "foot", {}, function() {
        return [createVNode(_component_tiny_button, {
          type: "primary",
          disabled: _ctx.state.disabled,
          "reset-time": 0,
          onClick: _ctx.sureNodevalue
        }, {
          default: withCtx(function() {
            return [createTextVNode(
              toDisplayString(_ctx.t("ui.linkMenu.sure")),
              1
              /* TEXT */
            )];
          }),
          _: 1
          /* STABLE */
        }, 8, ["disabled", "onClick"]), createVNode(_component_tiny_button, {
          disabled: _ctx.state.disabled,
          "reset-time": 0,
          onClick: _ctx.hideDialog
        }, {
          default: withCtx(function() {
            return [createTextVNode(
              toDisplayString(_ctx.t("ui.linkMenu.cancel")),
              1
              /* TEXT */
            )];
          }),
          _: 1
          /* STABLE */
        }, 8, ["disabled", "onClick"])];
      })])];
    }),
    default: withCtx(function() {
      return [createElementVNode("div", _hoisted_4, [createVNode(_component_tiny_input, {
        placeholder: _ctx.t("ui.linkMenu.placeholder"),
        modelValue: _ctx.state.filterText,
        "onUpdate:modelValue": _cache[1] || (_cache[1] = function($event) {
          return _ctx.state.filterText = $event;
        }),
        "suffix-icon": _ctx.searchIcon
      }, null, 8, ["placeholder", "modelValue", "suffix-icon"])]), createVNode(_component_tiny_tree, {
        data: _ctx.state.datas,
        icon: _ctx.icon,
        class: normalizeClass({
          "tiny-link-menu__wrap": _ctx.wrap,
          "tiny-link-menu__overflow": !_ctx.wrap ? _ctx.ellipsis : false
        }),
        "default-expand-all": _ctx.defaultExpandAll,
        "show-checkbox": "",
        "node-key": "id",
        "filter-node-method": _ctx.filterNode,
        onCheck: _ctx.getValue,
        ref: "tree"
      }, {
        default: withCtx(function(_ref) {
          var data = _ref.data;
          return [createElementVNode("div", _hoisted_5, [createElementVNode("div", _hoisted_6, [createElementVNode("a", {
            class: "tree-node-body",
            title: data.label,
            href: data.disabled ? void 0 : data.url || void 0
          }, [renderSlot(_ctx.$slots, "nodeicon", {
            slotScope: data.icon
          }, function() {
            return [(openBlock(), createBlock(resolveDynamicComponent(data.icon)))];
          }), createElementVNode("span", _hoisted_8, [renderSlot(_ctx.$slots, "node", {
            label: data.label
          }, function() {
            return [createTextVNode(
              toDisplayString(data.label),
              1
              /* TEXT */
            )];
          })])], 8, _hoisted_7)])])];
        }),
        _: 3
        /* FORWARDED */
      }, 8, ["data", "icon", "class", "default-expand-all", "filter-node-method", "onCheck"])];
    }),
    _: 3
    /* FORWARDED */
  }, 8, ["visible", "title"])]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
