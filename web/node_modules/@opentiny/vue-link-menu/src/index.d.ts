declare const _default: import("@vue/runtime-core").DefineComponent<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            DIALOG_TITLE: string;
        };
    };
    icon: ObjectConstructor;
    searchIcon: {
        type: ObjectConstructor;
        default: () => import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    data: {
        type: ArrayConstructor;
    };
    maxItem: {
        type: NumberConstructor;
        validator: (value: number) => boolean;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    defaultExpandAll: {
        type: BooleanConstructor;
        default: boolean;
    };
    ellipsis: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrap: {
        type: BooleanConstructor;
        default: boolean;
    };
    props: {
        default: () => {
            children: string;
            disabled: string;
            label: string;
        };
    };
    getMenuDataSync: FunctionConstructor;
    keepSelectedNodes: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            DIALOG_TITLE: string;
        };
    };
    icon: ObjectConstructor;
    searchIcon: {
        type: ObjectConstructor;
        default: () => import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    data: {
        type: ArrayConstructor;
    };
    maxItem: {
        type: NumberConstructor;
        validator: (value: number) => boolean;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    defaultExpandAll: {
        type: BooleanConstructor;
        default: boolean;
    };
    ellipsis: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrap: {
        type: BooleanConstructor;
        default: boolean;
    };
    props: {
        default: () => {
            children: string;
            disabled: string;
            label: string;
        };
    };
    getMenuDataSync: FunctionConstructor;
    keepSelectedNodes: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    ellipsis: boolean;
    title: string;
    props: {
        children: string;
        disabled: string;
        label: string;
    };
    tiny_mode_root: boolean;
    _constants: Record<string, any>;
    wrap: boolean;
    defaultExpandAll: boolean;
    searchIcon: Record<string, any>;
    keepSelectedNodes: boolean;
}, {}>;
export default _default;
