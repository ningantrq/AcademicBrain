function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $props, setup as _setup } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/loading/vue";
import { openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, createElementBlock, resolveDynamicComponent, toDisplayString, createCommentVNode, vShow } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var classes = {
  "loading-default": "m-0 top-0 right-0 left-0 bottom-0 block transition bg-color-bg-1 duration-1000",
  "loading-fullscreen": "fixed opacity-80",
  "loading-unfullscreen": "absolute",
  "loading-content": "absolute -translate-y-2/4  w-full  top-1/2 text-center  flex justify-center items-center",
  "loading-size-mini": "flex-row",
  "loading-size-unmini": "flex-col",
  "loading-unspinner": "animate-[spin_1.5s_linear_infinite] fill-current",
  "loading-unspinner-size-default": "h-10 w-10 stroke-2",
  "loading-unspinner-size-large": "h-24 w-24 stroke-2",
  "loading-unspinner-size-medium": "h-10 w-10 stroke-2",
  "loading-unspinner-size-small": "h-6 w-6 stroke-1",
  "loading-unspinner-size-mini": "h-3.5 w-3.5 stroke-1",
  "loading-unspinner-svg-circle": "stroke-color-brand tiny-loading-path",
  "loading-spinner": "text-sm fill-color-brand leading-none animate-[spin_2s_linear_infinite]",
  "loading-spinner-text": "tiny-tailwind-text block text-color-brand  text-xs leading-6",
  "loading-spinner-size-mini": "my-0 ml-2",
  "loading-spinner-size-unmini": "mb-1 mt-2.5"
};
var _sfc_main = defineComponent({
  name: $prefix + "Loading",
  emits: ["after-leave"],
  props: _extends({}, $props, {
    _constants: Object
  }),
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      classes
    });
  }
});
function _sfc_render(_ctx, _cache, $props2, $setup, $data, $options) {
  return openBlock(), createBlock(Transition, {
    name: "tiny-loading-fade",
    onAfterLeave: _ctx.handleAfterLeave,
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        {
          "data-tag": "tiny-loading",
          class: normalizeClass(_ctx.m(_ctx.state.customClass, _ctx.gcls("loading-default"), _ctx.gcls({
            "loading-fullscreen": _ctx.state.fullscreen
          }), _ctx.gcls({
            "loading-unfullscreen": !_ctx.state.fullscreen
          }))),
          style: normalizeStyle("background-color:" + _ctx.state.background)
        },
        [createElementVNode(
          "div",
          {
            "data-tag": "tiny-loading-body",
            class: normalizeClass(_ctx.m(_ctx.gcls("loading-content"), _ctx.gcls({
              "loading-size-mini": _ctx.state.size === "mini"
            }), _ctx.gcls({
              "loading-size-unmini": _ctx.state.size !== "mini"
            })))
          },
          [!_ctx.state.spinner ? (openBlock(), createElementBlock(
            "svg",
            {
              key: 0,
              "data-tag": "tiny-loading-icon",
              class: normalizeClass(_ctx.m(_ctx.gcls("loading-unspinner"), _ctx.gcls({
                "loading-unspinner-size-default": !_ctx.state.size || !["large", "medium", "small", "mini"].includes(_ctx.state.size)
              }), _ctx.gcls({
                "loading-unspinner-size-large": _ctx.state.size === "large"
              }), _ctx.gcls({
                "loading-unspinner-size-medium": _ctx.state.size === "medium"
              }), _ctx.gcls({
                "loading-unspinner-size-small": _ctx.state.size === "small"
              }), _ctx.gcls({
                "loading-unspinner-size-mini": _ctx.state.size === "mini"
              }))),
              viewBox: "25 25 50 50"
            },
            [createElementVNode(
              "circle",
              {
                class: normalizeClass(_ctx.m(_ctx.gcls("loading-unspinner-svg-circle"))),
                cx: "50",
                cy: "50",
                r: "24",
                fill: "none"
              },
              null,
              2
              /* CLASS */
            )],
            2
            /* CLASS */
          )) : (openBlock(), createBlock(resolveDynamicComponent(_ctx.state.spinner), {
            key: 1,
            "data-tag": "tiny-loading-spinner",
            class: normalizeClass(_ctx.m(_ctx.gcls("loading-spinner")))
          }, null, 8, ["class"])), _ctx.state.text ? (openBlock(), createElementBlock(
            "span",
            {
              key: 2,
              "data-tag": "tiny-loading-text",
              class: normalizeClass(_ctx.m(_ctx.gcls("loading-spinner-text"), _ctx.gcls({
                "loading-spinner-size-mini": _ctx.state.size === "mini"
              }), _ctx.gcls({
                "loading-spinner-size-unmini": _ctx.state.size !== "mini"
              })))
            },
            toDisplayString(_ctx.state.text),
            3
            /* TEXT, CLASS */
          )) : createCommentVNode("v-if", true)],
          2
          /* CLASS */
        )],
        6
        /* CLASS, STYLE */
      ), [[vShow, _ctx.state.visible]])];
    }),
    _: 1
    /* STABLE */
  }, 8, ["onAfterLeave"]);
}
var mobileFirst = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  mobileFirst as default
};
