function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, props, setup as _setup } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/mask/vue";
import "@opentiny/vue-theme-mobile/mask/index.css";
import { openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeStyle, renderSlot, vShow } from "vue";
var _sfc_main = defineComponent({
  name: $prefix + "Mask",
  props: _extends({}, props, {
    visible: {
      type: Boolean,
      default: false
    },
    zIndex: {
      type: Number,
      default: 99
    },
    cancelTouch: {
      type: Boolean,
      default: false
    }
  }),
  emits: ["update:visible", "click"],
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _export_sfc = function _export_sfc2(sfc, props2) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props2), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(Transition, {
    name: "mask-fade",
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        {
          class: "tiny-mobile-mask",
          style: normalizeStyle(_ctx.state.calcStyle),
          onMousedown: _cache[0] || (_cache[0] = function() {
            return _ctx.handleTouch && _ctx.handleTouch.apply(_ctx, arguments);
          }),
          onTouchmove: _cache[1] || (_cache[1] = function() {
            return _ctx.handleTouch && _ctx.handleTouch.apply(_ctx, arguments);
          }),
          onTouchstart: _cache[2] || (_cache[2] = function() {
            return _ctx.handleTouch && _ctx.handleTouch.apply(_ctx, arguments);
          })
        },
        [renderSlot(_ctx.$slots, "default")],
        36
        /* STYLE, NEED_HYDRATION */
      ), [[vShow, _ctx.visible]])];
    }),
    _: 3
    /* FORWARDED */
  });
}
var Mask = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.3.11";
Mask.install = function(Vue) {
  Vue.component(Mask.name, Mask);
};
Mask.version = version;
export {
  Mask as default
};
