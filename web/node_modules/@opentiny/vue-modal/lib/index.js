function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $setup, $props, setupComponent, createComponent } from "@opentiny/vue-common";
import { MsgQueue } from "@opentiny/vue-renderless/modal";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
import Popconfirm from "@opentiny/vue-popconfirm";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  MODAL_STATUS: {
    INFO: "info",
    SUCCESS: "success",
    WARNING: "warning",
    ERROR: "error",
    LOADING: "loading"
  },
  NODAL_TYPE: {
    ALERT: "alert",
    CONFIRM: "confirm",
    MESSAGE: "message"
  },
  STATUS_MAPPING_CLASSS: {
    INFO: "tiny-modal-svg__info",
    SUCCESS: "tiny-modal-svg__success",
    WARNING: "tiny-modal-svg__warning",
    ERROR: "tiny-modal-svg__error",
    LOADING: "tiny-modal-svg__refresh roll"
  }
};
var modalProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  animat: {
    type: Boolean,
    default: function _default2() {
      return true;
    }
  },
  beforeClose: Function,
  duration: {
    type: [Number, String],
    default: function _default3() {
      return 3e3;
    }
  },
  escClosable: Boolean,
  events: Object,
  fullscreen: Boolean,
  height: [Number, String],
  id: String,
  isFormReset: {
    type: Boolean,
    default: true
  },
  lockScroll: Boolean,
  lockView: {
    type: Boolean,
    default: function _default4() {
      return true;
    }
  },
  marginSize: {
    type: [Number, String],
    default: 10
  },
  mask: {
    type: Boolean,
    default: function _default5() {
      return true;
    }
  },
  maskClosable: Boolean,
  message: [String, Function],
  minHeight: {
    type: [Number, String],
    default: function _default6() {
      return 200;
    }
  },
  minWidth: {
    type: [Number, String],
    default: function _default7() {
      return 340;
    }
  },
  modelValue: Boolean,
  resize: Boolean,
  showFooter: Boolean,
  showHeader: {
    type: Boolean,
    default: true
  },
  status: {
    type: [String, Object],
    default: ""
  },
  title: String,
  top: {
    type: [Number, String],
    default: 80
  },
  type: {
    type: String,
    default: "alert"
  },
  vSize: String,
  width: [Number, String],
  zIndex: [Number, String],
  description: String,
  options: Array,
  showClose: {
    type: Boolean,
    default: true
  },
  confirmContent: String,
  cancelContent: String,
  position: {
    type: String,
    default: "",
    validator: function validator(val) {
      return ["", "bottom-right"].includes(val);
    }
  },
  customClass: String,
  confirmBtnProps: {
    type: Object,
    default: function _default8() {
      return {};
    }
  },
  cancelBtnProps: {
    type: Object,
    default: function _default9() {
      return {};
    }
  }
});
var TINYModal = defineComponent({
  name: $prefix + "Modal",
  componentName: "Modal",
  props: modalProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.1";
TINYModal.version = version;
TINYModal.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
function Modal(options) {
  var modalPromise = new Promise(function(resolve) {
    if (options && options.id && MsgQueue.some(function(comp) {
      return comp.id === options.id;
    })) {
      resolve("exist");
    } else {
      var events = options.events || {};
      var $modal;
      options.events = _extends({}, events, {
        hide: function hide(params) {
          events.hide && events.hide.call(this, params);
          if ($modal.beforeUnmouted) {
            $modal.beforeUnmouted();
          }
          resolve(params.type);
        },
        confirm: function confirm2(params) {
          events.confirm && events.confirm.call(this, params);
        },
        show: function show(params) {
          events.show && events.show.call(this, params);
        }
      });
      $modal = createComponent({
        el: document.createElement("div"),
        propsData: Object.assign({
          "tiny_mode": TINYModal.tiny_mode,
          "tiny_theme": TINYModal.tiny_theme
        }, options),
        component: options.componentType === "popconfirm" ? Popconfirm : TINYModal
      });
      var open = $modal[options.componentType === "popconfirm" ? "show" : "open"];
      if (open) {
        open();
      }
      setTimeout(function() {
        return modalPromise.vm = $modal;
      }, 0);
    }
  });
  return modalPromise;
}
var modal = Modal;
var types = ["alert", "confirm", "message", "popconfirm"];
var defOpts = {
  alert: {
    showFooter: true,
    type: "alert"
  },
  confirm: {
    showFooter: true,
    status: "question",
    type: "confirm"
  },
  message: {
    mask: false,
    lockView: false,
    showHeader: false,
    showClose: false,
    type: "message"
  },
  popconfirm: {}
};
types.forEach(function(type) {
  TINYModal[type] = Modal[type] = function(message2, title, options) {
    var opts;
    if (typeof message2 === "object" && message2 !== null) {
      opts = message2;
    } else if (title) {
      opts = {
        title
      };
    }
    if (message2 === void 0 || message2 === null) {
      message2 = "";
    }
    return modal(_extends({
      message: message2.toString()
    }, defOpts[type], opts, options, {
      componentType: type
    }));
  };
});
var alert = Modal.alert;
var message = Modal.message;
var confirm = Modal.confirm;
var popconfirm = Modal.popconfirm;
TINYModal.installed = false;
setupComponent.TINYModal = {
  install: function install(Vue) {
    var _process$env2;
    if (TINYModal.installed)
      return;
    var isVue2 = !!Vue.component;
    var tinyMode = isVue2 ? Vue.prototype.tiny_mode : Vue.config.globalProperties.tiny_mode;
    var tinyTheme = isVue2 ? Vue.prototype.tiny_theme : Vue.config.globalProperties.tiny_theme;
    var specifyPc = typeof process === "object" ? (_process$env2 = process.env) == null ? void 0 : _process$env2.TINY_MODE : null;
    TINYModal.tiny_mode = specifyPc || tinyMode && tinyMode.value;
    TINYModal.tiny_theme = tinyTheme && tinyTheme.value;
    TINYModal.installed = true;
  },
  init: function init(root) {
    var prefix = root.$TinyModalApiPrefix || "$";
    root[prefix + "alert"] = Modal.alert;
    root[prefix + "message"] = Modal.message;
    root[prefix + "confirm"] = Modal.confirm;
    root[prefix + "popconfirm"] = Modal.popconfirm;
  }
};
TINYModal.install = function(Vue) {
  Vue.component(TINYModal.name, TINYModal);
};
export {
  Modal,
  alert,
  confirm,
  TINYModal as default,
  message,
  popconfirm
};
