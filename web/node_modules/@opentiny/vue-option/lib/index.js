import { renderless, api } from "@opentiny/vue-renderless/option/vue";
import { defineComponent, $prefix, setup as _setup } from "@opentiny/vue-common";
import Checkbox from "@opentiny/vue-checkbox";
import { resolveComponent, withDirectives, openBlock, createElementBlock, withModifiers, normalizeClass, createVNode, createCommentVNode, createBlock, resolveDynamicComponent, renderSlot, createElementVNode, toDisplayString, vShow } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

import "@opentiny/vue-theme/option/index.css";
var _sfc_main = defineComponent({
  name: $prefix + "Option",
  componentName: "Option",
  components: {
    TinyCheckbox: Checkbox
  },
  props: {
    value: {
      required: true
    },
    label: [String, Number],
    created: Boolean,
    disabled: {
      type: Boolean,
      default: false
    },
    events: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    visible: {
      type: Boolean,
      default: true
    },
    highlightClass: String,
    required: {
      type: Boolean,
      default: false
    },
    icon: Object
  },
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _hoisted_1 = {
  key: 0,
  class: "tiny-option__checkbox-wrap"
};
var _hoisted_2 = {
  class: "tiny-option__label"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_checkbox = resolveComponent("tiny-checkbox");
  return withDirectives((openBlock(), createElementBlock(
    "li",
    {
      ref: "option",
      onMouseenter: _cache[0] || (_cache[0] = function() {
        return _ctx.hoverItem && _ctx.hoverItem.apply(_ctx, arguments);
      }),
      onClick: _cache[1] || (_cache[1] = withModifiers(function() {
        return _ctx.selectOptionClick && _ctx.selectOptionClick.apply(_ctx, arguments);
      }, ["stop"])),
      onMousedown: _cache[2] || (_cache[2] = withModifiers(function() {
      }, ["stop"])),
      class: normalizeClass(["tiny-option tiny-select-dropdown__item", [{
        selected: _ctx.state.itemSelected,
        "is-disabled": _ctx.disabled || _ctx.state.groupDisabled || _ctx.state.limitReached,
        hover: _ctx.state.hover,
        "is-required": _ctx.required
      }, _ctx.highlightClass]])
    },
    [_ctx.state.select.multiple ? (openBlock(), createElementBlock("span", _hoisted_1, [createVNode(_component_tiny_checkbox, {
      "model-value": _ctx.state.itemSelected,
      disabled: _ctx.disabled || _ctx.state.groupDisabled || _ctx.state.limitReached
    }, null, 8, ["model-value", "disabled"])])) : createCommentVNode("v-if", true), _ctx.icon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon), {
      key: 1,
      class: "tiny-option__icon"
    })) : createCommentVNode("v-if", true), renderSlot(_ctx.$slots, "default", {}, function() {
      return [createElementVNode(
        "span",
        _hoisted_2,
        toDisplayString(_ctx.state.currentLabel),
        1
        /* TEXT */
      )];
    })],
    34
    /* CLASS, NEED_HYDRATION */
  )), [[vShow, _ctx.visible && _ctx.state.visible]]);
}
var Option = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.13.0";
Option.install = function(Vue) {
  Vue.component(Option.name, Option);
};
Option.version = version;
export {
  Option as default
};
