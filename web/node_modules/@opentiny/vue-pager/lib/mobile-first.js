function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { createVNode, resolveComponent } from "vue";
import PagerItem from "@opentiny/vue-pager-item";
import Popover from "@opentiny/vue-popover";
import { t } from "@opentiny/vue-locale";
import { defineComponent, $props, h } from "@opentiny/vue-common";
import { IconChevronLeft, IconChevronRight, IconChevronDown } from "@opentiny/vue-icon";
import { emitEvent } from "@opentiny/vue-renderless/common/event";
var _sfc_main = /* @__PURE__ */ defineComponent({
  props: _extends({}, $props, {
    accurateJumper: {
      type: Boolean,
      default: function _default() {
        return true;
      }
    },
    appendToBody: {
      type: Boolean,
      default: function _default2() {
        return true;
      }
    },
    currentPage: {
      type: Number,
      default: function _default3() {
        return 1;
      }
    },
    disabled: {
      type: Boolean,
      default: function _default4() {
        return false;
      }
    },
    hideOnSinglePage: Boolean,
    isBeforePageChange: Boolean,
    layout: String,
    mode: String,
    nextText: String,
    pageCount: Number,
    pageSize: {
      type: Number,
      default: function _default5() {
        return 10;
      }
    },
    pageSizes: {
      type: Array,
      default: function _default6() {
        return [10, 20, 30, 40, 50, 100];
      }
    },
    pagerCount: {
      type: Number,
      validator: function validator(value) {
        return (value | 0) === value && value > 2 && value < 22 && value % 2 === 1;
      },
      default: function _default7() {
        return 7;
      }
    },
    popperAppendToBody: {
      type: Boolean,
      default: function _default8() {
        return true;
      }
    },
    popperClass: String,
    prevText: String,
    total: Number
  }),
  data: function data() {
    return {
      internalCurrentPage: 1,
      internalPageSize: 0,
      lastEmittedPage: -1,
      userChangePageSize: false,
      internalTotal: this.total
    };
  },
  render: function render() {
    var layout = this.internalLayout;
    if (!layout)
      return null;
    if (this.hideOnSinglePage && (!this.internalPageCount || this.internalPageCount === 1))
      return null;
    var TEMPLATE_MAP = {
      prev: createVNode(resolveComponent("prev"), null, null),
      jumper: createVNode(resolveComponent("jumper"), {
        "ref": "jumper",
        "isBeforePageChange": this.isBeforePageChange,
        "onBeforePageChange": this.beforeJumperChangeHandler,
        "max": this.internalPageCount
      }, null),
      pager: createVNode(resolveComponent("pager"), {
        "isBeforePageChange": this.isBeforePageChange,
        "onBeforePageChange": this.beforePagerChangeHandler,
        "currentPage": this.internalCurrentPage,
        "pageCount": this.internalPageCount,
        "pagerCount": this.pagerCount,
        "onChange": this.handleCurrentChange,
        "disabled": this.disabled
      }, null),
      next: createVNode(resolveComponent("next"), null, null),
      sizes: createVNode(resolveComponent("sizes"), {
        "ref": "sizes",
        "isBeforePageChange": this.isBeforePageChange,
        "onBeforePageChange": this.beforeSizeChangeHandler,
        "popperAppendToBody": this.popperAppendToBody === false ? false : this.appendToBody,
        "popperClass": this.popperClass,
        "pageSizes": this.pageSizes
      }, null),
      slot: createVNode("slot", null, [typeof this.$slots.default === "function" ? this.$slots.default() : this.$slots.default]),
      total: createVNode(resolveComponent("total"), null, null)
    };
    var components = layout.split(",").map(function(item) {
      return item.trim();
    });
    var haveRightWrapper = false;
    var templateChildren = [];
    var rightWrapperChildren = [];
    components.forEach(function(compo) {
      if (compo === "->") {
        haveRightWrapper = true;
        return;
      }
      if (!haveRightWrapper) {
        templateChildren.push(TEMPLATE_MAP[compo]);
      } else {
        rightWrapperChildren.push(TEMPLATE_MAP[compo]);
      }
    });
    var rightWrapper = createVNode("div", null, [rightWrapperChildren]);
    if (haveRightWrapper) {
      templateChildren.unshift(rightWrapper);
    }
    return createVNode("div", {
      "class": ["text-right py-3 px-0 text-color-text-primary"]
    }, [templateChildren]);
  },
  components: {
    Prev: {
      render: function render2() {
        var ChevronLeft = IconChevronLeft();
        return createVNode("button", {
          "type": "button",
          "class": ["group min-w-[1.75rem] h-7 text-xs py-0 px-1 text-color-text-primary bg-color-bg-1 border border-solid border-color-border rounded-sm outline-0 ml-2", "align-bottom cursor-pointer hover:border-color-icon-primary disabled:bg-color-bg-4 disabled:border-color-border disabled:cursor-default disabled:opacity-50"],
          "disabled": this.$parent.disabled || this.$parent.internalCurrentPage <= 1,
          "onClick": this.$parent.prev
        }, [this.$parent.prevText ? createVNode("span", {
          "class": "text-color-brand"
        }, [this.$parent.prevText]) : createVNode(ChevronLeft, {
          "class": "group-disabled:fill-color-icon-disabled group-hover:fill-color-icon-primary"
        }, null)]);
      }
    },
    Next: {
      render: function render3() {
        var ChevronRight = IconChevronRight();
        return createVNode("button", {
          "type": "button",
          "class": ["group min-w-[1.75rem] h-7 text-xs py-0 px-1 text-color-text-primary bg-color-bg-1 border border-solid border-color-border rounded-sm outline-0 ml-2", "align-bottom cursor-pointer hover:border-color-icon-primary disabled:bg-color-bg-4 disabled:border-color-border disabled:cursor-default disabled:opacity-50"],
          "disabled": this.$parent.disabled || this.$parent.internalCurrentPage === this.$parent.internalPageCount || this.$parent.internalPageCount === 0,
          "onClick": this.$parent.next
        }, [this.$parent.nextText ? createVNode("span", {
          "class": "text-color-brand"
        }, [this.$parent.nextText]) : createVNode(ChevronRight, {
          "class": "group-disabled:fill-color-icon-disabled group-hover:fill-color-icon-primary"
        }, null)]);
      }
    },
    Sizes: {
      props: {
        pageSizes: Array,
        appendToBody: Boolean,
        isBeforePageChange: Boolean,
        popperClass: String,
        popperAppendToBody: {
          type: Boolean,
          default: true
        }
      },
      data: function data2() {
        return {
          showSizes: false
        };
      },
      watch: {
        pageSizes: {
          immediate: true,
          handler: function handler(newVal) {
            if (Array.isArray(newVal)) {
              this.$parent.internalPageSize = newVal.includes(this.$parent.pageSize) ? this.$parent.pageSize : this.pageSizes[0];
            }
          }
        }
      },
      render: function render4() {
        var _this = this;
        var ChevronDown = IconChevronDown();
        var scopedSlots = {
          reference: function reference() {
            return createVNode("div", {
              "data-tag": "tiny-pager-reference",
              "slot": "reference",
              "class": "my-0 mr-0 ml-4"
            }, [createVNode("div", {
              "class": ["min-w-[6.125rem] max-w-[12.5rem] h-7 cursor-pointer leading-7 border border-solid border-color-border text-left text-color-text-primary", "rounded-sm bg-color-bg-1 text-xs pl-3 pr-1 py-0 align-middle relative top-px whitespace-nowrap transition-[border] duration-300 box-border select-none", "hover:border-color-border-hover", _this.showSizes ? "border-color-brand-hover hover:border-color-brand-hover" : ""]
            }, [createVNode("span", {
              "class": "mr-[0.375rem]"
            }, [_this.$parent.internalPageSize]), createVNode("span", null, [t("ui.page.page")]), createVNode("span", {
              "class": "w-7 h-7 leading-7 float-right box-border text-center overflow-hidden"
            }, [createVNode(ChevronDown, {
              "class": ["align-text-bottom transition-transform duration-300", _this.showSizes ? "fill-color-brand-hover rotate-180" : "rotate-0"]
            }, null)])])]);
          },
          default: function _default9() {
            return createVNode("div", {
              "data-tag": "tiny-pager-size",
              "class": "max-h-[18.75rem] overflow-y-auto overflow-x-hidden mx-[-1rem] my-[-0.75rem]"
            }, [_this.pageSizes.map(function(item) {
              return createVNode("p", {
                "class": ["min-h-7 px-2 py-0 leading-7 max-w-full overflow-hidden text-ellipsis whitespace-nowrap hover:cursor-pointer hover:bg-color-bg-4", item === _this.$parent.internalPageSize ? "text-color-brand" : ""],
                "val": item,
                "title": item,
                "onClick": function onClick() {
                  return _this.handleChange(item);
                }
              }, [item]);
            })]);
          }
        };
        return createVNode("div", {
          "data-tag": "tiny-pager-popover",
          "class": ["inline-block align-middle text-xs h-7", "text-xs text-color-text-primary relative -top-px"]
        }, [h(Popover, {
          props: {
            placement: "bottom-start",
            appendToBody: this.popperAppendToBody,
            trigger: "click",
            popperClass: "w-[6.125rem] p-0" + (this.popperClass ? " " + this.popperClass : ""),
            visibleArrow: false
          },
          on: {
            show: function show() {
              _this.showSizes = true;
            },
            hide: function hide() {
              _this.showSizes = false;
            }
          },
          scopedSlots,
          ref: "sizesList"
        })]);
      },
      methods: {
        handleChange: function handleChange(val) {
          var _this2 = this;
          if (val !== this.$parent.internalPageSize) {
            var callback = function callback2() {
              if (!_this2.$parent.beforeChangeHandler()) {
                return false;
              }
              _this2.$parent.internalPageSize = val = parseInt(val, 10);
              _this2.$parent.userChangePageSize = true;
              _this2.showSizes = false;
              _this2.$parent.$emit("update:pageSize", val);
              _this2.$parent.$emit("size-change", val);
              _this2.$parent.$emit("page-change", {
                currentPage: _this2.$parent.internalCurrentPage,
                pageSize: val,
                total: _this2.$parent.internalTotal
              });
              _this2.$refs.sizesList.state.showPopper = false;
            };
            if (this.isBeforePageChange) {
              var newPageSize = val;
              var currentPageSize = this.$parent.internalPageSize;
              var params = {
                newPageSize,
                currentPageSize,
                callback
              };
              this.$parent.beforeSizeChangeHandler(params);
            } else {
              callback();
            }
          }
        }
      }
    },
    Jumper: {
      props: {
        isBeforePageChange: Boolean,
        disabled: Boolean,
        min: {
          type: Number,
          default: 1
        },
        max: {
          type: Number,
          default: 10
        },
        initValue: {
          type: Number,
          default: 1
        }
      },
      data: function data3() {
        return {
          backupValue: this.initValue,
          value: this.initValue
        };
      },
      watch: {
        "$parent.internalCurrentPage": function $parentInternalCurrentPage(currentPage) {
          var value = currentPage;
          if (this.value !== value) {
            this.value = value;
          }
        }
      },
      methods: {
        handleFocus: function handleFocus(e) {
          this.backupValue = Number(e.target.value);
        },
        handleInput: function handleInput(e) {
          if (!e.target.value) {
            this.value = "";
          } else if (/^\d+$/.test(e.target.value)) {
            this.value = Number(e.target.value) || 1;
          }
          e.target.value = this.value;
        },
        handleChange: function handleChange2() {
          var _this3 = this;
          this.parseValueNumber();
          var callback = function callback2() {
            _this3.handleClick();
          };
          var rollback = function rollback2() {
            _this3.value = _this3.backupValue;
          };
          var newPage = this.value;
          var currentPage = this.backupValue;
          if (this.isBeforePageChange && newPage !== currentPage) {
            var params = {
              newPage,
              currentPage,
              callback,
              rollback
            };
            this.$parent.beforePagerChangeHandler(params);
          } else {
            callback();
          }
        },
        handleClick: function handleClick() {
          if (!this.$parent.canJumperGo())
            return;
          this.$parent.internalCurrentPage = this.$parent.getValidCurrentPage(this.value);
          this.$parent.emitChange();
        },
        isValueNumber: function isValueNumber() {
          return !isNaN(Number(this.value));
        },
        parseValueNumber: function parseValueNumber() {
          var value = Number(String(this.value).split(/[^0-9-+.]/).join(""));
          if (isNaN(value)) {
            value = this.min;
          }
          value = Number(value.toFixed(0));
          var min = this.min;
          var max = this.max;
          if (value >= max) {
            this.value = max;
          } else if (value <= min) {
            this.value = min;
          } else {
            this.value = value;
          }
        }
      },
      render: function render5() {
        return h("div", {
          class: "h-7 leading-7 inline-block align-middle text-xs"
        }, [h("div", {
          class: "text-[0]"
        }, [h("span", {
          class: ["text-xs pl-4 pr-2 text-color-text-primary"]
        }, [t("ui.page.jump")]), h("input", {
          class: ["w-8 h-7 leading-[1.625rem] text-center align-top rounded-sm inline-block border border-solid border-color-border", "text-color-text-primary text-xs transition-[border] duration-300 outline-0 box-border mr-0 hover:text-color-icon-primary hover:border-color-icon-primary"],
          domProps: {
            value: this.value
          },
          attrs: {
            type: "text",
            disabled: this.disabled
          },
          on: {
            focus: this.handleFocus,
            input: this.handleInput,
            change: this.handleChange
          },
          ref: "input"
        })])]);
      }
    },
    Total: {
      render: function render6() {
        return typeof this.$parent.internalTotal === "number" ? createVNode("div", {
          "data-tag": "tiny-pager",
          "class": ["inline-block align-middle text-xs h-7", this.$parent.mode === "simple" ? "" : "text-color-text-primary text-xs float-left"]
        }, [" ", createVNode("div", {
          "class": "h-7 leading-7 text-xs text-color-text-primary"
        }, [createVNode("span", {
          "class": "mr-1"
        }, [t("ui.page.totals")]), createVNode("span", null, [this.$parent.internalTotal])])]) : "";
      }
    },
    Pager: PagerItem
  },
  methods: {
    canJumperGo: function canJumperGo() {
      var inputValue = Number(this.$refs.jumper.$refs.input.value || 0);
      var currentPage = Number(this.internalCurrentPage || 0);
      return this.accurateJumper ? inputValue !== currentPage : true;
    },
    beforeSizeChangeHandler: function beforeSizeChangeHandler(params) {
      var newPageSize = params.newPageSize, currentPageSize = params.currentPageSize, callback = params.callback;
      var newPage = 1;
      var currentPage = this.internalCurrentPage;
      var temp = {
        newPage,
        newPageSize,
        currentPage,
        currentPageSize,
        callback
      };
      this.$emit("before-page-change", temp);
    },
    beforePagerChangeHandler: function beforePagerChangeHandler(params) {
      var newPage = params.newPage, currentPage = params.currentPage, callback = params.callback;
      var newPageSize = this.internalPageSize;
      var currentPageSize = this.internalPageSize;
      var temp = {
        newPage,
        newPageSize,
        currentPage,
        currentPageSize,
        callback
      };
      this.$emit("before-page-change", temp);
    },
    beforeJumperChangeHandler: function beforeJumperChangeHandler(params) {
      var newPage = params.newPage, currentPage = params.currentPage, callback = params.callback, rollback = params.rollback;
      var newPageSize = this.internalPageSize;
      var currentPageSize = this.internalPageSize;
      var temp = {
        newPage,
        newPageSize,
        currentPage,
        currentPageSize,
        callback,
        rollback
      };
      this.$emit("before-page-change", temp);
    },
    copyEmit: function copyEmit() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      this.$emit.apply(this, args);
    },
    beforeChangeHandler: function beforeChangeHandler(val) {
      if (val === void 0) {
        val = -1;
      }
      return emitEvent(this.copyEmit, "before-change", this.internalCurrentPage, this, val);
    },
    handleCurrentChange: function handleCurrentChange(val) {
      if (!this.beforeChangeHandler(val)) {
        return false;
      }
      this.internalCurrentPage = this.getValidCurrentPage(val);
      this.userChangePageSize = true;
      this.emitChange();
    },
    prev: function prev() {
      var _this4 = this;
      var callback = function callback2() {
        if (_this4.disabled || !_this4.beforeChangeHandler(_this4.internalCurrentPage - 1)) {
          return false;
        }
        var newVal = _this4.internalCurrentPage - 1;
        _this4.internalCurrentPage = _this4.getValidCurrentPage(newVal);
        _this4.$emit("prev-click", _this4.internalCurrentPage);
        _this4.emitChange();
      };
      if (this.isBeforePageChange) {
        var newPage = this.internalCurrentPage - 1;
        var temp = this.buildBeforePageChangeParam({
          newPage,
          callback
        });
        this.$emit("before-page-change", temp);
      } else {
        callback();
      }
    },
    next: function next() {
      var _this5 = this;
      var callback = function callback2() {
        if (_this5.disabled || !_this5.beforeChangeHandler(_this5.internalCurrentPage + 1)) {
          return false;
        }
        var newVal = _this5.internalCurrentPage + 1;
        _this5.internalCurrentPage = _this5.getValidCurrentPage(newVal);
        _this5.$emit("next-click", _this5.internalCurrentPage);
        _this5.emitChange();
      };
      if (this.isBeforePageChange) {
        var newPage = this.internalCurrentPage + 1;
        var temp = this.buildBeforePageChangeParam({
          newPage,
          callback
        });
        this.$emit("before-page-change", temp);
      } else {
        callback();
      }
    },
    buildBeforePageChangeParam: function buildBeforePageChangeParam(param) {
      var currentPage = this.internalCurrentPage;
      var newPageSize = this.internalPageSize;
      var currentPageSize = this.internalPageSize;
      return Object.assign({
        currentPage,
        newPageSize,
        currentPageSize
      }, param);
    },
    getValidCurrentPage: function getValidCurrentPage(val) {
      val = parseInt(val, 10);
      var hasPageCount = typeof this.internalPageCount === "number";
      var resetVal;
      if (!hasPageCount) {
        if (isNaN(val) || val < 1) {
          resetVal = 1;
        }
      } else {
        if (val < 1) {
          resetVal = 1;
        } else if (val > this.internalPageCount) {
          resetVal = this.internalPageCount;
        }
      }
      if (resetVal === void 0 && isNaN(val)) {
        resetVal = 1;
      } else if (resetVal === 0) {
        resetVal = 1;
      }
      return resetVal === void 0 ? val : resetVal;
    },
    emitChange: function emitChange() {
      var _this6 = this;
      this.$nextTick(function() {
        if (_this6.internalCurrentPage !== _this6.lastEmittedPage || _this6.userChangePageSize) {
          _this6.$emit("current-change", _this6.internalCurrentPage);
          _this6.$emit("update:current-page", _this6.internalCurrentPage);
          _this6.$emit("page-change", {
            currentPage: _this6.internalCurrentPage,
            pageSize: _this6.internalPageSize,
            total: _this6.internalTotal
          });
          _this6.lastEmittedPage = _this6.internalCurrentPage;
          _this6.userChangePageSize = false;
        }
      });
    },
    setTotal: function setTotal(val) {
      this.internalTotal = val;
    }
  },
  computed: {
    internalPageCount: function internalPageCount() {
      if (typeof this.internalTotal === "number") {
        return Math.max(1, Math.ceil(this.internalTotal / this.internalPageSize));
      } else if (typeof this.pageCount === "number") {
        return Math.max(1, this.pageCount);
      }
      return null;
    },
    internalLayout: function internalLayout() {
      var layout = "";
      if (this.mode && !this.layout) {
        this.mode === "number" && (layout = "sizes, prev, pager, next, jumper, total");
        this.mode === "simple" && (layout = "total, sizes, prev, next");
        this.mode === "complete" && (layout = "sizes, prev, pager, next, jumper,total");
        this.mode === "fixed" && (layout = "prev, pager, next");
      } else if (!this.mode && this.layout || this.mode && this.layout) {
        layout = this.layout;
      } else {
        layout = "prev, pager, next, jumper, total";
      }
      return layout;
    }
  },
  watch: {
    currentPage: {
      handler: function handler2(curPage) {
        this.internalCurrentPage = this.getValidCurrentPage(curPage);
      },
      immediate: true
    },
    internalPageCount: function internalPageCount2(pageCount) {
      var oldCurPage = this.internalCurrentPage;
      if (pageCount > 0 && oldCurPage === 0) {
        this.internalCurrentPage = 1;
      } else if (oldCurPage > pageCount) {
        this.internalCurrentPage = pageCount === 0 ? 1 : pageCount;
        this.userChangePageSize && this.emitChange();
      }
      this.userChangePageSize = false;
    },
    internalCurrentPage: {
      handler: function handler3(curPage) {
        this.$emit("update:currentPage", curPage);
        this.lastEmittedPage = -1;
      },
      immediate: true
    },
    pageSize: {
      handler: function handler4(pageSize) {
        this.internalPageSize = isNaN(pageSize) ? 10 : pageSize;
      },
      immediate: true
    },
    total: function total(_total) {
      this.internalTotal = _total;
    }
  }
});
export {
  _sfc_main as default
};
