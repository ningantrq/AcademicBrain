declare const _default: import("@vue/runtime-core").DefineComponent<{
    accurateJumper: {
        type: BooleanConstructor;
        default: () => true;
    };
    appendToBody: {
        type: BooleanConstructor;
        default: () => true;
    };
    currentPage: {
        type: NumberConstructor;
        default: () => 1;
    };
    disabled: {
        type: BooleanConstructor;
        default: () => false;
    };
    hideOnSinglePage: BooleanConstructor;
    isBeforePageChange: BooleanConstructor;
    layout: StringConstructor;
    mode: StringConstructor;
    nextText: StringConstructor;
    pageCount: NumberConstructor;
    pageSize: {
        type: NumberConstructor;
        default: () => 10;
    };
    pageSizes: {
        type: ArrayConstructor;
        default: () => number[];
    };
    pagerCount: {
        type: NumberConstructor;
        validator: (value: unknown) => boolean;
        default: () => 7;
    };
    popperAppendToBody: {
        type: BooleanConstructor;
        default: () => true;
    };
    popperClass: StringConstructor;
    prevText: StringConstructor;
    total: NumberConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, unknown, {
    internalCurrentPage: number;
    internalPageSize: number;
    lastEmittedPage: number;
    userChangePageSize: boolean;
    internalTotal: number | undefined;
}, {
    internalPageCount(): number | null;
    internalLayout(): string;
}, {
    canJumperGo(): boolean;
    beforeSizeChangeHandler(params: any): void;
    beforePagerChangeHandler(params: any): void;
    beforeJumperChangeHandler(params: any): void;
    copyEmit(...args: any[]): void;
    beforeChangeHandler(val?: number): boolean;
    handleCurrentChange(val: any): false | undefined;
    prev(): void;
    next(): void;
    buildBeforePageChangeParam(param: any): any;
    getValidCurrentPage(val: any): any;
    emitChange(): void;
    setTotal(val: any): void;
}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accurateJumper: {
        type: BooleanConstructor;
        default: () => true;
    };
    appendToBody: {
        type: BooleanConstructor;
        default: () => true;
    };
    currentPage: {
        type: NumberConstructor;
        default: () => 1;
    };
    disabled: {
        type: BooleanConstructor;
        default: () => false;
    };
    hideOnSinglePage: BooleanConstructor;
    isBeforePageChange: BooleanConstructor;
    layout: StringConstructor;
    mode: StringConstructor;
    nextText: StringConstructor;
    pageCount: NumberConstructor;
    pageSize: {
        type: NumberConstructor;
        default: () => 10;
    };
    pageSizes: {
        type: ArrayConstructor;
        default: () => number[];
    };
    pagerCount: {
        type: NumberConstructor;
        validator: (value: unknown) => boolean;
        default: () => 7;
    };
    popperAppendToBody: {
        type: BooleanConstructor;
        default: () => true;
    };
    popperClass: StringConstructor;
    prevText: StringConstructor;
    total: NumberConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    disabled: boolean;
    tiny_mode_root: boolean;
    popperAppendToBody: boolean;
    appendToBody: boolean;
    accurateJumper: boolean;
    currentPage: number;
    hideOnSinglePage: boolean;
    isBeforePageChange: boolean;
    pageSize: number;
    pageSizes: unknown[];
    pagerCount: number;
}, {}>;
export default _default;
