import { renderless, api } from "@opentiny/vue-renderless/picker-column/vue";
import { defineComponent, $prefix, setup as _setup } from "@opentiny/vue-common";
import { openBlock, createElementBlock, createElementVNode, normalizeStyle, Fragment, renderList, normalizeClass, withModifiers, toDisplayString } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

import "@opentiny/vue-theme-mobile/picker-column/index.css";
var _sfc_main = defineComponent({
  name: $prefix + "PickerColumn",
  emits: ["change"],
  props: {
    columnsItem: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    defaultIndex: Number,
    itemHeight: Number,
    visibleItemCount: Number,
    swipeDuration: Number,
    valueKey: String
  },
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _hoisted_1 = {
  class: "tiny-mobile-picker-column"
};
var _hoisted_2 = ["onClick"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode(
    "div",
    {
      class: "tiny-mobile-picker-column__mask",
      style: normalizeStyle(_ctx.state.maskStyle)
    },
    null,
    4
    /* STYLE */
  ), createElementVNode(
    "div",
    {
      class: "tiny-mobile-picker-column__indicator",
      style: normalizeStyle({
        height: _ctx.itemHeight + "px"
      })
    },
    null,
    4
    /* STYLE */
  ), createElementVNode(
    "ul",
    {
      class: "tiny-mobile-picker-column__wrapper",
      ref: "track",
      style: normalizeStyle(_ctx.state.wrapperStyle),
      onClick: _cache[1] || (_cache[1] = function($event) {
        return _ctx.onClickItem(1);
      })
    },
    [(openBlock(true), createElementBlock(
      Fragment,
      null,
      renderList(_ctx.state.columnsItem.values, function(item, index) {
        return openBlock(), createElementBlock("li", {
          class: normalizeClass({
            "tiny-mobile-picker-column__item": true,
            "is-select": index === _ctx.state.currentIndex
          }),
          key: index,
          onClick: withModifiers(function($event) {
            return _ctx.onClickItem(index);
          }, ["stop"]),
          style: normalizeStyle({
            height: _ctx.itemHeight + "px",
            lineHeight: _ctx.itemHeight + "px"
          }),
          onTransitionend: _cache[0] || (_cache[0] = function() {
            return _ctx.onTransitionEnd && _ctx.onTransitionEnd.apply(_ctx, arguments);
          })
        }, toDisplayString(item), 47, _hoisted_2);
      }),
      128
      /* KEYED_FRAGMENT */
    ))],
    4
    /* STYLE */
  )]);
}
var PickerColumn = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.13.0";
PickerColumn.install = function(Vue) {
  Vue.component(PickerColumn.name, PickerColumn);
};
PickerColumn.version = version;
export {
  PickerColumn as default
};
