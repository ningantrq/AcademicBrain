declare const _default: import("@vue/runtime-core").DefineComponent<{
    type: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: StringConstructor;
        default: string;
    };
    timeArrowControl: BooleanConstructor;
    timeEditable: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: StringConstructor;
    format: StringConstructor;
    valueFormat: StringConstructor;
    timeFormat: StringConstructor;
    readonly: BooleanConstructor;
    placeholder: StringConstructor;
    startPlaceholder: StringConstructor;
    endPlaceholder: StringConstructor;
    prefixIcon: ObjectConstructor;
    suffixIcon: ObjectConstructor;
    label: StringConstructor;
    shape: StringConstructor;
    tip: StringConstructor;
    clearIcon: {
        type: ObjectConstructor;
        default(): import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    name: {
        default: string;
        validator(value: any): boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: BooleanConstructor;
    id: {
        default: string;
        validator(value: any): boolean;
    };
    popperClass: StringConstructor;
    popperAppendToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    align: {
        type: StringConstructor;
        default: string;
    };
    editable: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {};
    defaultValue: {};
    defaultTime: {};
    rangeSeparator: {
        type: (ObjectConstructor | StringConstructor)[];
        default: string;
    };
    unlinkPanels: BooleanConstructor;
    pickerOptions: {};
    validateEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    isRange: BooleanConstructor;
    arrowControl: BooleanConstructor;
    timezoneData: {};
    showTimezone: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultTimezone: StringConstructor;
    isutc8: {
        type: BooleanConstructor;
        default: boolean;
    };
    dbTimezone: NumberConstructor;
    timezone: NumberConstructor;
    iso8601: BooleanConstructor;
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    step: {
        type: ObjectConstructor;
        default(): {
            hour: number;
            minute: number;
            second: number;
        };
    };
    showWeekNumber: {
        type: BooleanConstructor;
        default: boolean;
    };
    formatWeeks: FunctionConstructor;
}, {
    t: (this: any, path: any, options?: any) => any;
    vm: any;
    f: (props: any, attrs?: {}) => {};
    a: (attrs: any, filters: any, include: any) => {};
    d: (props: any) => void;
    dp: (props: any) => void;
    gcls: (key: any) => any;
}, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, ("update:modelValue" | "change" | "blur" | "focus" | "created" | "select-change")[], "update:modelValue" | "change" | "blur" | "focus" | "created" | "select-change", import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    type: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: StringConstructor;
        default: string;
    };
    timeArrowControl: BooleanConstructor;
    timeEditable: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: StringConstructor;
    format: StringConstructor;
    valueFormat: StringConstructor;
    timeFormat: StringConstructor;
    readonly: BooleanConstructor;
    placeholder: StringConstructor;
    startPlaceholder: StringConstructor;
    endPlaceholder: StringConstructor;
    prefixIcon: ObjectConstructor;
    suffixIcon: ObjectConstructor;
    label: StringConstructor;
    shape: StringConstructor;
    tip: StringConstructor;
    clearIcon: {
        type: ObjectConstructor;
        default(): import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    name: {
        default: string;
        validator(value: any): boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: BooleanConstructor;
    id: {
        default: string;
        validator(value: any): boolean;
    };
    popperClass: StringConstructor;
    popperAppendToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    align: {
        type: StringConstructor;
        default: string;
    };
    editable: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {};
    defaultValue: {};
    defaultTime: {};
    rangeSeparator: {
        type: (ObjectConstructor | StringConstructor)[];
        default: string;
    };
    unlinkPanels: BooleanConstructor;
    pickerOptions: {};
    validateEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    isRange: BooleanConstructor;
    arrowControl: BooleanConstructor;
    timezoneData: {};
    showTimezone: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultTimezone: StringConstructor;
    isutc8: {
        type: BooleanConstructor;
        default: boolean;
    };
    dbTimezone: NumberConstructor;
    timezone: NumberConstructor;
    iso8601: BooleanConstructor;
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    step: {
        type: ObjectConstructor;
        default(): {
            hour: number;
            minute: number;
            second: number;
        };
    };
    showWeekNumber: {
        type: BooleanConstructor;
        default: boolean;
    };
    formatWeeks: FunctionConstructor;
}>> & {
    onFocus?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onCreated?: ((...args: any[]) => any) | undefined;
    "onSelect-change"?: ((...args: any[]) => any) | undefined;
}, {
    type: string;
    name: string;
    disabled: boolean;
    tabindex: string;
    popperAppendToBody: boolean;
    align: string;
    id: string;
    readonly: boolean;
    clearable: boolean;
    validateEvent: boolean;
    displayOnly: boolean;
    editable: boolean;
    timeArrowControl: boolean;
    timeEditable: boolean;
    clearIcon: Record<string, any>;
    rangeSeparator: string | Record<string, any>;
    unlinkPanels: boolean;
    isRange: boolean;
    arrowControl: boolean;
    showTimezone: boolean;
    step: Record<string, any>;
    showWeekNumber: boolean;
    iso8601: boolean;
    isutc8: boolean;
}, {}>;
export default _default;
