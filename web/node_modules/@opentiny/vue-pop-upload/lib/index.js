function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import "@opentiny/vue-theme/pop-upload/index.css";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return PcTemplate;
};
var $constants = {
  KB: "KB",
  FILE_NAME: "ui.popupload.fileName",
  FILE_SIZE: "ui.popupload.fileSize",
  FILE_STATUS: "ui.popupload.fileStatus",
  DIALOG_TITLE: "ui.popupload.dialogTitle",
  UPLOAD_ERROR: "ui.popupload.uploadError",
  ERROR_NUM_TIPS: "ui.popupload.errorNumTips",
  UPLOAD_SUCCESS: "ui.popupload.uploadSuccess",
  TIPS_TITLE_TEXT: "ui.popupload.tipsFileText",
  ERROR_TYPE_TIPS: "ui.popupload.errorTypeTips",
  ERROR_SIZE_TIPS: "ui.popupload.errorSizeTips",
  SAVE_BUTTON_TEXT: "ui.popupload.saveButtonText",
  UPLOAD_BUTTON_TEXT: "ui.popupload.uploadButtonText",
  CANCEL_BUTTTON_TEXT: "ui.popupload.cancelButtonText",
  UPLOADS_BUTTON_TEXT: "ui.popupload.uploadsButtonText",
  LIMIT_UPLOAD_FILE_TYPE: "ui.popupload.limitUploadFileType",
  LIMIT_UPLOAD_FILE_SIZE: "ui.popupload.limitUploadFileSize",
  LIMIT_UPLOAD_FILE_NUMBER: "ui.popupload.limitUploadFileNumber"
};
var PopUpload = defineComponent({
  name: $prefix + "PopUpload",
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    size: String,
    data: Object,
    uploadName: String,
    dialogTitle: {
      type: String,
      default: ""
    },
    action: {
      type: String,
      default: ""
    },
    uploadButtonText: {
      type: String,
      default: ""
    },
    headers: {
      type: Object,
      default: function _default2() {
        return {};
      }
    },
    withCredentials: {
      type: Boolean,
      default: false
    },
    limit: Number,
    multiple: Boolean,
    disabled: {
      type: Boolean,
      default: false
    },
    accept: String,
    submitButtonText: {
      typee: String,
      default: ""
    },
    cancelButtonText: {
      typee: String,
      default: ""
    },
    uploadFileType: Array,
    beforeUpload: Function,
    beforeRemove: Function,
    maxUploadFileSize: Number,
    httpRequest: Function
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
PopUpload.install = function(Vue) {
  Vue.component(PopUpload.name, PopUpload);
};
PopUpload.version = version;
export {
  PopUpload as default
};
