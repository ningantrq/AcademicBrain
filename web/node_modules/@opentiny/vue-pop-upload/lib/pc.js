import Alert from "@opentiny/vue-alert";
import Button from "@opentiny/vue-button";
import Modal from "@opentiny/vue-modal";
import { iconDel } from "@opentiny/vue-icon";
import FileUpload from "@opentiny/vue-file-upload";
import { renderless, api } from "@opentiny/vue-renderless/pop-upload/vue";
import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import { resolveComponent, openBlock, createElementBlock, createVNode, withCtx, createTextVNode, toDisplayString, createElementVNode, createBlock, Fragment, renderList, createCommentVNode } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  components: {
    TinyButton: Button,
    TinyModal: Modal,
    TinyAlert: Alert,
    TinyFileUpload: FileUpload,
    IconDel: iconDel()
  },
  props: [].concat(props, ["data", "uploadName", "httpRequest", "beforeUpload", "beforeRemove", "size", "dialogTitle", "uploadButtonText", "withCredentials", "submitButtonText", "cancelButtonText", "uploadFileType", "maxUploadFileSize", "accept", "disabled", "multiple", "limit", "headers", "action", "fileList"]),
  emits: ["remove", "progress", "error", "exceed", "success"],
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-popupload"
};
var _hoisted_2 = {
  class: "tiny-popupload__dialog"
};
var _hoisted_3 = {
  class: "tiny-popupload__dialog-header"
};
var _hoisted_4 = {
  class: "tiny-popupload__dialog-tips"
};
var _hoisted_5 = {
  class: "tiny-popupload__dialog-tips"
};
var _hoisted_6 = {
  class: "tiny-popupload__dialog-tips"
};
var _hoisted_7 = {
  class: "tiny-popupload__dialog-body"
};
var _hoisted_8 = {
  class: "tiny-popupload__dialog-table"
};
var _hoisted_9 = {
  class: "tiny-popupload__dialog-table-header"
};
var _hoisted_10 = {
  class: "header-col col1"
};
var _hoisted_11 = {
  class: "header-col col2"
};
var _hoisted_12 = {
  class: "header-col col3"
};
var _hoisted_13 = {
  class: "tiny-popupload__dialog-table-body"
};
var _hoisted_14 = {
  class: "tiny-popupload__dialog-table-list"
};
var _hoisted_15 = {
  class: "body-col col1"
};
var _hoisted_16 = {
  class: "body-col col2"
};
var _hoisted_17 = {
  class: "body-col col3"
};
var _hoisted_18 = {
  class: "tiny-popupload__dialog-footer"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_button = resolveComponent("tiny-button");
  var _component_tiny_alert = resolveComponent("tiny-alert");
  var _component_tiny_file_upload = resolveComponent("tiny-file-upload");
  var _component_IconDel = resolveComponent("IconDel");
  var _component_tiny_modal = resolveComponent("tiny-modal");
  return openBlock(), createElementBlock("div", _hoisted_1, [createVNode(_component_tiny_button, {
    size: _ctx.size,
    onClick: _ctx.showDialog,
    disabled: _ctx.state.disabled
  }, {
    default: withCtx(function() {
      return [createTextVNode(
        toDisplayString(_ctx.state.uploadButtonText),
        1
        /* TEXT */
      )];
    }),
    _: 1
    /* STABLE */
  }, 8, ["size", "onClick", "disabled"]), createVNode(_component_tiny_modal, {
    class: "tiny-popupload__modal",
    modelValue: _ctx.state.isShowDialog,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = function($event) {
      return _ctx.state.isShowDialog = $event;
    }),
    title: _ctx.state.dialogTitle,
    width: "648",
    onClose: _ctx.closeDialog
  }, {
    default: withCtx(function() {
      return [createElementVNode("div", _hoisted_2, [createElementVNode("div", _hoisted_3, [_ctx.state.tipsTitle[0] != void 0 || _ctx.state.tipsTitle[1] != void 0 || _ctx.state.tipsTitle[2] != void 0 ? (openBlock(), createBlock(_component_tiny_alert, {
        key: 0,
        type: "info",
        size: "large",
        title: _ctx.state.tipsTitleText
      }, {
        default: withCtx(function() {
          return [createElementVNode("div", _hoisted_4, [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.state.tipsTitle.filter(function(value) {
              return value != void 0;
            }), function(item, index) {
              return openBlock(), createElementBlock(
                "p",
                {
                  key: index
                },
                toDisplayString(item.count != void 0 ? _ctx.state.limitCountTips + ":" + item.count : "") + " " + toDisplayString(item.type != void 0 ? _ctx.state.limitTypeTips + ":" + item.type : "") + " " + toDisplayString(item.size != void 0 ? _ctx.state.limitSizeTips + ":" + item.size : ""),
                1
                /* TEXT */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))])];
        }),
        _: 1
        /* STABLE */
      }, 8, ["title"])) : createCommentVNode("v-if", true), _ctx.state.errorTips.length > 0 ? (openBlock(), createBlock(_component_tiny_alert, {
        key: 1,
        type: "error",
        size: "large",
        onClose: _ctx.closeErrorTips
      }, {
        default: withCtx(function() {
          return [createElementVNode("div", _hoisted_5, [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.state.errorTips, function(item, index) {
              return openBlock(), createElementBlock(
                "p",
                {
                  key: index
                },
                toDisplayString(item.size != void 0 ? item.size + ":" + _ctx.state.errorSizeTips : "") + " " + toDisplayString(item.type != void 0 ? item.type + ":" + _ctx.state.errorTypeTips : "") + " " + toDisplayString(item.num != void 0 ? _ctx.state.errorNumTips : "") + " " + toDisplayString(item.error != void 0 ? _ctx.state.uploadErrorTips : ""),
                1
                /* TEXT */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))])];
        }),
        _: 1
        /* STABLE */
      }, 8, ["onClose"])) : createCommentVNode("v-if", true), _ctx.state.successTips.length > 0 ? (openBlock(), createBlock(_component_tiny_alert, {
        key: 2,
        type: "success",
        size: "large",
        onClose: _ctx.closeSuccessTips
      }, {
        default: withCtx(function() {
          return [createElementVNode("div", _hoisted_6, [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.state.successTips, function(item, index) {
              return openBlock(), createElementBlock(
                "p",
                {
                  key: index
                },
                toDisplayString(item) + "," + toDisplayString(_ctx.state.uploadSuccessTips),
                1
                /* TEXT */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))])];
        }),
        _: 1
        /* STABLE */
      }, 8, ["onClose"])) : createCommentVNode("v-if", true)]), createElementVNode("div", _hoisted_7, [createVNode(_component_tiny_file_upload, {
        ref: "upload",
        data: _ctx.data,
        onChange: _ctx.fileUploadChange,
        httpRequest: _ctx.httpRequest,
        name: _ctx.uploadName,
        onError: _ctx.errorEvent,
        onExceed: _ctx.handleExceed,
        onProgress: _ctx.progressEvent,
        "before-upload": _ctx.beforeAvatarUpload,
        onSuccess: _ctx.handleAvatarSuccess,
        "with-credentials": _ctx.state.withCredentials,
        multiple: _ctx.state.multiple,
        accept: _ctx.state.accept,
        limit: _ctx.limit,
        headers: _ctx.state.headers,
        action: _ctx.state.action,
        "auto-upload": false
      }, {
        trigger: withCtx(function() {
          return [createVNode(_component_tiny_button, {
            size: "small",
            type: "primary"
          }, {
            default: withCtx(function() {
              return [createTextVNode(
                toDisplayString(_ctx.state.multiple ? _ctx.state.uploadsButtonText : _ctx.state.uploadButtonText),
                1
                /* TEXT */
              )];
            }),
            _: 1
            /* STABLE */
          })];
        }),
        _: 1
        /* STABLE */
      }, 8, ["data", "onChange", "httpRequest", "name", "onError", "onExceed", "onProgress", "before-upload", "onSuccess", "with-credentials", "multiple", "accept", "limit", "headers", "action"]), createElementVNode("div", _hoisted_8, [createElementVNode("div", _hoisted_9, [createElementVNode(
        "p",
        _hoisted_10,
        toDisplayString(_ctx.state.fileName),
        1
        /* TEXT */
      ), createElementVNode(
        "p",
        _hoisted_11,
        toDisplayString(_ctx.state.fileSize),
        1
        /* TEXT */
      ), createElementVNode(
        "p",
        _hoisted_12,
        toDisplayString(_ctx.state.fileStatus),
        1
        /* TEXT */
      )]), createElementVNode("div", _hoisted_13, [createElementVNode("ul", _hoisted_14, [(openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.state.uploadList, function(item, index) {
          return openBlock(), createElementBlock("li", {
            class: "tiny-popupload__dialog-table-item",
            key: index
          }, [createElementVNode(
            "p",
            _hoisted_15,
            toDisplayString(item.name),
            1
            /* TEXT */
          ), createElementVNode(
            "p",
            _hoisted_16,
            toDisplayString(Math.floor(Number(item.size) / 1024)) + "KB",
            1
            /* TEXT */
          ), createElementVNode("p", _hoisted_17, [createElementVNode("span", null, [createVNode(_component_IconDel, {
            class: "delIcon",
            onClick: function onClick($event) {
              return _ctx.deleteFile(item);
            }
          }, null, 8, ["onClick"])])])]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))])])])]), createElementVNode("div", _hoisted_18, [createVNode(_component_tiny_button, {
        type: "primary",
        disabled: _ctx.state.uploadList.length == 0,
        onClick: _ctx.uploadSubmit
      }, {
        default: withCtx(function() {
          return [createTextVNode(
            toDisplayString(_ctx.state.submitButtonText),
            1
            /* TEXT */
          )];
        }),
        _: 1
        /* STABLE */
      }, 8, ["disabled", "onClick"]), createVNode(_component_tiny_button, {
        onClick: _ctx.closeDialog
      }, {
        default: withCtx(function() {
          return [createTextVNode(
            toDisplayString(_ctx.state.cancelButtonText),
            1
            /* TEXT */
          )];
        }),
        _: 1
        /* STABLE */
      }, 8, ["onClick"])])])];
    }),
    _: 1
    /* STABLE */
  }, 8, ["modelValue", "title", "onClose"])]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
