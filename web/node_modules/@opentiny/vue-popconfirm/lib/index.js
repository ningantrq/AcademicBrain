function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  PC_PREFIXCLS: "tiny-popconfim",
  MOBILE_PREFIXCLS: "tiny-mobile-popconfim",
  Mode: "pc",
  prefixcls: function prefixcls(mode) {
    return mode === this.Mode ? this.PC_PREFIXCLS : this.MOBILE_PREFIXCLS;
  },
  ICON_MAP: {
    success: "icon-success",
    error: "icon-error",
    info: "icon-info-solid",
    warning: "icon-warning"
  }
};
var Popconfirm = defineComponent({
  name: $prefix + "Popconfim",
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    message: String,
    customClass: String,
    trigger: {
      type: String,
      default: "hover",
      validator: function validator(value) {
        return ["click", "hover"].includes(value);
      }
    },
    cancelButton: {
      type: Boolean,
      default: true
    },
    title: String,
    placement: {
      type: String,
      default: "top"
    },
    width: {
      type: [String, Number],
      default: "350"
    },
    type: [String, Object]
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
Popconfirm.install = function(Vue) {
  Vue.component(Popconfirm.name, Popconfirm);
};
Popconfirm.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Popconfirm.version = version;
export {
  Popconfirm as default
};
