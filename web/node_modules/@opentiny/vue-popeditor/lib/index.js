function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import { iconPopup, iconSearch } from "@opentiny/vue-icon";
import PcTemplate from "./pc.js";
import "@opentiny/vue-theme/popeditor/index.css";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return PcTemplate;
};
var $constants = {
  TITLE: "ui.popeditor.title",
  COLUMNS_TYPE: {
    selection: "selection",
    radio: "radio",
    index: "index",
    width: 40
  },
  GRID_REF: {
    history: "historyGrid",
    source: "sourceGrid"
  },
  TAG_NAME: "INPUT",
  MODAL_WIDTH: {
    multi: 900,
    radio: 600
  },
  ACTIVE_NAME: {
    history: "history",
    source: "source"
  },
  TYPE_GRID: "grid",
  TYPE_TREE: "tree",
  ID: "id",
  LABEL: "label"
};
var popeditorProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  modelValue: {
    type: [String, Number, Array],
    default: ""
  },
  tabindex: {
    type: String,
    default: "1"
  },
  placeholder: {
    type: String,
    default: ""
  },
  size: String,
  trigger: {
    type: String,
    default: "default"
  },
  icon: {
    type: Object,
    default: function _default2() {
      return iconPopup();
    }
  },
  iconSearch: {
    type: Object,
    default: function _default3() {
      return iconSearch();
    }
  },
  title: {
    type: String,
    default: ""
  },
  textField: {
    type: String,
    default: "label"
  },
  textSplit: {
    type: String,
    default: "/"
  },
  valueField: {
    type: String,
    default: "id"
  },
  valueSplit: {
    type: String,
    default: ";"
  },
  popseletor: {
    type: String,
    default: "grid",
    validator: function validator(value) {
      return ["grid", "tree"].includes(value);
    }
  },
  conditions: {
    type: Array,
    default: function _default4() {
      return [];
    }
  },
  width: {
    type: [String, Number],
    default: ""
  },
  gridOp: {
    type: Object,
    default: function _default5() {
      return {
        columns: [],
        data: []
      };
    }
  },
  remoteSearch: Function,
  dataset: Object,
  alwaysLoad: {
    type: Boolean,
    default: false
  },
  treeOp: {
    type: Object,
    default: function _default6() {
      return {
        data: []
      };
    }
  },
  pagerOp: {
    type: Object,
    default: function _default7() {
      return {};
    }
  },
  disabled: {
    type: Boolean,
    default: false
  },
  readonly: {
    type: Boolean,
    default: true
  },
  multi: {
    type: Boolean,
    default: false
  },
  showClearBtn: {
    type: Boolean,
    default: true
  },
  showPager: {
    type: Boolean,
    default: false
  },
  showHistory: {
    type: Boolean,
    default: false
  },
  autoLookup: {
    type: Boolean,
    default: true
  },
  beforeReset: Function,
  resize: {
    type: Boolean,
    default: false
  },
  dialogClass: {
    type: String,
    default: ""
  },
  textRenderSource: Function,
  draggable: {
    type: Boolean,
    default: true
  },
  placement: {
    type: String,
    default: "bottom-start"
  },
  popperAppendToBody: {
    type: Boolean,
    default: true
  },
  suggest: Boolean,
  beforeClose: {
    type: Function,
    default: function _default8() {
      return function() {
        return true;
      };
    }
  },
  showSelectedBox: Boolean,
  selectedBoxOp: {
    type: Object,
    default: function _default9() {
      return {};
    }
  },
  tooltipConfig: {
    type: Object,
    default: function _default10() {
      return {};
    }
  },
  autoReset: {
    type: Boolean,
    default: false
  }
});
var Popeditor = defineComponent({
  name: $prefix + "Popeditor",
  props: popeditorProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
Popeditor.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Popeditor.install = function(Vue) {
  Vue.component(Popeditor.name, Popeditor);
};
Popeditor.version = version;
export {
  Popeditor as default
};
