import { renderless, api } from "@opentiny/vue-renderless/popeditor/vue";
import { defineComponent, directive, props, setup as _setup } from "@opentiny/vue-common";
import { iconClose, iconChevronDown, iconChevronUp } from "@opentiny/vue-icon";
import Input from "@opentiny/vue-input";
import DialogBox from "@opentiny/vue-dialog-box";
import Grid from "@opentiny/vue-grid";
import Pager from "@opentiny/vue-pager";
import Tree from "@opentiny/vue-tree";
import SelectedBox from "@opentiny/vue-selected-box";
import Clickoutside from "@opentiny/vue-renderless/common/deps/clickoutside";
import { resolveComponent, openBlock, createElementBlock, createVNode, normalizeClass, withCtx, createElementVNode, createBlock, withModifiers, createCommentVNode, resolveDynamicComponent, Transition, withDirectives, vShow, renderSlot, toDisplayString, Fragment, renderList, normalizeStyle, mergeProps, withKeys, createSlots, normalizeProps, guardReactiveProps } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  components: {
    IconClose: iconClose(),
    IconChevronDown: iconChevronDown(),
    IconChevronUp: iconChevronUp(),
    TinyInput: Input,
    TinyGrid: Grid,
    TinyPager: Pager,
    TinyDialogBox: DialogBox,
    TinyTree: Tree,
    TinySelectedBox: SelectedBox
  },
  directives: directive({
    Clickoutside
  }),
  props: [].concat(props, ["dataset", "placeholder", "autoLookup", "beforeReset", "textRenderSource", "resize", "size", "trigger", "conditions", "disabled", "gridOp", "alwaysLoad", "remoteSearch", "treeOp", "icon", "iconSearch", "initSelectedDatas", "multi", "pagerOp", "popseletor", "readonly", "showClearBtn", "showHistory", "showPager", "textField", "textSplit", "title", "modelValue", "valueField", "valueSplit", "width", "dialogClass", "tabindex", "draggable", "placement", "popperAppendToBody", "suggest", "beforeClose", "showSelectedBox", "selectedBoxOp", "tooltipConfig", "autoReset"]),
  emits: ["change", "close", "page-change", "popup"],
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-popeditor"
};
var _hoisted_2 = {
  ref: "popper"
};
var _hoisted_3 = {
  key: 0,
  class: "tiny-popeditor-top"
};
var _hoisted_4 = {
  class: "tiny-popeditor__search-lists"
};
var _hoisted_5 = ["title"];
var _hoisted_6 = {
  key: 0,
  class: "tiny-popeditor__search-footer"
};
var _hoisted_7 = {
  key: 1,
  class: "tiny-popeditor__search-footer"
};
var _hoisted_8 = {
  key: 1,
  class: "tiny-popeditor-body"
};
var _hoisted_9 = {
  class: "tiny-popeditor__tabs"
};
var _hoisted_10 = {
  class: "tiny-popeditor__tabs-head"
};
var _hoisted_11 = {
  class: "tiny-popeditor__tabs-body"
};
var _hoisted_12 = {
  key: 0,
  class: "tabs-body-item"
};
var _hoisted_13 = {
  key: 1,
  class: "tabs-body-item"
};
var _hoisted_14 = {
  key: 0,
  class: "tiny-popeditor-body__right"
};
var _hoisted_15 = {
  class: "tiny-popeditor__tabs"
};
var _hoisted_16 = {
  class: "tiny-popeditor__tabs-head"
};
var _hoisted_17 = {
  class: "tiny-popeditor__tabs-selected"
};
var _hoisted_18 = {
  class: "tiny-popeditor__tabs-body"
};
var _hoisted_19 = {
  class: "tabs-body-item"
};
var _hoisted_20 = {
  key: 2,
  style: {
    "height": "50px"
  }
};
var _hoisted_21 = {
  key: 2
};
var _hoisted_22 = {
  key: 0,
  class: "tiny-toolbar"
};
var _hoisted_23 = {
  key: 1,
  class: "tiny-toolbar"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_icon_close = resolveComponent("icon-close");
  var _component_icon_chevron_up = resolveComponent("icon-chevron-up");
  var _component_icon_chevron_down = resolveComponent("icon-chevron-down");
  var _component_tiny_input = resolveComponent("tiny-input");
  var _component_tiny_grid = resolveComponent("tiny-grid");
  var _component_tiny_pager = resolveComponent("tiny-pager");
  var _component_tiny_selected_box = resolveComponent("tiny-selected-box");
  var _component_tiny_tree = resolveComponent("tiny-tree");
  var _component_tiny_dialog_box = resolveComponent("tiny-dialog-box");
  return openBlock(), createElementBlock("div", _hoisted_1, [createVNode(_component_tiny_input, {
    ref: "reference",
    size: _ctx.size,
    placeholder: _ctx.placeholder,
    class: normalizeClass({
      "tiny-popeditor-readonly": _ctx.state.readonly,
      suggest: _ctx.suggest
    }),
    onClick: _cache[1] || (_cache[1] = function($event) {
      return _ctx.handleOpen($event);
    }),
    modelValue: _ctx.state.display,
    "onUpdate:modelValue": [_cache[2] || (_cache[2] = function($event) {
      return _ctx.state.display = $event;
    }), _ctx.doSuggesst],
    disabled: _ctx.state.disabled,
    readonly: _ctx.state.readonly,
    tabindex: _ctx.tabindex,
    "validate-event": !_ctx.state.open,
    onMouseover: _cache[3] || (_cache[3] = function($event) {
      return _ctx.state.inputHover = true;
    }),
    onMouseleave: _cache[4] || (_cache[4] = function($event) {
      return _ctx.state.inputHover = false;
    })
  }, {
    suffix: withCtx(function() {
      return [createElementVNode("span", null, [_ctx.showClearBtn && _ctx.state.commitValue && _ctx.suggest && _ctx.state.inputHover ? (openBlock(), createBlock(_component_icon_close, {
        key: 0,
        style: {
          "margin-right": "8px"
        },
        onClick: withModifiers(_ctx.handleClear, ["stop"]),
        class: "tiny-svg-size tiny-svg__popeditor"
      }, null, 8, ["onClick"])) : createCommentVNode("v-if", true), _ctx.suggest && _ctx.state.showSuggestPanel ? (openBlock(), createBlock(_component_icon_chevron_up, {
        key: 1,
        onClick: _cache[0] || (_cache[0] = withModifiers(function($event) {
          return _ctx.closeSuggestPanel(true);
        }, ["stop"])),
        class: "tiny-svg-size tiny-svg__popeditor tiny-chevron"
      })) : createCommentVNode("v-if", true), _ctx.suggest && !_ctx.state.showSuggestPanel ? (openBlock(), createBlock(_component_icon_chevron_down, {
        key: 2,
        onClick: withModifiers(_ctx.doSuggesstNow, ["stop"]),
        class: "tiny-svg-size tiny-svg__popeditor tiny-chevron"
      }, null, 8, ["onClick"])) : createCommentVNode("v-if", true), _ctx.showClearBtn && !!_ctx.state.display && !_ctx.suggest ? (openBlock(), createBlock(_component_icon_close, {
        key: 3,
        onClick: withModifiers(_ctx.handleClear, ["stop"]),
        class: "tiny-svg-size tiny-svg__popeditor"
      }, null, 8, ["onClick"])) : createCommentVNode("v-if", true), !(_ctx.showClearBtn && !!_ctx.state.display && !_ctx.suggest) || !_ctx.suggest && !_ctx.readonly ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon), {
        key: 4,
        onClick: withModifiers(_ctx.openDialog, ["stop"]),
        class: "tiny-svg-size tiny-svg__popeditor"
      }, null, 8, ["onClick"])) : createCommentVNode("v-if", true)])];
    }),
    _: 1
    /* STABLE */
  }, 8, ["size", "placeholder", "class", "modelValue", "disabled", "readonly", "tabindex", "validate-event", "onUpdate:modelValue"]), createVNode(Transition, {
    name: "tiny-zoom-in-top",
    onAfterLeave: _ctx.doDestroy,
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        _hoisted_2,
        [_ctx.state.showSuggestPanel ? (openBlock(), createBlock(_component_tiny_grid, {
          key: 0,
          ref: "suggest",
          "auto-resize": "",
          loading: _ctx.state.loading,
          "max-height": "300px",
          "highlight-current-row": true,
          columns: _ctx.state.baseColumns,
          data: _ctx.state.suggestList,
          "row-id": _ctx.valueField,
          "select-config": {
            checkRowKeys: _ctx.state.selectedValues
          },
          "radio-config": {
            checkRowKey: _ctx.state.commitValue,
            trigger: _ctx.trigger
          },
          "tooltip-config": _ctx.tooltipConfig,
          onSelectAll: _ctx.sourceGridSelectAll,
          onSelectChange: _ctx.sourceGridSelectChange,
          onRadioChange: _ctx.suggestRadioChange
        }, null, 8, ["loading", "columns", "data", "row-id", "select-config", "radio-config", "tooltip-config", "onSelectAll", "onSelectChange", "onRadioChange"])) : createCommentVNode("v-if", true)],
        512
        /* NEED_PATCH */
      ), [[vShow, _ctx.state.showSuggestPanel]])];
    }),
    _: 1
    /* STABLE */
  }, 8, ["onAfterLeave"]), createVNode(_component_tiny_dialog_box, {
    visible: _ctx.state.open,
    "onUpdate:visible": _cache[16] || (_cache[16] = function($event) {
      return _ctx.state.open = $event;
    }),
    resize: _ctx.resize,
    draggable: _ctx.draggable,
    "append-to-body": "",
    title: _ctx.state.getTitle,
    "close-on-click-modal": false,
    width: _ctx.state.modalWidth,
    onClose: _cache[17] || (_cache[17] = function($event) {
      return _ctx.$parent.$emit("close");
    }),
    onClosed: _cache[18] || (_cache[18] = function($event) {
      return _ctx.state.showContent = false;
    }),
    "before-close": _ctx.handleBeforeClose,
    "dialog-class": _ctx.dialogClass
  }, {
    footer: withCtx(function() {
      return [_ctx.state.theme === "saas" ? (openBlock(), createElementBlock("span", _hoisted_22, [renderSlot(_ctx.$slots, "footer", {
        confirm: _ctx.handleConfirm,
        cancel: _ctx.handleCancel
      }, function() {
        return [createElementVNode("button", {
          type: "button",
          onClick: _cache[12] || (_cache[12] = function() {
            return _ctx.handleCancel && _ctx.handleCancel.apply(_ctx, arguments);
          }),
          class: "tiny-button tiny-button--default"
        }, [createElementVNode(
          "span",
          null,
          toDisplayString(_ctx.t("ui.popeditor.cancel")),
          1
          /* TEXT */
        )]), createElementVNode("button", {
          type: "button",
          onClick: _cache[13] || (_cache[13] = function() {
            return _ctx.handleConfirm && _ctx.handleConfirm.apply(_ctx, arguments);
          }),
          class: "tiny-button tiny-button--primary"
        }, [createElementVNode(
          "span",
          null,
          toDisplayString(_ctx.t("ui.popeditor.confirm")),
          1
          /* TEXT */
        )])];
      })])) : (openBlock(), createElementBlock("span", _hoisted_23, [renderSlot(_ctx.$slots, "footer", {
        confirm: _ctx.handleConfirm,
        cancel: _ctx.handleCancel
      }, function() {
        return [createElementVNode("button", {
          type: "button",
          onClick: _cache[14] || (_cache[14] = function() {
            return _ctx.handleConfirm && _ctx.handleConfirm.apply(_ctx, arguments);
          }),
          class: "tiny-button tiny-button--primary"
        }, [createElementVNode(
          "span",
          null,
          toDisplayString(_ctx.t("ui.popeditor.confirm")),
          1
          /* TEXT */
        )]), createElementVNode("button", {
          type: "button",
          onClick: _cache[15] || (_cache[15] = function() {
            return _ctx.handleCancel && _ctx.handleCancel.apply(_ctx, arguments);
          }),
          class: "tiny-button tiny-button--default"
        }, [createElementVNode(
          "span",
          null,
          toDisplayString(_ctx.t("ui.popeditor.cancel")),
          1
          /* TEXT */
        )])];
      })]))];
    }),
    default: withCtx(function() {
      return [_ctx.state.showContent ? (openBlock(), createElementBlock(
        Fragment,
        {
          key: 0
        },
        [_ctx.state.conditions.length && _ctx.popseletor === "grid" ? (openBlock(), createElementBlock("div", _hoisted_3, [renderSlot(_ctx.$slots, "search", {
          searchOp: _ctx.state.searchOp
        }, function() {
          return [createElementVNode("ul", _hoisted_4, [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.conditions, function(item) {
              return openBlock(), createElementBlock(
                "li",
                {
                  class: "tiny-popeditor__search-item",
                  key: item.field,
                  style: normalizeStyle({
                    width: 100 * ((item.span || 6) / 12) + "%"
                  })
                },
                [createElementVNode("label", {
                  class: "tiny-popeditor__search-label",
                  title: item.label,
                  style: normalizeStyle({
                    width: item.labelWidth || "160px"
                  })
                }, toDisplayString(item.label), 13, _hoisted_5), (openBlock(), createBlock(resolveDynamicComponent(item.component || "tiny-input"), mergeProps({
                  modelValue: _ctx.state.search[item.field],
                  "onUpdate:modelValue": function onUpdateModelValue($event) {
                    return _ctx.state.search[item.field] = $event;
                  }
                }, item.attrs, {
                  class: "tiny-popeditor__search-input",
                  novalid: true,
                  onKeydown: withKeys(_ctx.handleSearch, ["enter"])
                }), null, 16, ["modelValue", "onUpdate:modelValue", "onKeydown"]))],
                4
                /* STYLE */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))]), _ctx.state.theme === "saas" ? (openBlock(), createElementBlock("div", _hoisted_6, [createElementVNode("button", {
            type: "button",
            onClick: _cache[5] || (_cache[5] = function() {
              return _ctx.handleReset && _ctx.handleReset.apply(_ctx, arguments);
            }),
            class: "tiny-button tiny-button--default"
          }, [createElementVNode(
            "span",
            null,
            toDisplayString(_ctx.t("ui.popeditor.reset")),
            1
            /* TEXT */
          )]), createElementVNode("button", {
            type: "button",
            onClick: _cache[6] || (_cache[6] = function() {
              return _ctx.handleSearch && _ctx.handleSearch.apply(_ctx, arguments);
            }),
            class: "tiny-button tiny-button--primary"
          }, [createElementVNode(
            "span",
            null,
            toDisplayString(_ctx.t("ui.popeditor.search")),
            1
            /* TEXT */
          )])])) : (openBlock(), createElementBlock("div", _hoisted_7, [createElementVNode("button", {
            type: "button",
            onClick: _cache[7] || (_cache[7] = function() {
              return _ctx.handleSearch && _ctx.handleSearch.apply(_ctx, arguments);
            }),
            class: "tiny-button tiny-button--primary"
          }, [createElementVNode(
            "span",
            null,
            toDisplayString(_ctx.t("ui.popeditor.search")),
            1
            /* TEXT */
          )]), createElementVNode("button", {
            type: "button",
            onClick: _cache[8] || (_cache[8] = function() {
              return _ctx.handleReset && _ctx.handleReset.apply(_ctx, arguments);
            }),
            class: "tiny-button tiny-button--default"
          }, [createElementVNode(
            "span",
            null,
            toDisplayString(_ctx.t("ui.popeditor.reset")),
            1
            /* TEXT */
          )])]))];
        })])) : createCommentVNode("v-if", true), _ctx.popseletor === "grid" ? (openBlock(), createElementBlock("div", _hoisted_8, [createElementVNode(
          "div",
          {
            class: normalizeClass(["tiny-popeditor-body__left", {
              "tiny-popeditor-body__radio": !_ctx.multi
            }])
          },
          [createElementVNode("div", _hoisted_9, [createElementVNode("div", _hoisted_10, [createElementVNode("ul", null, [_ctx.showHistory ? (openBlock(), createElementBlock(
            "li",
            {
              key: 0,
              onClick: _cache[9] || (_cache[9] = function($event) {
                return _ctx.state.activeName = "history";
              }),
              class: normalizeClass({
                "tiny-popeditor__tabs-selected": _ctx.state.activeName === "history"
              })
            },
            [createElementVNode(
              "span",
              null,
              toDisplayString(_ctx.t("ui.popeditor.historyLists")),
              1
              /* TEXT */
            )],
            2
            /* CLASS */
          )) : createCommentVNode("v-if", true), createElementVNode(
            "li",
            {
              onClick: _cache[10] || (_cache[10] = function($event) {
                return _ctx.state.activeName = "source";
              }),
              class: normalizeClass({
                "tiny-popeditor__tabs-selected": _ctx.state.activeName === "source"
              })
            },
            [createElementVNode(
              "span",
              null,
              toDisplayString(_ctx.t("ui.popeditor.sourceLists")),
              1
              /* TEXT */
            )],
            2
            /* CLASS */
          )])]), createElementVNode("div", _hoisted_11, [_ctx.state.activeName === "history" ? (openBlock(), createElementBlock("div", _hoisted_12, [createVNode(_component_tiny_grid, {
            ref: "historyGrid",
            height: "290px",
            size: "mini",
            "highlight-current-row": true,
            columns: _ctx.state.baseColumns,
            data: _ctx.state.historyGridDataset,
            "row-id": _ctx.valueField,
            "select-config": {
              checkRowKeys: _ctx.state.selectedValues
            },
            "tooltip-config": _ctx.tooltipConfig,
            onSelectAll: _ctx.sourceGridSelectAll,
            onSelectChange: _ctx.sourceGridSelectChange
          }, null, 8, ["columns", "data", "row-id", "select-config", "tooltip-config", "onSelectAll", "onSelectChange"])])) : createCommentVNode("v-if", true), _ctx.state.activeName === "source" ? (openBlock(), createElementBlock("div", _hoisted_13, [_ctx.multi ? (openBlock(), createBlock(_component_tiny_grid, {
            key: 0,
            "auto-resize": "",
            loading: _ctx.state.loading,
            ref: "sourceGrid",
            height: "290px",
            size: "mini",
            "highlight-current-row": true,
            columns: _ctx.state.baseColumns,
            data: _ctx.state.sourceGridDataset,
            "row-id": _ctx.valueField,
            "select-config": {
              checkRowKeys: _ctx.state.selectedValues
            },
            "tooltip-config": _ctx.tooltipConfig,
            onSelectAll: _ctx.sourceGridSelectAll,
            onSelectChange: _ctx.sourceGridSelectChange
          }, null, 8, ["loading", "columns", "data", "row-id", "select-config", "tooltip-config", "onSelectAll", "onSelectChange"])) : (openBlock(), createBlock(_component_tiny_grid, {
            key: 1,
            ref: "sourceGrid",
            "auto-resize": "",
            loading: _ctx.state.loading,
            height: "290px",
            size: "mini",
            "highlight-current-row": true,
            columns: _ctx.state.baseColumns,
            data: _ctx.state.sourceGridDataset,
            "row-id": _ctx.valueField,
            "radio-config": {
              checkRowKey: _ctx.state.commitValue,
              trigger: _ctx.trigger
            },
            "tooltip-config": _ctx.tooltipConfig
          }, null, 8, ["loading", "columns", "data", "row-id", "radio-config", "tooltip-config"])), _ctx.showPager ? (openBlock(), createBlock(_component_tiny_pager, mergeProps({
            key: 2
          }, _ctx.state.pagerConfig, {
            onCurrentChange: _ctx.handleSizeChange,
            onSizeChange: _ctx.handleNumberPageChange
          }), null, 16, ["onCurrentChange", "onSizeChange"])) : createCommentVNode("v-if", true)])) : createCommentVNode("v-if", true)])])],
          2
          /* CLASS */
        ), _ctx.multi ? (openBlock(), createElementBlock("div", _hoisted_14, [createElementVNode("div", _hoisted_15, [createElementVNode("div", _hoisted_16, [createElementVNode("ul", null, [createElementVNode("li", _hoisted_17, [createElementVNode(
          "span",
          null,
          toDisplayString(_ctx.t("ui.popeditor.selectionLists")),
          1
          /* TEXT */
        )])])]), createElementVNode("div", _hoisted_18, [createElementVNode("div", _hoisted_19, [_ctx.showSelectedBox ? (openBlock(), createBlock(_component_tiny_selected_box, mergeProps({
          key: 0,
          ref: "selectedBox",
          style: {
            "height": "290px"
          },
          select: _ctx.state.selectedDatas,
          onClear: _ctx.selectedBoxClear,
          onDelete: _ctx.selectedBoxDelete,
          onDrag: _ctx.selectedBoxDrag
        }, _ctx.selectedBoxOp), createSlots({
          _: 2
          /* DYNAMIC */
        }, [_ctx.slots.select ? {
          name: "select",
          fn: withCtx(function(params) {
            return [renderSlot(_ctx.$slots, "select", normalizeProps(guardReactiveProps(params)))];
          }),
          key: "0"
        } : void 0, _ctx.slots.button ? {
          name: "button",
          fn: withCtx(function(params) {
            return [renderSlot(_ctx.$slots, "button", normalizeProps(guardReactiveProps(params)))];
          }),
          key: "1"
        } : void 0, _ctx.slots.clear ? {
          name: "clear",
          fn: withCtx(function(params) {
            return [renderSlot(_ctx.$slots, "clear", normalizeProps(guardReactiveProps(params)))];
          }),
          key: "2"
        } : void 0, _ctx.slots.option ? {
          name: "option",
          fn: withCtx(function(params) {
            return [renderSlot(_ctx.$slots, "option", normalizeProps(guardReactiveProps(params)))];
          }),
          key: "3"
        } : void 0, _ctx.slots.close ? {
          name: "close",
          fn: withCtx(function(params) {
            return [renderSlot(_ctx.$slots, "close", normalizeProps(guardReactiveProps(params)))];
          }),
          key: "4"
        } : void 0]), 1040, ["select", "onClear", "onDelete", "onDrag"])) : (openBlock(), createBlock(_component_tiny_grid, {
          key: 1,
          ref: "selectedGrid",
          "auto-resize": "",
          columns: _ctx.state.baseColumns,
          data: _ctx.state.selectedDatas,
          height: "290px",
          size: "mini",
          "row-id": _ctx.valueField,
          "select-config": {
            checkRowKeys: _ctx.state.selectedValues
          },
          "tooltip-config": _ctx.tooltipConfig,
          onSelectAll: _ctx.selectedGridSelectAll,
          onSelectChange: _ctx.selectedGridSelectChange
        }, null, 8, ["columns", "data", "row-id", "select-config", "tooltip-config", "onSelectAll", "onSelectChange"])), _ctx.showPager ? (openBlock(), createElementBlock("div", _hoisted_20)) : createCommentVNode("v-if", true)])])])])) : createCommentVNode("v-if", true)])) : createCommentVNode("v-if", true), _ctx.popseletor === "tree" ? (openBlock(), createElementBlock("div", _hoisted_21, [createVNode(_component_tiny_input, {
          class: "tiny-popeditor_filter-input",
          placeholder: _ctx.t("ui.popeditor.filterNode"),
          modelValue: _ctx.state.filterText,
          "onUpdate:modelValue": _cache[11] || (_cache[11] = function($event) {
            return _ctx.state.filterText = $event;
          }),
          "suffix-icon": _ctx.iconSearch
        }, null, 8, ["placeholder", "modelValue", "suffix-icon"]), createVNode(_component_tiny_tree, mergeProps({
          ref: "tree"
        }, _ctx.state.treeOp, {
          onCheckChange: _ctx.treeCheckChange
        }), null, 16, ["onCheckChange"])])) : createCommentVNode("v-if", true)],
        64
        /* STABLE_FRAGMENT */
      )) : createCommentVNode("v-if", true)];
    }),
    _: 3
    /* FORWARDED */
  }, 8, ["visible", "resize", "draggable", "title", "width", "before-close", "dialog-class"])]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
