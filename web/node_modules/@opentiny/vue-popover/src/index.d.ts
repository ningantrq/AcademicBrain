import type { IPopoverApi } from '@opentiny/vue-renderless/types/popover.type';
export declare const popoverProps: {
    appendToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    arrowOffset: {
        type: NumberConstructor;
        default: number;
    };
    boundariesPadding: {
        type: NumberConstructor;
        default: number;
    };
    closeDelay: {
        type: NumberConstructor;
        default: number;
    };
    content: StringConstructor;
    disabled: BooleanConstructor;
    modelValue: BooleanConstructor;
    offset: {
        default: number;
    };
    openDelay: {
        type: NumberConstructor;
        default: number;
    };
    placement: {
        type: StringConstructor;
        default: string;
    };
    popper: {};
    popperClass: StringConstructor;
    popperOptions: {
        type: ObjectConstructor;
        default: () => {
            gpuAcceleration: boolean;
        };
    };
    reference: {};
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
    title: StringConstructor;
    transition: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    visibleArrow: {
        default: boolean;
    };
    width: {
        type: (StringConstructor | NumberConstructor)[];
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
    };
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
    };
    listData: (ObjectConstructor | ArrayConstructor)[];
    genArrowByHtml: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};
declare const _default: import("@vue/runtime-core").DefineComponent<{
    appendToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    arrowOffset: {
        type: NumberConstructor;
        default: number;
    };
    boundariesPadding: {
        type: NumberConstructor;
        default: number;
    };
    closeDelay: {
        type: NumberConstructor;
        default: number;
    };
    content: StringConstructor;
    disabled: BooleanConstructor;
    modelValue: BooleanConstructor;
    offset: {
        default: number;
    };
    openDelay: {
        type: NumberConstructor;
        default: number;
    };
    placement: {
        type: StringConstructor;
        default: string;
    };
    popper: {};
    popperClass: StringConstructor;
    popperOptions: {
        type: ObjectConstructor;
        default: () => {
            gpuAcceleration: boolean;
        };
    };
    reference: {};
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
    title: StringConstructor;
    transition: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    visibleArrow: {
        default: boolean;
    };
    width: {
        type: (StringConstructor | NumberConstructor)[];
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
    };
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
    };
    listData: (ObjectConstructor | ArrayConstructor)[];
    genArrowByHtml: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, IPopoverApi, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    appendToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    arrowOffset: {
        type: NumberConstructor;
        default: number;
    };
    boundariesPadding: {
        type: NumberConstructor;
        default: number;
    };
    closeDelay: {
        type: NumberConstructor;
        default: number;
    };
    content: StringConstructor;
    disabled: BooleanConstructor;
    modelValue: BooleanConstructor;
    offset: {
        default: number;
    };
    openDelay: {
        type: NumberConstructor;
        default: number;
    };
    placement: {
        type: StringConstructor;
        default: string;
    };
    popper: {};
    popperClass: StringConstructor;
    popperOptions: {
        type: ObjectConstructor;
        default: () => {
            gpuAcceleration: boolean;
        };
    };
    reference: {};
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
    title: StringConstructor;
    transition: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    visibleArrow: {
        default: boolean;
    };
    width: {
        type: (StringConstructor | NumberConstructor)[];
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
    };
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
    };
    listData: (ObjectConstructor | ArrayConstructor)[];
    genArrowByHtml: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    transition: string;
    disabled: boolean;
    tiny_mode_root: boolean;
    modelValue: boolean;
    trigger: string;
    tabindex: number;
    visibleArrow: boolean;
    arrowOffset: number;
    placement: string;
    appendToBody: boolean;
    offset: number;
    popperOptions: Record<string, any>;
    boundariesPadding: number;
    closeDelay: number;
    openDelay: number;
    genArrowByHtml: boolean;
}, {}>;
export default _default;
