import { defineComponent, $prefix, setup as _setup } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/popup/vue";
import { iconClose } from "@opentiny/vue-icon";
import { resolveComponent, openBlock, createElementBlock, createVNode, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, renderSlot, createBlock, createCommentVNode, vShow } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

import "@opentiny/vue-theme-mobile/popup/index.css";
var $constants = {
  OVERFLOWHIDDEN: "tiny-overflow-hidde"
};
var _sfc_main = defineComponent({
  name: $prefix + "Popup",
  emits: ["open", "close", "update:modelValue", "click-overlay", "closed", "opened", "click"],
  components: {
    IconClose: iconClose()
  },
  props: {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    closeIcon: {
      type: String,
      default: "cross"
    },
    closeIconPosition: {
      type: String,
      default: "top-right"
    },
    closeOnClickOverlay: {
      type: Boolean,
      default: true
    },
    closeable: {
      type: Boolean,
      default: true
    },
    duration: [Number, String],
    lazyRender: {
      type: Boolean,
      default: true
    },
    lockScroll: {
      type: Boolean,
      default: true
    },
    modelValue: Boolean,
    overlay: {
      type: Boolean,
      default: true
    },
    overlayClass: String,
    overlayStyle: Object,
    popupClass: String,
    popupStyle: Object,
    position: {
      type: String,
      default: "center"
    },
    round: Boolean,
    safeAreaInsetBottom: Boolean,
    transition: String,
    zIndex: [Number, String]
  },
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_icon_close = resolveComponent("icon-close");
  return openBlock(), createElementBlock("div", null, [createVNode(Transition, {
    name: _ctx.state.transitionName,
    onAfterEnter: _ctx.opened,
    onAfterLeave: _ctx.closed,
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        {
          ref: "popup",
          class: normalizeClass(["tiny-popup", [_ctx.round ? "tiny-popup--round" : "", _ctx.position ? "tiny-popup--" + _ctx.position : "", _ctx.popupClass]]),
          style: normalizeStyle(_ctx.state.style),
          onClick: _cache[0] || (_cache[0] = function($event) {
            return _ctx.$emit("click");
          })
        },
        [renderSlot(_ctx.$slots, "default"), _ctx.closeable ? (openBlock(), createBlock(_component_icon_close, {
          key: 0,
          class: "tiny-popup__close-icon tiny-popup__close-icon--top-right",
          fill: "#c8c9cc",
          tabindex: "0",
          onClick: _ctx.close
        }, null, 8, ["onClick"])) : createCommentVNode("v-if", true)],
        6
        /* CLASS, STYLE */
      ), [[vShow, _ctx.modelValue]])];
    }),
    _: 3
    /* FORWARDED */
  }, 8, ["name", "onAfterEnter", "onAfterLeave"]), createVNode(Transition, {
    name: "tiny-fade",
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        {
          style: normalizeStyle(_ctx.state.overlayStyle),
          class: normalizeClass([_ctx.overlayClass, "tiny-overlay"]),
          onClick: _cache[1] || (_cache[1] = function() {
            return _ctx.clickOverlay && _ctx.clickOverlay.apply(_ctx, arguments);
          })
        },
        [renderSlot(_ctx.$slots, "overlay")],
        6
        /* CLASS, STYLE */
      ), [[vShow, _ctx.state.opened && _ctx.overlay]])];
    }),
    _: 3
    /* FORWARDED */
  })]);
}
var Popup = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.13.0";
Popup.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Popup.install = function(Vue) {
  Vue.component(Popup.name, Popup);
};
Popup.version = version;
export {
  Popup as default
};
