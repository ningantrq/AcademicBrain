declare const _default: import("@vue/runtime-core").DefineComponent<Readonly<{
    title?: any;
    component?: any;
    context?: any;
    value?: any;
    path?: any;
    disabled?: any;
    options?: any;
    level?: any;
    className?: any;
    rules?: any;
    schema?: any;
    handleOnChange?: any;
    testID?: any;
    independentCombinators?: any;
    validation?: any;
}>, {
    standardClassnames: {
        readonly ruleGroup: "ruleGroup";
        readonly queryBuilder: "queryBuilder";
        readonly header: "ruleGroup-header";
        readonly combinators: "ruleGroup-combinators";
        readonly body: "ruleGroup-body";
        readonly addRule: string;
        readonly addGroup: string;
        readonly cloneRule: string;
        readonly cloneGroup: string;
        readonly removeGroup: string;
        readonly notToggle: "ruleGroup-notToggle";
        readonly rule: "query-builder-rule";
        readonly fields: "rule-fields";
        readonly operators: "rule-operators";
        readonly value: "rule-value";
        readonly removeRule: string;
        readonly clearData: string;
        readonly betweenRules: "betweenRules";
        readonly valid: "queryBuilder-valid";
        readonly invalid: "queryBuilder-invalid";
        readonly dndDragging: "dndDragging";
        readonly dndOver: "dndOver";
        readonly dndCopy: "dndCopy";
        readonly dragHandle: "queryBuilder-dragHandle";
        readonly disabled: "queryBuilder-disabled";
        readonly lockRule: "rule-lock";
        readonly lockGroup: "ruleGroup-lock";
        readonly valueSource: "rule-valueSource";
        readonly valueListItem: "rule-value-list-item";
        readonly branches: "queryBuilder-branches";
        readonly displayOnlyField: "display-only-field";
    };
    TestID: {
        readonly rule: "rule";
        readonly inlineCombinator: "inline-combinator";
        readonly ruleGroup: "rule-group";
        readonly addGroup: "add-group";
        readonly cloneGroup: "clone-group";
        readonly removeGroup: "remove-group";
        readonly cloneRule: "clone-rule";
        readonly addRule: "add-rule";
        readonly combinators: "combinators";
        readonly clearData: "clear-data";
        readonly fields: "fields";
        readonly removeRule: "remove-rule";
        readonly operators: "operators";
        readonly notToggle: "not-toggle";
        readonly valueEditor: "value-editor";
        readonly lockRule: "lock-rule";
        readonly dragHandle: "drag-handle";
        readonly valueSourceSelector: "value-source-selector";
        readonly lockGroup: "lock-group";
    };
}, unknown, {
    otherProps(): {
        title?: any;
        component?: any;
        context?: any;
        value?: any;
        path?: any;
        disabled?: any;
        options?: any;
        level?: any;
        className?: any;
        rules?: any;
        schema?: any;
        handleOnChange?: any;
        testID?: any;
        independentCombinators?: any;
        validation?: any;
    };
    CombinatorSelectorComponent(): import("@vue/runtime-core").DefineComponent<Readonly<{
        title?: any;
        value?: any;
        disabled?: any;
        options?: any;
        multiple?: any;
        className?: any;
        handleOnChange?: any;
        listsAsArrays?: any;
        testID?: any;
    }>, {
        isOptionGroupArray: (arr: import("../ts").OptionList<import("../ts").Option<string>> | undefined) => arr is import("../ts").OptionGroup<import("../ts").Option<string>>[];
    }, unknown, {
        valueSelector(): {
            onChange: any;
            val: unknown;
        };
        selectElementChangeHandler(): unknown;
    }, {
        isSelected(data: any, value: any): boolean;
    }, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
        title?: any;
        value?: any;
        disabled?: any;
        options?: any;
        multiple?: any;
        className?: any;
        handleOnChange?: any;
        listsAsArrays?: any;
        testID?: any;
    }>>>, {
        readonly title?: any;
        readonly value?: any;
        readonly disabled?: any;
        readonly options?: any;
        readonly multiple?: any;
        readonly className?: any;
        readonly handleOnChange?: any;
        readonly listsAsArrays?: any;
        readonly testID?: any;
    }, {}>;
}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
    title?: any;
    component?: any;
    context?: any;
    value?: any;
    path?: any;
    disabled?: any;
    options?: any;
    level?: any;
    className?: any;
    rules?: any;
    schema?: any;
    handleOnChange?: any;
    testID?: any;
    independentCombinators?: any;
    validation?: any;
}>>>, {
    readonly title?: any;
    readonly component?: any;
    readonly context?: any;
    readonly value?: any;
    readonly path?: any;
    readonly disabled?: any;
    readonly options?: any;
    readonly level?: any;
    readonly className?: any;
    readonly rules?: any;
    readonly schema?: any;
    readonly handleOnChange?: any;
    readonly testID?: any;
    readonly independentCombinators?: any;
    readonly validation?: any;
}, {}>;
export default _default;
