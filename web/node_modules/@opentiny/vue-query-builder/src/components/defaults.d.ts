export declare const defaultControlElements: {
    addGroupAction: import("@vue/runtime-core").DefineComponent<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }, {
        t: (this: any, path: any, options?: any) => any;
        vm: any;
        f: (props: any, attrs?: {}) => {};
        a: (attrs: any, filters: any, include: any) => {};
        d: (props: any) => void;
        dp: (props: any) => void;
        gcls: (key: any) => any;
    }, unknown, {
        allProps(): {
            class: string;
            type: string;
            title: any;
            disabled: boolean;
            disabledTranslation: Record<string, any> | undefined;
            testID: string | undefined;
        };
    }, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }>>, {
        title: string;
        disabled: boolean;
        handleOnClick: Function;
    }, {}>;
    removeGroupAction: import("@vue/runtime-core").DefineComponent<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }, {
        t: (this: any, path: any, options?: any) => any;
        vm: any;
        f: (props: any, attrs?: {}) => {};
        a: (attrs: any, filters: any, include: any) => {};
        d: (props: any) => void;
        dp: (props: any) => void;
        gcls: (key: any) => any;
    }, unknown, {
        allProps(): {
            class: string;
            type: string;
            title: any;
            disabled: boolean;
            disabledTranslation: Record<string, any> | undefined;
            testID: string | undefined;
        };
    }, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }>>, {
        title: string;
        disabled: boolean;
        handleOnClick: Function;
    }, {}>;
    cloneGroupAction: import("@vue/runtime-core").DefineComponent<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }, {
        t: (this: any, path: any, options?: any) => any;
        vm: any;
        f: (props: any, attrs?: {}) => {};
        a: (attrs: any, filters: any, include: any) => {};
        d: (props: any) => void;
        dp: (props: any) => void;
        gcls: (key: any) => any;
    }, unknown, {
        allProps(): {
            class: string;
            type: string;
            title: any;
            disabled: boolean;
            disabledTranslation: Record<string, any> | undefined;
            testID: string | undefined;
        };
    }, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }>>, {
        title: string;
        disabled: boolean;
        handleOnClick: Function;
    }, {}>;
    cloneRuleAction: import("@vue/runtime-core").DefineComponent<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }, {
        t: (this: any, path: any, options?: any) => any;
        vm: any;
        f: (props: any, attrs?: {}) => {};
        a: (attrs: any, filters: any, include: any) => {};
        d: (props: any) => void;
        dp: (props: any) => void;
        gcls: (key: any) => any;
    }, unknown, {
        allProps(): {
            class: string;
            type: string;
            title: any;
            disabled: boolean;
            disabledTranslation: Record<string, any> | undefined;
            testID: string | undefined;
        };
    }, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }>>, {
        title: string;
        disabled: boolean;
        handleOnClick: Function;
    }, {}>;
    addRuleAction: import("@vue/runtime-core").DefineComponent<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }, {
        t: (this: any, path: any, options?: any) => any;
        vm: any;
        f: (props: any, attrs?: {}) => {};
        a: (attrs: any, filters: any, include: any) => {};
        d: (props: any) => void;
        dp: (props: any) => void;
        gcls: (key: any) => any;
    }, unknown, {
        allProps(): {
            class: string;
            type: string;
            title: any;
            disabled: boolean;
            disabledTranslation: Record<string, any> | undefined;
            testID: string | undefined;
        };
    }, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }>>, {
        title: string;
        disabled: boolean;
        handleOnClick: Function;
    }, {}>;
    clearDataAction: import("@vue/runtime-core").DefineComponent<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }, {
        t: (this: any, path: any, options?: any) => any;
        vm: any;
        f: (props: any, attrs?: {}) => {};
        a: (attrs: any, filters: any, include: any) => {};
        d: (props: any) => void;
        dp: (props: any) => void;
        gcls: (key: any) => any;
    }, unknown, {
        allProps(): {
            class: string;
            type: string;
            title: any;
            disabled: boolean;
            disabledTranslation: Record<string, any> | undefined;
            testID: string | undefined;
        };
    }, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }>>, {
        title: string;
        disabled: boolean;
        handleOnClick: Function;
    }, {}>;
    removeRuleAction: import("@vue/runtime-core").DefineComponent<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }, {
        t: (this: any, path: any, options?: any) => any;
        vm: any;
        f: (props: any, attrs?: {}) => {};
        a: (attrs: any, filters: any, include: any) => {};
        d: (props: any) => void;
        dp: (props: any) => void;
        gcls: (key: any) => any;
    }, unknown, {
        allProps(): {
            class: string;
            type: string;
            title: any;
            disabled: boolean;
            disabledTranslation: Record<string, any> | undefined;
            testID: string | undefined;
        };
    }, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }>>, {
        title: string;
        disabled: boolean;
        handleOnClick: Function;
    }, {}>;
    combinatorSelector: import("@vue/runtime-core").DefineComponent<Readonly<{
        title?: any;
        value?: any;
        disabled?: any;
        options?: any;
        multiple?: any;
        className?: any;
        handleOnChange?: any;
        listsAsArrays?: any;
        testID?: any;
    }>, unknown, unknown, {
        selectOption(): any;
    }, {
        clickHandler(): void;
    }, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
        title?: any;
        value?: any;
        disabled?: any;
        options?: any;
        multiple?: any;
        className?: any;
        handleOnChange?: any;
        listsAsArrays?: any;
        testID?: any;
    }>>>, {
        readonly title?: any;
        readonly value?: any;
        readonly disabled?: any;
        readonly options?: any;
        readonly multiple?: any;
        readonly className?: any;
        readonly handleOnChange?: any;
        readonly listsAsArrays?: any;
        readonly testID?: any;
    }, {}>;
    inlineCombinator: import("@vue/runtime-core").DefineComponent<Readonly<{
        title?: any;
        component?: any;
        context?: any;
        value?: any;
        path?: any;
        disabled?: any;
        options?: any;
        level?: any;
        className?: any;
        rules?: any;
        schema?: any;
        handleOnChange?: any;
        testID?: any;
        independentCombinators?: any;
        validation?: any;
    }>, {
        standardClassnames: {
            readonly ruleGroup: "ruleGroup";
            readonly queryBuilder: "queryBuilder";
            readonly header: "ruleGroup-header";
            readonly combinators: "ruleGroup-combinators";
            readonly body: "ruleGroup-body";
            readonly addRule: string;
            readonly addGroup: string;
            readonly cloneRule: string;
            readonly cloneGroup: string;
            readonly removeGroup: string;
            readonly notToggle: "ruleGroup-notToggle";
            readonly rule: "query-builder-rule";
            readonly fields: "rule-fields";
            readonly operators: "rule-operators";
            readonly value: "rule-value";
            readonly removeRule: string;
            readonly clearData: string;
            readonly betweenRules: "betweenRules";
            readonly valid: "queryBuilder-valid";
            readonly invalid: "queryBuilder-invalid";
            readonly dndDragging: "dndDragging";
            readonly dndOver: "dndOver";
            readonly dndCopy: "dndCopy";
            readonly dragHandle: "queryBuilder-dragHandle";
            readonly disabled: "queryBuilder-disabled";
            readonly lockRule: "rule-lock";
            readonly lockGroup: "ruleGroup-lock";
            readonly valueSource: "rule-valueSource";
            readonly valueListItem: "rule-value-list-item";
            readonly branches: "queryBuilder-branches";
            readonly displayOnlyField: "display-only-field";
        };
        TestID: {
            readonly rule: "rule";
            readonly inlineCombinator: "inline-combinator";
            readonly ruleGroup: "rule-group";
            readonly addGroup: "add-group";
            readonly cloneGroup: "clone-group";
            readonly removeGroup: "remove-group";
            readonly cloneRule: "clone-rule";
            readonly addRule: "add-rule";
            readonly combinators: "combinators";
            readonly clearData: "clear-data";
            readonly fields: "fields";
            readonly removeRule: "remove-rule";
            readonly operators: "operators";
            readonly notToggle: "not-toggle";
            readonly valueEditor: "value-editor";
            readonly lockRule: "lock-rule";
            readonly dragHandle: "drag-handle";
            readonly valueSourceSelector: "value-source-selector";
            readonly lockGroup: "lock-group";
        };
    }, unknown, {
        otherProps(): {
            title?: any;
            component?: any;
            context?: any;
            value?: any;
            path?: any;
            disabled?: any;
            options?: any;
            level?: any;
            className?: any;
            rules?: any;
            schema?: any;
            handleOnChange?: any;
            testID?: any;
            independentCombinators?: any;
            validation?: any;
        };
        CombinatorSelectorComponent(): import("@vue/runtime-core").DefineComponent<Readonly<{
            title?: any;
            value?: any;
            disabled?: any;
            options?: any;
            multiple?: any;
            className?: any;
            handleOnChange?: any;
            listsAsArrays?: any;
            testID?: any;
        }>, {
            isOptionGroupArray: (arr: import("../ts").OptionList<import("../ts").Option<string>> | undefined) => arr is import("../ts").OptionGroup<import("../ts").Option<string>>[];
        }, unknown, {
            valueSelector(): {
                onChange: any;
                val: unknown;
            };
            selectElementChangeHandler(): unknown;
        }, {
            isSelected(data: any, value: any): boolean;
        }, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
            title?: any;
            value?: any;
            disabled?: any;
            options?: any;
            multiple?: any;
            className?: any;
            handleOnChange?: any;
            listsAsArrays?: any;
            testID?: any;
        }>>>, {
            readonly title?: any;
            readonly value?: any;
            readonly disabled?: any;
            readonly options?: any;
            readonly multiple?: any;
            readonly className?: any;
            readonly handleOnChange?: any;
            readonly listsAsArrays?: any;
            readonly testID?: any;
        }, {}>;
    }, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
        title?: any;
        component?: any;
        context?: any;
        value?: any;
        path?: any;
        disabled?: any;
        options?: any;
        level?: any;
        className?: any;
        rules?: any;
        schema?: any;
        handleOnChange?: any;
        testID?: any;
        independentCombinators?: any;
        validation?: any;
    }>>>, {
        readonly title?: any;
        readonly component?: any;
        readonly context?: any;
        readonly value?: any;
        readonly path?: any;
        readonly disabled?: any;
        readonly options?: any;
        readonly level?: any;
        readonly className?: any;
        readonly rules?: any;
        readonly schema?: any;
        readonly handleOnChange?: any;
        readonly testID?: any;
        readonly independentCombinators?: any;
        readonly validation?: any;
    }, {}>;
    operatorSelector: import("@vue/runtime-core").DefineComponent<Readonly<{
        title?: any;
        value?: any;
        disabled?: any;
        options?: any;
        multiple?: any;
        className?: any;
        handleOnChange?: any;
        listsAsArrays?: any;
        testID?: any;
    }>, {
        isOptionGroupArray: (arr: import("../ts").OptionList<import("../ts").Option<string>> | undefined) => arr is import("../ts").OptionGroup<import("../ts").Option<string>>[];
    }, unknown, {
        valueSelector(): {
            onChange: any;
            val: unknown;
        };
        selectElementChangeHandler(): unknown;
    }, {
        isSelected(data: any, value: any): boolean;
    }, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
        title?: any;
        value?: any;
        disabled?: any;
        options?: any;
        multiple?: any;
        className?: any;
        handleOnChange?: any;
        listsAsArrays?: any;
        testID?: any;
    }>>>, {
        readonly title?: any;
        readonly value?: any;
        readonly disabled?: any;
        readonly options?: any;
        readonly multiple?: any;
        readonly className?: any;
        readonly handleOnChange?: any;
        readonly listsAsArrays?: any;
        readonly testID?: any;
    }, {}>;
    fieldSelector: import("@vue/runtime-core").DefineComponent<Readonly<{
        title?: any;
        value?: any;
        disabled?: any;
        options?: any;
        multiple?: any;
        className?: any;
        handleOnChange?: any;
        listsAsArrays?: any;
        testID?: any;
    }>, {
        isOptionGroupArray: (arr: import("../ts").OptionList<import("../ts").Option<string>> | undefined) => arr is import("../ts").OptionGroup<import("../ts").Option<string>>[];
    }, unknown, {
        valueSelector(): {
            onChange: any;
            val: unknown;
        };
        selectElementChangeHandler(): unknown;
        treeOp(): {
            nodeKey: string;
            data: never[];
        };
    }, {
        formatField(options?: never[]): never[];
        isSelected(data: any, value: any): boolean;
    }, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
        title?: any;
        value?: any;
        disabled?: any;
        options?: any;
        multiple?: any;
        className?: any;
        handleOnChange?: any;
        listsAsArrays?: any;
        testID?: any;
    }>>>, {
        readonly title?: any;
        readonly value?: any;
        readonly disabled?: any;
        readonly options?: any;
        readonly multiple?: any;
        readonly className?: any;
        readonly handleOnChange?: any;
        readonly listsAsArrays?: any;
        readonly testID?: any;
    }, {}>;
    valueEditor: import("@vue/runtime-core").DefineComponent<{
        field: StringConstructor;
        operator: {};
        value: {};
        valueSource: {};
        fieldData: {};
        type: {
            type: StringConstructor;
            default: string;
        };
        inputType: {
            type: StringConstructor;
            default: string;
        };
        values: {
            type: ArrayConstructor;
            default: () => never[];
        };
        listsAsArrays: {};
        parseNumbers: {};
        separator: {};
        selectorComponent: {};
        skipHook: {};
        handleOnChange: {};
        className: {};
        path: {};
        level: {};
        title: {};
        disabled: {};
        context: {};
        validation: {};
        testID: {};
        schema: {};
    }, {
        standardClassnames: {
            readonly ruleGroup: "ruleGroup";
            readonly queryBuilder: "queryBuilder";
            readonly header: "ruleGroup-header";
            readonly combinators: "ruleGroup-combinators";
            readonly body: "ruleGroup-body";
            readonly addRule: string;
            readonly addGroup: string;
            readonly cloneRule: string;
            readonly cloneGroup: string;
            readonly removeGroup: string;
            readonly notToggle: "ruleGroup-notToggle";
            readonly rule: "query-builder-rule";
            readonly fields: "rule-fields";
            readonly operators: "rule-operators";
            readonly value: "rule-value";
            readonly removeRule: string;
            readonly clearData: string;
            readonly betweenRules: "betweenRules";
            readonly valid: "queryBuilder-valid";
            readonly invalid: "queryBuilder-invalid";
            readonly dndDragging: "dndDragging";
            readonly dndOver: "dndOver";
            readonly dndCopy: "dndCopy";
            readonly dragHandle: "queryBuilder-dragHandle";
            readonly disabled: "queryBuilder-disabled";
            readonly lockRule: "rule-lock";
            readonly lockGroup: "ruleGroup-lock";
            readonly valueSource: "rule-valueSource";
            readonly valueListItem: "rule-value-list-item";
            readonly branches: "queryBuilder-branches";
            readonly displayOnlyField: "display-only-field";
        };
        getFirstOption: (arr?: import("../ts").OptionList | undefined) => string | null;
        parseNumber: (v: any, { parseNumbers }: import("../utils").ParseNumberOptions) => any;
        modelValue: {
            from: string;
            to: string;
        };
    }, unknown, {
        allProps(): {
            operator: unknown;
            value: unknown;
            handleOnChange: unknown;
            title: unknown;
            className: unknown;
            type: string;
            inputType: string;
            values: unknown[];
            listsAsArrays: unknown;
            parseNumbers: unknown;
            fieldData: unknown;
            disabled: unknown;
            separator: unknown;
            skipHook: unknown;
            testID: unknown;
            SelectorComponent: unknown;
            props: {
                context?: unknown;
                path?: unknown;
                level?: unknown;
                field?: string | undefined;
                valueSource?: unknown;
                schema?: unknown;
                validation?: unknown;
            };
            multiValueHandler: any;
            placeHolderText: any;
            inputTypeCoerced: string;
        };
        show(): boolean;
    }, {
        change(e: any): any;
        change1(i: number): (e: any) => any;
    }, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
        field: StringConstructor;
        operator: {};
        value: {};
        valueSource: {};
        fieldData: {};
        type: {
            type: StringConstructor;
            default: string;
        };
        inputType: {
            type: StringConstructor;
            default: string;
        };
        values: {
            type: ArrayConstructor;
            default: () => never[];
        };
        listsAsArrays: {};
        parseNumbers: {};
        separator: {};
        selectorComponent: {};
        skipHook: {};
        handleOnChange: {};
        className: {};
        path: {};
        level: {};
        title: {};
        disabled: {};
        context: {};
        validation: {};
        testID: {};
        schema: {};
    }>>, {
        type: string;
        values: unknown[];
        inputType: string;
    }, {}>;
    ruleGroup: import("@vue/runtime-core").DefineComponent<Readonly<{
        [x: string]: any;
    }>, {
        TestID: {
            readonly rule: "rule";
            readonly inlineCombinator: "inline-combinator";
            readonly ruleGroup: "rule-group";
            readonly addGroup: "add-group";
            readonly cloneGroup: "clone-group";
            readonly removeGroup: "remove-group";
            readonly cloneRule: "clone-rule";
            readonly addRule: "add-rule";
            readonly combinators: "combinators";
            readonly clearData: "clear-data";
            readonly fields: "fields";
            readonly removeRule: "remove-rule";
            readonly operators: "operators";
            readonly notToggle: "not-toggle";
            readonly valueEditor: "value-editor";
            readonly lockRule: "lock-rule";
            readonly dragHandle: "drag-handle";
            readonly valueSourceSelector: "value-source-selector";
            readonly lockGroup: "lock-group";
        };
    }, unknown, {
        rg(): any;
        subComponentProps(): any;
        controls(): any;
        onlyOne(): boolean;
    }, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
        [x: string]: any;
    }>>>, {
        readonly [x: string]: any;
    }, {}>;
    notToggle: import("@vue/runtime-core").DefineComponent<{
        className: {
            type: StringConstructor;
        };
        handleOnChange: {
            type: FunctionConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        label: {
            type: StringConstructor;
        };
        checked: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        testID: {
            type: StringConstructor;
        };
    }, {
        value: any;
    }, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
        className: {
            type: StringConstructor;
        };
        handleOnChange: {
            type: FunctionConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        label: {
            type: StringConstructor;
        };
        checked: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        testID: {
            type: StringConstructor;
        };
    }>>, {
        title: string;
        disabled: boolean;
        checked: boolean;
    }, {}>;
    lockRuleAction: import("@vue/runtime-core").DefineComponent<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }, {
        t: (this: any, path: any, options?: any) => any;
        vm: any;
        f: (props: any, attrs?: {}) => {};
        a: (attrs: any, filters: any, include: any) => {};
        d: (props: any) => void;
        dp: (props: any) => void;
        gcls: (key: any) => any;
    }, unknown, {
        allProps(): {
            class: string;
            type: string;
            title: any;
            disabled: boolean;
            disabledTranslation: Record<string, any> | undefined;
            testID: string | undefined;
        };
    }, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }>>, {
        title: string;
        disabled: boolean;
        handleOnClick: Function;
    }, {}>;
    rule: import("@vue/runtime-core").DefineComponent<Readonly<{
        [x: string]: any;
    }>, {
        TestID: {
            readonly rule: "rule";
            readonly inlineCombinator: "inline-combinator";
            readonly ruleGroup: "rule-group";
            readonly addGroup: "add-group";
            readonly cloneGroup: "clone-group";
            readonly removeGroup: "remove-group";
            readonly cloneRule: "clone-rule";
            readonly addRule: "add-rule";
            readonly combinators: "combinators";
            readonly clearData: "clear-data";
            readonly fields: "fields";
            readonly removeRule: "remove-rule";
            readonly operators: "operators";
            readonly notToggle: "not-toggle";
            readonly valueEditor: "value-editor";
            readonly lockRule: "lock-rule";
            readonly dragHandle: "drag-handle";
            readonly valueSourceSelector: "value-source-selector";
            readonly lockGroup: "lock-group";
        };
    }, unknown, {
        r(): any;
        RuleComponentProps(): any;
    }, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
        [x: string]: any;
    }>>>, {
        readonly [x: string]: any;
    }, {}>;
    dragHandle: import("@vue/runtime-core").DefineComponent<{
        className: {
            type: StringConstructor;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
        };
        testID: {
            type: StringConstructor;
        };
        dragRef: {
            type: ObjectConstructor;
        };
    }, {
        t: (this: any, path: any, options?: any) => any;
        vm: any;
        f: (props: any, attrs?: {}) => {};
        a: (attrs: any, filters: any, include: any) => {};
        d: (props: any) => void;
        dp: (props: any) => void;
        gcls: (key: any) => any;
    }, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
        className: {
            type: StringConstructor;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
        };
        testID: {
            type: StringConstructor;
        };
        dragRef: {
            type: ObjectConstructor;
        };
    }>>, {}, {}>;
    valueSourceSelector: import("@vue/runtime-core").DefineComponent<Readonly<{
        title?: any;
        value?: any;
        disabled?: any;
        options?: any;
        multiple?: any;
        className?: any;
        handleOnChange?: any;
        listsAsArrays?: any;
        testID?: any;
    }>, {
        isOptionGroupArray: (arr: import("../ts").OptionList<import("../ts").Option<string>> | undefined) => arr is import("../ts").OptionGroup<import("../ts").Option<string>>[];
    }, unknown, {
        valueSelector(): {
            onChange: any;
            val: unknown;
        };
        selectElementChangeHandler(): unknown;
    }, {
        isSelected(data: any, value: any): boolean;
    }, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
        title?: any;
        value?: any;
        disabled?: any;
        options?: any;
        multiple?: any;
        className?: any;
        handleOnChange?: any;
        listsAsArrays?: any;
        testID?: any;
    }>>>, {
        readonly title?: any;
        readonly value?: any;
        readonly disabled?: any;
        readonly options?: any;
        readonly multiple?: any;
        readonly className?: any;
        readonly handleOnChange?: any;
        readonly listsAsArrays?: any;
        readonly testID?: any;
    }, {}>;
    lockGroupAction: import("@vue/runtime-core").DefineComponent<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }, {
        t: (this: any, path: any, options?: any) => any;
        vm: any;
        f: (props: any, attrs?: {}) => {};
        a: (attrs: any, filters: any, include: any) => {};
        d: (props: any) => void;
        dp: (props: any) => void;
        gcls: (key: any) => any;
    }, unknown, {
        allProps(): {
            class: string;
            type: string;
            title: any;
            disabled: boolean;
            disabledTranslation: Record<string, any> | undefined;
            testID: string | undefined;
        };
    }, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
        props: ObjectConstructor;
        className: {
            type: StringConstructor;
        };
        handleOnClick: {
            type: FunctionConstructor;
            default: () => void;
        };
        label: {
            type: StringConstructor;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabledTranslation: {
            type: ObjectConstructor;
        };
        testID: {
            type: StringConstructor;
        };
    }>>, {
        title: string;
        disabled: boolean;
        handleOnClick: Function;
    }, {}>;
};
