import type { RuleProps, RuleType } from '../ts';
export declare const useRule: (props: RuleProps) => {
    classNames: unknown;
    cloneRule: (_event?: any) => void;
    disabled: boolean;
    dndRef: import("../ts").Ref<HTMLDivElement> | null;
    dragMonitorId: string | symbol;
    dragRef: import("../ts").Ref<HTMLSpanElement> | null;
    dropMonitorId: string | symbol;
    fieldData: import("../ts").Field<string, string, string, import("../ts").Option<string>, import("../ts").Option<string>>;
    generateOnChangeHandler: (prop: Exclude<keyof RuleType, 'id' | 'path'>) => (value: any) => void;
    hideValueControls: boolean;
    inputType: string | null;
    operators: import("../ts").OptionList<import("../ts").Operator<string>>;
    outerClassName: any;
    removeRule: (_event?: any) => void;
    clearData: (_event?: any) => void;
    rule: RuleType;
    toggleLockRule: (_event?: any) => void;
    validationResult: boolean | import("../ts").ValidationResult;
    valueEditorSeparator: import("../ts").VueNode;
    valueEditorType: import("../ts").ValueEditorType;
    values: import("../ts").Option<string>[] | import("../ts").OptionGroup<import("../ts").Option<string>>[];
    valueSourceOptions: {
        name: any;
        label: any;
    }[];
    valueSources: import("../ts").ValueSources;
};
