import type { ValueEditorProps } from '../ts';
export type UseValueEditorParams = Pick<ValueEditorProps, 'handleOnChange' | 'inputType' | 'operator' | 'value' | 'listsAsArrays' | 'type' | 'values' | 'parseNumbers' | 'skipHook'>;
/**
 * This Effect trims the value if all of the following are true:
 *  - `inputType` is "number"
 *  - `operator` is _not_ one of ("between", "notBetween", "in", "notIn")
 *  - `value` is an array _or_ the value is a string containing a comma
 *
 * For example, consider the following rule:
 *
 * `{ field: "f1", operator: "between", value: "12,14" }`
 *
 * If its operator changes to "=", the value will be reset to "12" since
 * the "number" input type can't handle arrays or strings with commas.
 *
 * Returns the value as an array and a change handler for series of editors.
 */
export declare const useValueEditor: ({ handleOnChange, inputType, operator, value, listsAsArrays, parseNumbers, values, skipHook }: UseValueEditorParams) => {
    /**
     * Array of values for when the main value represents a list, e.g. when operator
     * is "between" or "in".
     */
    valueAsArray: unknown;
    /**
     * A handler for a series of editors, e.g. when operator is "between".
     * @param {string} val The new value for the editor
     * @param {number} idx The index of the editor
     */
    multiValueHandler: any;
};
