function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  RADIO_GROUP: "RadioGroup"
};
var radioProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  modelValue: {},
  label: {},
  disabled: Boolean,
  name: String,
  border: Boolean,
  size: {
    type: String,
    default: ""
  },
  text: String,
  events: {
    type: Object,
    default: function _default2() {
      return {};
    }
  },
  tabindex: {
    type: String,
    default: "1"
  },
  displayOnly: {
    type: Boolean,
    default: false
  }
});
var Radio = defineComponent({
  name: $prefix + "Radio",
  props: radioProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
Radio.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Radio.install = function(Vue) {
  Vue.component(Radio.name, Radio);
};
Radio.version = version;
export {
  Radio as default
};
