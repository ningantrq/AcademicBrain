function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { $prefix, $props, $setup, hooks } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import { isNull } from "@opentiny/vue-renderless/common/type";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return PcTemplate;
};
var RecycleScroller = {
  name: $prefix + "RecycleScroller",
  props: _extends({}, $props, {
    items: {
      type: Array,
      required: true
    },
    keyField: {
      type: String,
      default: "id"
    },
    direction: {
      type: String,
      default: "vertical",
      validator: function validator(value) {
        return ["vertical", "horizontal"].includes(value);
      }
    },
    listTag: {
      type: String,
      default: "div"
    },
    itemTag: {
      type: String,
      default: "div"
    },
    itemSize: {
      type: Number,
      default: null
    },
    gridItems: {
      type: Number,
      default: void 0
    },
    itemSecondarySize: {
      type: Number,
      default: void 0
    },
    minItemSize: {
      type: [Number, String],
      default: null
    },
    sizeField: {
      type: String,
      default: "size"
    },
    typeField: {
      type: String,
      default: "type"
    },
    buffer: {
      type: Number,
      default: 200
    },
    pageMode: {
      type: Boolean,
      default: false
    },
    prerender: {
      type: Number,
      default: 0
    },
    emitUpdate: {
      type: Boolean,
      default: false
    },
    updateInterval: {
      type: Number,
      default: 0
    },
    skipHover: {
      type: Boolean,
      default: false
    },
    listClass: {
      type: [String, Object, Array],
      default: ""
    },
    itemClass: {
      type: [String, Object, Array],
      default: ""
    },
    itemsLimit: {
      type: Number,
      default: 1e3
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
};
var reactive = hooks.reactive;
var buildInstanceTemporary = function buildInstanceTemporary2(store) {
  var temporary = {};
  temporary.stateId = null;
  temporary.getId = null;
  temporary.updateIdState = function(vm) {
    var id = temporary.getId();
    if (isNull(id)) {
      console.warn("[TINY Error][Mixin IdState] No id found for IdState with idProp");
    }
    if (id !== temporary.stateId) {
      if (!store[id]) {
        temporary.idStateInit(id, vm);
      }
      vm.idState = store[id];
    }
  };
  temporary.idStateInit = function(id, vm) {
    var factory = vm.$options.idState;
    if (typeof factory === "function") {
      var data = factory.call(vm, vm);
      store[id] = data;
      temporary.stateId = id;
      return data;
    } else {
      throw new TypeError("[TINY Error][Mixin IdState] Missing `idState` function on component definition");
    }
  };
  return temporary;
};
function IdState(_ref) {
  var _ref2;
  var idProp = _ref.idProp, stateGetterName = _ref.stateGetterName;
  idProp = idProp || function(vm) {
    return vm.item.id;
  };
  stateGetterName = stateGetterName || "getIdState";
  var store = reactive({});
  return _ref2 = {
    data: function data() {
      return {
        idState: null
      };
    },
    created: function created() {
      var _this = this;
      this.temporary = buildInstanceTemporary(store);
      if (typeof idProp === "function") {
        this.temporary.getId = function() {
          return idProp.call(_this, _this);
        };
      } else {
        this.temporary.getId = function() {
          return _this[idProp];
        };
      }
      this.$watch(this.temporary.getId, {
        handler: function handler(value) {
          var _this2 = this;
          this.$nextTick(function() {
            return _this2.temporary.stateId = value;
          });
        },
        immediate: true
      });
      this.temporary.updateIdState(this);
    },
    beforeUpdate: function beforeUpdate() {
      this.temporary.updateIdState(this);
    }
  }, _ref2[stateGetterName] = function(id) {
    return isNull(id) ? store : store[id] ? store[id] : null;
  }, _ref2;
}
var version = "3.13.0";
RecycleScroller.IdState = IdState;
RecycleScroller.install = function(Vue) {
  Vue.component(RecycleScroller.name, RecycleScroller);
};
RecycleScroller.version = version;
export {
  RecycleScroller as default
};
