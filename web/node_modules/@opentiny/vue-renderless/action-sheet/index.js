import "../chunk-G2ADBYYC.js";
const setSheetStyle = ({ state, props }) => () => {
  if (props.contentPosition) {
    state.sheetMaskStyle = {
      "position": "absolute"
    };
    state.sheetContentStyle = {
      "position": "absolute",
      "max-height": props.height
    };
  } else {
    state.sheetMaskStyle = {
      "position": "fixed"
    };
    state.sheetContentStyle = {
      "position": "fixed",
      "max-height": props.height
    };
  }
  state.contentStyle = props.contentStyle ? props.contentStyle : "";
};
const initScrollMenu = ({ state, nextTick, refs, BScroll }) => () => {
  nextTick(() => {
    const { scrollMenu } = refs;
    if (!scrollMenu) {
      return;
    }
    if (!state.scroll) {
      state.scroll = new BScroll(scrollMenu, {
        probeType: 3,
        tap: "tap"
      });
    } else {
      state.scroll.refresh();
    }
  });
};
const visibleHandle = ({ emit, state }) => () => {
  state.scroll = null;
  emit("update:visible", false);
  emit("close", false);
};
const watchVisible = ({ emit, props, state }) => (value) => {
  state.active = props.modelValue;
  setTimeout(() => {
    value ? state.toggle = true : state.toggle = false;
  }, 0);
  emit("update:visible", value);
};
const menuHandle = ({ emit, state }) => (item) => {
  state.active = item.id;
  state.scroll = null;
  emit("update:visible", false);
  emit("update:modelValue", item.id);
  emit("click", item);
};
const close = ({ emit, vm }) => () => {
  vm.$refs.drawer.close();
  emit("close", false);
};
const hide = (emit) => () => {
  emit("hide", false);
  emit("update:visible", false);
};
const selectOption = ({ emit, props }) => (option) => {
  const { valueField } = props;
  emit("update:visible", false);
  emit("update:modelValue", option[valueField]);
  emit("click", option);
};
const confirm = ({ emit, state }) => () => {
  emit("confirm", state);
  emit("update:visible", false);
};
const actionSelectOption = ({ emit }) => (option, index) => {
  emit("update:visible", false);
  emit("click", option, index);
};
export {
  actionSelectOption,
  close,
  confirm,
  hide,
  initScrollMenu,
  menuHandle,
  selectOption,
  setSheetStyle,
  visibleHandle,
  watchVisible
};
