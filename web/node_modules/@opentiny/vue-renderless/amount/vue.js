import {
  __spreadProps,
  __spreadValues
} from "../chunk-G2ADBYYC.js";
import {
  closePopper,
  popInput,
  save,
  reset,
  inputBlur,
  emitChange,
  inputFocus,
  toggleVisible,
  addOutSideEvent,
  handelClick,
  initText,
  onInput,
  getPrecision,
  getDecimal,
  innerFormat,
  getAmountText,
  initService,
  watchModelValue,
  watchCurrency,
  onInputPreprocess,
  initAmount
} from "./index";
const api = [
  "t",
  "popInput",
  "state",
  "editorState",
  "save",
  "reset",
  "inputBlur",
  "init",
  "toggleVisible",
  "inputFocus",
  "closePopper",
  "onInput",
  "getAmountText"
];
const initState = ({ reactive, computed, props, $service, editorState }) => {
  const state = reactive({
    visible: false,
    amount: props.modelValue || "",
    currency: props.currency,
    date: props.date,
    overMaxLen: false,
    isFocus: false,
    lock: false,
    amountText: "",
    lastInput: props.modelValue,
    lastCurrency: props.currency,
    lastDate: props.date,
    format: computed(() => __spreadProps(__spreadValues({}, getPrecision({ service: $service, props, currency: editorState.currency })), {
      prefix: state.currency
    }))
  });
  return state;
};
const initEditorState = ({ reactive, props }) => reactive({
  amount: "",
  date: "",
  currency: props.currency,
  lastInput: props.modelValue
});
const initApi = ({ api: api2, t, editorState, props, state, emit, refs }) => {
  Object.assign(api2, {
    state,
    t,
    editorState,
    getDecimal: getDecimal(props),
    innerFormat: innerFormat({ state, props }),
    getAmountText: getAmountText({ state, props }),
    initAmount: initAmount(props),
    onInputPreprocess: onInputPreprocess(props),
    onInput: onInput({ state, props, api: api2 }),
    initText: initText({ state }),
    inputFocus: inputFocus({ state, props }),
    inputBlur: inputBlur({ api: api2, props, state }),
    closePopper: closePopper(state),
    emitChange: emitChange({ emit, state }),
    popInput: popInput({ editorState, api: api2, state, props }),
    save: save({ api: api2, state, editorState, props }),
    reset: reset({ api: api2, state, editorState }),
    handelClick: handelClick({ api: api2, refs }),
    addOutSideEvent: addOutSideEvent(api2),
    watchModelValue: watchModelValue({ api: api2, state }),
    watchCurrency: watchCurrency({ api: api2, state, editorState }),
    toggleVisible: toggleVisible({ api: api2, props, state, editorState })
  });
};
const initWatch = ({ watch, props, state, api: api2 }) => {
  watch(() => props.modelValue, api2.watchModelValue, { immediate: true });
  watch(() => props.currency, api2.watchCurrency, { immediate: true });
  watch(
    () => props.date,
    (value) => {
      state.date = value;
      state.lastDate = value;
    },
    { immediate: true }
  );
  watch(
    () => props.rounding,
    (value) => {
      state.format.rounding = value;
    }
  );
  watch(
    () => props.digits,
    (value) => {
      state.format.fraction = value;
    }
  );
};
const renderless = (props, { onUnmounted, computed, reactive, watch }, { t, emit, refs, service }) => {
  const api2 = {};
  const $service = initService(service);
  const editorState = initEditorState({ reactive, props });
  const state = initState({ reactive, computed, props, $service, editorState });
  initApi({ api: api2, t, editorState, props, state, emit, refs });
  api2.getDecimal(0);
  initWatch({ watch, props, state, api: api2 });
  onUnmounted(() => api2.addOutSideEvent(false));
  return api2;
};
export {
  api,
  renderless
};
