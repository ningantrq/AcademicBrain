import "../chunk-G2ADBYYC.js";
import {
  init,
  handleTouchstart,
  handleTouchend,
  handleTouchmove,
  watchActionSheetVisible,
  calcSelector,
  close,
  confirm,
  styleOpt,
  statusOpt,
  computedConfirmDisabled,
  parseType
} from "./index";
import throttle from "../common/deps/throttle";
const api = [
  "state",
  "handleTouchstart",
  "handleTouchend",
  "throttledHandleTouchmove",
  "close",
  "confirm",
  "styleOpt",
  "statusOpt"
];
const renderless = (props, { reactive, computed, onBeforeMount, watch }, { emit, vm }) => {
  const state = reactive({
    actionSheetVisible: false,
    visibleOptionCount: 5,
    selectorCount: 1,
    selector0: {},
    selector1: {},
    selector2: {},
    confirmDisabled: computed(() => api2.computedConfirmDisabled())
  });
  const api2 = {
    state,
    styleOpt,
    statusOpt,
    handleTouchstart: handleTouchstart(state),
    handleTouchend: handleTouchend(state),
    watchActionSheetVisible: watchActionSheetVisible({ emit, state, vm }),
    close: close(state),
    computedConfirmDisabled: computedConfirmDisabled(state),
    parseType: parseType(props)
  };
  Object.assign(api2, {
    init: init({ api: api2, props, state }),
    throttledHandleTouchmove: throttle(20, handleTouchmove({ api: api2, props, state })),
    calcSelector: calcSelector(api2),
    confirm: confirm({ api: api2, emit, props, state, vm })
  });
  onBeforeMount(() => {
    api2.init();
  });
  watch(
    () => props.visible,
    (value) => state.actionSheetVisible = value
  );
  watch(
    () => props.modelValue,
    (value) => api2.init(value)
  );
  watch(
    () => state.actionSheetVisible,
    (value) => api2.watchActionSheetVisible(value)
  );
  return api2;
};
export {
  api,
  renderless
};
