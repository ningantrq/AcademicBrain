import "../chunk-G2ADBYYC.js";
import Color from "./utils/color";
import { onConfirm, onCancel, onHueUpdate, onSVUpdate, onColorUpdate } from "./index";
const api = [
  "state",
  "changeVisible",
  "cursor",
  "onColorUpdate",
  "onHueUpdate",
  "onSVUpdate",
  "onConfirm",
  "onCancel",
  "onAlphaUpdate",
  "alpha"
];
const renderless = (props, context, { emit }) => {
  var _a, _b, _c, _d, _e, _f, _g;
  const { modelValue, visible, predefine, size, history } = context.toRefs(props);
  const pre = context.ref((_a = modelValue.value) != null ? _a : "transparent");
  const triggerBg = context.ref((_b = pre.value) != null ? _b : "transparent");
  const tmpColor = new Color((_c = triggerBg.value) != null ? _c : "transparent");
  const hex = context.ref((_d = modelValue.value) != null ? _d : "transparent");
  const isShow = context.ref((_e = visible == null ? void 0 : visible.value) != null ? _e : false);
  const changeVisible = (state2) => {
    isShow.value = state2;
  };
  const stack = context.ref([...(_f = history == null ? void 0 : history.value) != null ? _f : []]);
  const predefineStack = context.ref([...(_g = predefine == null ? void 0 : predefine.value) != null ? _g : []]);
  const state = context.reactive({
    isShow,
    hex,
    triggerBg,
    defaultValue: modelValue,
    stack,
    predefineStack,
    size: size != null ? size : ""
  });
  const api2 = {
    state,
    changeVisible,
    onCancel: onCancel(tmpColor, triggerBg, isShow, pre, emit),
    onConfirm: onConfirm(triggerBg, pre, hex, isShow, emit),
    onHueUpdate: onHueUpdate(tmpColor, triggerBg),
    onSVUpdate: onSVUpdate(tmpColor, triggerBg),
    onColorUpdate: onColorUpdate(triggerBg)
  };
  context.watch(
    predefine,
    (newPredefine) => {
      predefineStack.value = [...newPredefine];
    },
    { deep: true }
  );
  context.watch(
    history,
    (newHistory) => {
      stack.value = [...newHistory];
    },
    { deep: true }
  );
  context.watch(modelValue, (newValue) => {
    pre.value = newValue;
    hex.value = newValue;
    state.hex = newValue;
    state.triggerBg = newValue;
  });
  context.watch(visible, (visible2) => {
    isShow.value = visible2;
  });
  return api2;
};
export {
  api,
  renderless
};
