import "../../chunk-G2ADBYYC.js";
import { draggable } from "../utils/use-drag";
import { onDrag, updateThumb } from ".";
const api = ["state", "color", "slider", "alphaWrapper", "alphaThumb"];
const renderless = (props, context, { emit }) => {
  const color = props.color;
  const [rr, gg, bb] = color.getRGB();
  const r = context.ref(rr);
  const g = context.ref(gg);
  const b = context.ref(bb);
  const slider = context.ref();
  const alphaWrapper = context.ref();
  const alphaThumb = context.ref();
  const alpha = context.ref(color.get("a"));
  context.watch(
    () => props.color,
    () => {
      const [rr2, gg2, bb2] = color.getRGB();
      r.value = rr2;
      g.value = gg2;
      b.value = bb2;
      alpha.value = color.get("a");
    },
    { deep: true }
  );
  context.watch(alpha, (newAlpha) => {
    updateThumb(newAlpha, alphaThumb.value, alphaWrapper.value);
    emit("alpha-update", alpha.value);
  });
  const background = context.computed(() => {
    return `linear-gradient(to right, rgba(${r.value}, ${g.value}, ${b.value}, 0) 0%, rgba(${r.value}, ${g.value}, ${b.value}, 1) 100%)`;
  });
  const state = context.reactive({
    background
  });
  const api2 = {
    state,
    slider,
    alphaWrapper,
    alphaThumb
  };
  context.onMounted(() => {
    updateThumb(alpha.value, alphaThumb.value, slider.value);
    draggable(slider.value, {
      drag(event) {
        onDrag(event, slider, alphaThumb, alpha);
      },
      start(event) {
        onDrag(event, slider, alphaThumb, alpha);
      }
    });
  });
  return api2;
};
export {
  api,
  renderless
};
