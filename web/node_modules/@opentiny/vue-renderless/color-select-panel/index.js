import {
  __spreadProps,
  __spreadValues
} from "../chunk-G2ADBYYC.js";
import Color from "./utils/color";
const onConfirm = (hex, pre, res, emit, stack, enableHistory, color) => {
  return () => {
    pre.value = hex.value;
    hex.value = res.value;
    if (enableHistory) {
      const itemIdx = Math.max(
        stack.value.indexOf(res.value),
        stack.value.indexOf(res.value.toLowerCase()),
        stack.value.indexOf(res.value.toUpperCase())
      );
      if (itemIdx !== -1) {
        stack.value.splice(itemIdx, 1);
      }
      stack.value.unshift(res.value);
    }
    color.value.setPrevH(color.value.get("h"));
    emit("confirm", res.value);
  };
};
const onCancel = (res, pre, emit, isShow, hex, color) => {
  return () => {
    if (isShow.value) {
      res.value = pre.value;
      hex.value = pre.value;
      const tmpColor = new Color(pre.value);
      color.value.set(__spreadProps(__spreadValues({}, tmpColor.getHSV()), {
        h: color.value.get("preH")
      }));
      emit("cancel", color);
    }
  };
};
const onColorUpdate = (color, res) => {
  res.value = color.value.getHex();
};
const onHSVUpdate = (color, res, hex, emit) => {
  return {
    onHueUpdate: (hue) => {
      color.value.set({ h: hue });
      onColorUpdate(color, res);
      hex.value = color.value.getHex();
      emit("hue-update", hue);
    },
    onSVUpdate: ({ s, v }) => {
      hex.value = color.value.getHex();
      onColorUpdate(color, res);
      emit("sv-update", { s, v });
    }
  };
};
const onAlphaUpdate = (color, res) => {
  return {
    update: (alpha) => {
      color.value.set({ a: alpha });
      onColorUpdate(color, res);
    }
  };
};
const handleHistoryClick = (hex, res, color, emit) => {
  return (history) => {
    hex.value = history;
    res.value = history;
    const tmpColor = new Color(history);
    color.value.set(__spreadValues({}, tmpColor.getHSV()));
    emit("color-update", color);
  };
};
const handlePredefineClick = (hex, res, color, emit) => {
  return (selectedColor) => {
    hex.value = selectedColor;
    res.value = selectedColor;
    const tmpColor = new Color(selectedColor);
    color.value.set(__spreadValues({}, tmpColor.getHSV()));
    emit("color-update", color);
  };
};
export {
  handleHistoryClick,
  handlePredefineClick,
  onAlphaUpdate,
  onCancel,
  onColorUpdate,
  onConfirm,
  onHSVUpdate
};
