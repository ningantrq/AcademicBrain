import "../chunk-G2ADBYYC.js";
import Color from "./utils/color";
import { onConfirm, onCancel, onHSVUpdate, onAlphaUpdate, handleHistoryClick, handlePredefineClick } from ".";
const api = [
  "state",
  "changeVisible",
  "cursor",
  "onColorUpdate",
  "onHueUpdate",
  "onSVUpdate",
  "onConfirm",
  "onCancel",
  "onAlphaUpdate",
  "onHistoryClick",
  "onPredefineColorClick"
];
const renderless = (props, context, { emit }) => {
  var _a, _b, _c, _d, _e, _f;
  const { modelValue, visible, history, predefine } = context.toRefs(props);
  const hex = context.ref((_a = modelValue == null ? void 0 : modelValue.value) != null ? _a : "transparent");
  const res = context.ref((_b = modelValue == null ? void 0 : modelValue.value) != null ? _b : "transparent");
  const pre = context.ref(res.value);
  const triggerBg = context.ref((_c = modelValue == null ? void 0 : modelValue.value) != null ? _c : "transparent");
  const isShow = context.ref((_d = visible == null ? void 0 : visible.value) != null ? _d : false);
  const cursor = context.ref();
  const stack = context.ref([...(_e = history == null ? void 0 : history.value) != null ? _e : []]);
  const predefineStack = context.ref([...(_f = predefine == null ? void 0 : predefine.value) != null ? _f : []]);
  const enableHistory = history == null ? void 0 : history.value;
  const enablePredefineColor = predefine == null ? void 0 : predefine.value;
  const changeVisible = (state2) => {
    isShow.value = state2;
  };
  const color = context.ref(new Color(hex.value, props.alpha));
  const state = context.reactive({
    isShow,
    hex,
    color,
    triggerBg,
    defaultValue: modelValue,
    res,
    stack,
    predefineStack,
    enableHistory,
    enablePredefineColor
  });
  context.watch(
    predefine,
    (newPredefine) => {
      predefineStack.value = [...newPredefine];
    },
    { deep: true }
  );
  context.watch(
    history,
    (newHistory) => {
      stack.value = [...newHistory];
    },
    { deep: true }
  );
  context.watch(
    state,
    () => {
      state.color = state.color;
    },
    { deep: true }
  );
  context.watch(modelValue, (newValue) => {
    pre.value = res.value;
    hex.value = newValue;
    res.value = newValue;
    color.value.reset(newValue);
    state.color.reset(newValue);
  });
  context.watch(visible, (visible2) => {
    isShow.value = visible2;
  });
  const { onHueUpdate, onSVUpdate } = onHSVUpdate(color, res, hex, emit);
  const { update } = onAlphaUpdate(color, res);
  const api2 = {
    state,
    changeVisible,
    onHueUpdate,
    onSVUpdate,
    onConfirm: onConfirm(hex, pre, res, emit, stack, enableHistory, color),
    onCancel: onCancel(res, pre, emit, isShow, hex, color),
    onAlphaUpdate: update,
    onHistoryClick: handleHistoryClick(hex, res, color, emit),
    onPredefineColorClick: handlePredefineClick(hex, res, color, emit),
    cursor
  };
  return api2;
};
export {
  api,
  renderless
};
