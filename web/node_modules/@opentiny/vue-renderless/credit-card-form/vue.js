import "../chunk-G2ADBYYC.js";
import {
  generateMonthValue,
  changeName,
  changeNumber,
  changeMonth,
  changeYear,
  changeCvv,
  invaildCard,
  blurCardNumber,
  maskCardNumber,
  unMaskCardNumber,
  focusCardNumber,
  toggleMask,
  handleSubmit
} from "./index";
const api = [
  "state",
  "generateMonthValue",
  "changeName",
  "changeNumber",
  "changeMonth",
  "changeYear",
  "changeCvv",
  "invaildCard",
  "blurCardNumber",
  "maskCardNumber",
  "unMaskCardNumber",
  "focusCardNumber",
  "toggleMask",
  "handleSubmit"
];
const initState = ({ reactive, props, computed }) => {
  const state = reactive({
    fields: {
      cardCvv: "v-card-cvv",
      cardName: "v-card-name",
      cardYear: "v-card-year",
      cardMonth: "v-card-month",
      cardNumber: "v-card-number"
    },
    minCardYear: (/* @__PURE__ */ new Date()).getFullYear(),
    isCardNumberMasked: true,
    mainCardNumber: props.formData.cardNumber,
    cardNumberMaxLength: 19,
    cardMonth: props.formData.cardMonth,
    cardYear: props.formData.cardYear,
    formData: props.formData,
    minCardMonth: computed(() => props.formData.cardYear === state.minCardYear ? (/* @__PURE__ */ new Date()).getMonth() + 1 : 1)
  });
  return state;
};
const initApi = ({ api: api2, state, emit, props }) => {
  Object.assign(api2, {
    state,
    generateMonthValue,
    changeCvv: changeCvv({ emit, state }),
    changeYear: changeYear({ emit, state }),
    changeName: changeName({ emit, state }),
    invaildCard: invaildCard(props),
    changeMonth: changeMonth({ emit, state }),
    changeNumber: changeNumber({ emit, state }),
    maskCardNumber: maskCardNumber({ props, state }),
    unMaskCardNumber: unMaskCardNumber({ props, state }),
    toggleMask: toggleMask({ api: api2, state }),
    handleSubmit: handleSubmit({ api: api2, emit, props, state }),
    blurCardNumber: blurCardNumber({ api: api2, state }),
    focusCardNumber: focusCardNumber(api2)
  });
};
const initWatch = ({ watch, state, props, emit }) => {
  watch(
    () => state.cardYear,
    (value) => {
      state.formData.cardYear = value;
      emit("update:formData", state.formData);
    }
  );
  watch(
    () => state.formData.cardNumber,
    () => emit("update:formData", state.formData)
  );
  watch(
    () => state.formData.cardName,
    () => emit("update:formData", state.formData)
  );
  watch(
    () => state.formData.cardCvv,
    () => emit("update:formData", state.formData)
  );
  watch(
    () => state.cardMonth,
    (value) => {
      state.formData.cardMonth = value;
      emit("update:formData", state.formData);
    }
  );
  watch(
    () => props.formData.cardYear,
    () => {
      if (props.formData.cardMonth < state.minCardMonth) {
        state.cardMonth = "";
      }
    },
    { immediate: true }
  );
};
const renderless = (props, { computed, onMounted, reactive, watch }, { emit }) => {
  const api2 = {};
  const state = initState({ reactive, props, computed });
  initApi({ api: api2, state, emit, props });
  onMounted(api2.maskCardNumber);
  initWatch({ watch, state, props, emit });
  return api2;
};
export {
  api,
  renderless
};
