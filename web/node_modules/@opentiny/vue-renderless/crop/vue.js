import "../chunk-G2ADBYYC.js";
import {
  watchImageSrc,
  shortcutKeys,
  watchVisible,
  clear,
  replace,
  computedCropImages,
  watchAlt,
  getCroppedCanvas,
  setCanvasData,
  setDragMode,
  setAspectRatio,
  getImageData,
  getCanvasData,
  scale,
  scaleY,
  getContainerData,
  scaleX,
  destroy,
  disable,
  enable,
  closeCropArea,
  closeCrop,
  createCrop,
  setImage,
  cropImage,
  getCropBoxData,
  getData,
  move,
  reset,
  rotate,
  setCropBoxData,
  setData,
  showFileChooser,
  zoom
} from "./index";
const api = [
  "state",
  "clear",
  "replace",
  "getCroppedCanvas",
  "setCanvasData",
  "setDragMode",
  "setAspectRatio",
  "getCanvasData",
  "getImageData",
  "getContainerData",
  "scaleY",
  "scale",
  "scaleX",
  "destroy",
  "enable",
  "closeCropArea",
  "disable",
  "closeCrop",
  "getCropBoxData",
  "getData",
  "move",
  "reset",
  "rotate",
  "setCropBoxData",
  "setData",
  "showFileChooser",
  "setImage",
  "cropImage",
  "zoom"
];
const initRenderIcon = (api2) => {
  const renderIcon = [
    {
      method: () => api2.showFileChooser(),
      icon: "IconNew"
    },
    {
      method: () => api2.zoom(0.1),
      icon: "IconZoomIn"
    },
    {
      method: () => api2.zoom(-0.1),
      icon: "IconZoomOut"
    },
    {
      method: () => api2.rotate(-45),
      icon: "IconRepeat"
    },
    {
      method: () => api2.rotate(45),
      icon: "IconRefres"
    },
    {
      method: () => api2.closeCropArea(),
      icon: "IconCrop"
    },
    {
      method: () => api2.reset(),
      icon: "IconConmentRefresh"
    },
    {
      method: () => api2.cropImage(),
      icon: "IconYes"
    },
    {
      method: () => api2.closeCrop(),
      icon: "IconClose"
    }
  ];
  return renderIcon;
};
const initState = ({ reactive, props, computed, api: api2 }) => {
  const state = reactive({
    src: props.src,
    cropImg: "",
    cropper: "",
    alt: props.alt,
    data: null,
    cropvisible: props.cropvisible,
    renderIcon: initRenderIcon(api2),
    previewShow: props.previewShow,
    cropImages: computed(() => api2.computedCropImages())
  });
  return state;
};
const initApi = ({ api: api2, state, emit, refs, props, constants, t }) => {
  Object.assign(api2, {
    state,
    zoom: zoom(state),
    move: move(state),
    clear: clear(state),
    reset: reset(state),
    scale: scale(state),
    rotate: rotate(state),
    enable: enable(state),
    scaleX: scaleX(state),
    scaleY: scaleY(state),
    replace: replace(state),
    setData: setData(state),
    getData: getData(state),
    disable: disable(state),
    destroy: destroy(state),
    watchAlt: watchAlt(state),
    setDragMode: setDragMode(state),
    getImageData: getImageData(state),
    watchImageSrc: watchImageSrc(state),
    setCanvasData: setCanvasData(state),
    getCanvasData: getCanvasData(state),
    closeCrop: closeCrop({ emit, state }),
    setCropBoxData: setCropBoxData(state),
    setAspectRatio: setAspectRatio(state),
    getCropBoxData: getCropBoxData(state),
    showFileChooser: showFileChooser(refs),
    getCroppedCanvas: getCroppedCanvas(state),
    getContainerData: getContainerData(state),
    createCrop: createCrop({ emit, props, refs, state }),
    computedCropImages: computedCropImages({ constants, t }),
    shortcutKeys: shortcutKeys(api2),
    closeCropArea: closeCropArea(api2),
    setImage: setImage({ api: api2, state, props }),
    cropImage: cropImage({ api: api2, emit, props, state }),
    watchVisible: watchVisible({ api: api2, state })
  });
};
const initWatch = ({ watch, props, api: api2 }) => {
  watch(() => props.cropvisible, api2.watchVisible);
  watch(() => props.src, api2.watchImageSrc, { immediate: true });
  watch(() => props.alt, api2.watchAlt, { immediate: true });
};
const renderless = (props, { computed, onMounted, reactive, watch }, { t, emit, refs, constants }) => {
  const api2 = {};
  const state = initState({ reactive, props, computed, api: api2 });
  initApi({ api: api2, state, emit, refs, props, constants, t });
  onMounted(api2.createCrop);
  initWatch({ watch, props, api: api2 });
  return api2;
};
export {
  api,
  renderless
};
