import "../chunk-G2ADBYYC.js";
import {
  close,
  watchVisible,
  watchToggle,
  confirm,
  mousedown,
  mouseup,
  mousemove,
  addDragEvent,
  removeDragEvent,
  showScrollbar,
  hideScrollbar,
  watchVisibleNotImmediate
} from "./index";
const api = ["state", "close", "confirm"];
const renderless = (props, { reactive, watch, onMounted, onBeforeUnmount, computed }, { emit, vm, mode, constants }) => {
  const lockScrollClass = constants.SCROLL_LOCK_CLASS(mode);
  const api2 = {};
  const state = reactive({
    toggle: false,
    width: 0,
    dragEvent: { x: 0, isDrag: false, offsetWidth: 0 },
    computedWidth: computed(() => state.width ? state.width + "px" : props.width)
  });
  Object.assign(api2, {
    state,
    confirm: confirm({ state, emit }),
    close: close({ emit, state }),
    mousedown: mousedown({ state, vm }),
    mousemove: mousemove({ state, props }),
    mouseup: mouseup({ state }),
    addDragEvent: addDragEvent({ api: api2, vm }),
    removeDragEvent: removeDragEvent({ api: api2, vm }),
    watchVisible: watchVisible({ state }),
    watchToggle: watchToggle({ emit }),
    showScrollbar: showScrollbar(lockScrollClass),
    hideScrollbar: hideScrollbar(lockScrollClass),
    watchVisibleNotImmediate: watchVisibleNotImmediate({ api: api2, props })
  });
  onMounted(() => {
    props.dragable && api2.addDragEvent();
    if (props.lockScroll && props.visible) {
      api2.showScrollbar();
    }
  });
  onBeforeUnmount(() => {
    props.dragable && api2.removeDragEvent();
    props.lockScroll && api2.hideScrollbar();
  });
  watch(() => props.visible, api2.watchVisible, { immediate: true });
  watch(() => state.toggle, api2.watchToggle);
  watch(
    () => props.width,
    () => state.width = 0
  );
  return api2;
};
export {
  api,
  renderless
};
