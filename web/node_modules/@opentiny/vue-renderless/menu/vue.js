import "../chunk-G2ADBYYC.js";
import {
  setIsCurrent,
  filterNodes,
  getExpandedKeysPath,
  getActivedKeysPath,
  setNodeHidden,
  setAllNodeVisible,
  filterInput
} from "./index";
import debounce from "../common/deps/debounce";
const api = ["state", "setIsCurrent", "filterNodes", "filterInput"];
const renderless = (props, { reactive, watch, onMounted, computed }, { vm, emit, nextTick }) => {
  const api2 = {};
  const state = reactive({
    isEmpty: computed(() => props.data.length !== 0 && state.filterValue && state.filterData.length === 0),
    activedNodeId: null,
    filterCheckedId: null,
    activedKeys: props.activedKeys,
    expandedKeysPath: [],
    activedKeysPath: [],
    filterText: "",
    filterValue: "",
    currentPaths: [],
    filterData: [],
    data: props.data
  });
  Object.assign(api2, {
    state,
    setIsCurrent: setIsCurrent({ props, vm, state, emit, nextTick }),
    filterNodes: debounce(100, filterNodes({ vm, state, api: api2, nextTick })),
    setNodeHidden: setNodeHidden({ props, vm, state }),
    getActivedKeysPath: getActivedKeysPath({ state }),
    getExpandedKeysPath: getExpandedKeysPath({ state }),
    setAllNodeVisible: setAllNodeVisible({ vm, state }),
    filterInput: filterInput({ state })
  });
  watch(
    () => props.expandAll,
    () => {
      props.expandAll && api2.setAllNodeVisible();
    },
    { immediate: true }
  );
  watch(
    () => state.filterValue,
    () => {
      api2.filterNodes(state.filterValue);
    }
  );
  watch(
    () => props.expandedKeys,
    () => {
      if (props.expandedKeys && props.expandedKeys.length) {
        api2.getExpandedKeysPath(props.expandedKeys);
      }
    },
    { deep: true, immediate: true }
  );
  watch(
    () => props.activedKeys,
    () => {
      state.activedKeys = props.activedKeys;
      api2.getActivedKeysPath(props.activedKeys);
    },
    { immediate: true }
  );
  watch(
    () => props.data,
    () => {
      state.data = props.data;
    },
    { deep: true, immediate: true }
  );
  onMounted(() => {
    vm.$on("node-clicked", (param) => {
      api2.setNodeHidden(param.id);
      vm.$emit("node-click", param);
    });
    vm.$on("node-changed", (param) => {
      vm.$emit("current-change", param);
      api2.setIsCurrent(state.data, param);
    });
  });
  return api2;
};
export {
  api,
  renderless
};
