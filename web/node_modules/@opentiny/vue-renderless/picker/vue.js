import "../chunk-G2ADBYYC.js";
import {
  getPanel,
  getType,
  watchIsRange,
  parseAsFormatAndType,
  watchPickerVisible,
  getValueEmpty,
  getMode,
  displayValue,
  typeValueResolveMap,
  formatAsFormatAndType,
  dateFormatter,
  dateParser,
  rangeFormatter,
  rangeParser,
  parsedValue,
  firstInputId,
  secondInputId,
  focus,
  blur,
  parseValue,
  formatToValue,
  parseString,
  formatToString,
  handleMouseEnter,
  handleChange,
  handleStartInput,
  handleEndInput,
  handleStartChange,
  handleEndChange,
  handleClose,
  handleFocus,
  handleKeydown,
  hidePicker,
  showPicker,
  emitInput,
  isValidValue,
  emitChange,
  mountPicker,
  updateOptions,
  handleClickIcon,
  handlePick,
  handleSelectRange,
  getTimezone,
  getValueFormat,
  watchModelValue,
  computedFormat,
  computedTriggerClass,
  computedHaveTrigger,
  initPopper,
  initGlobalTimezone,
  emitDbTime,
  handleEnterDisplayOnlyContent,
  handleEnterPickerlabel,
  setInputPaddingLeft
} from "./index";
import { DATEPICKER } from "../common";
const api = [
  "state",
  "btnClick",
  "handleEndChange",
  "handleEndInput",
  "focus",
  "handleFocus",
  "handleStartChange",
  "handleStartInput",
  "handleKeydown",
  "handleMouseEnter",
  "handleClickIcon",
  "handleMouseEnter",
  "handleChange",
  "handleClose",
  "handlePick",
  "handleSelectRange",
  "handleSelectChange",
  "popperElm",
  "handleEnterDisplayOnlyContent",
  "handleEnterPickerlabel"
];
const initState = ({ api: api2, reactive, vm, computed, props, utils, parent }) => {
  const state = reactive({
    historyValue: [],
    historyInput: [],
    historyUserInput: [],
    historyUserValue: [],
    startStatus: false,
    endStatus: false,
    date: null,
    pickerVisible: false,
    showClose: false,
    userInput: null,
    valueOnOpen: null,
    popperElm: null,
    unwatchPickerOptions: null,
    ranged: computed(() => state.type.includes(DATEPICKER.Range)),
    reference: computed(() => vm.$refs.reference.$el || vm.$refs.reference),
    formDisabled: computed(() => (parent.tinyForm || {}).disabled),
    refInput: computed(() => state.reference ? [].slice.call(state.reference.querySelectorAll("input")) : []),
    valueIsEmpty: computed(() => api2.getValueEmpty()),
    triggerClass: computed(() => api2.computedTriggerClass()),
    selectionMode: computed(() => api2.getMode()),
    haveTrigger: computed(() => api2.computedHaveTrigger()),
    displayValue: computed(() => api2.displayValue()),
    parsedValue: computed(() => api2.parsedValue()),
    pickerSize: computed(() => props.size),
    pickerDisabled: computed(() => props.disabled || state.formDisabled || state.isDisplayOnly),
    firstInputId: computed(() => api2.firstInputId()),
    secondInputId: computed(() => api2.secondInputId()),
    type: computed(() => api2.getType()),
    timezone: computed(() => api2.getTimezone()),
    valueFormat: computed(() => getValueFormat({ props, utils })),
    format: computed(() => api2.computedFormat()),
    labelTooltip: "",
    displayOnlyTooltip: "",
    isDisplayOnly: computed(() => props.displayOnly || (parent.tinyForm || {}).displayOnly)
  });
  return state;
};
const initApi = ({ api: api2, props, hooks, state, vnode, others, utils }) => {
  const { t, emit, dispatch, nextTick, vm } = vnode;
  const { TimePanel, TimeRangePanel } = others;
  const { destroyPopper, popperElm, updatePopper, doDestroy } = initPopper({ props, hooks, vnode });
  state.popperElm = popperElm;
  state.picker = null;
  Object.assign(api2, {
    destroyPopper,
    emitDbTime: emitDbTime({ emit, state, t }),
    hidePicker: hidePicker({ state, doDestroy }),
    handleSelectChange: ({ tz, date }) => emit("select-change", { tz, date }),
    getPanel: getPanel(others),
    handleFocus: handleFocus({ emit, vm, state }),
    getTimezone: getTimezone({ props, utils }),
    emitChange: emitChange({ api: api2, dispatch, emit, props, state }),
    parsedValue: parsedValue({ api: api2, props, state, t }),
    parseAsFormatAndType: parseAsFormatAndType({ api: api2 }),
    typeValueResolveMap: typeValueResolveMap({ api: api2, t }),
    updateOptions: updateOptions({ api: api2, props, state }),
    focus: focus({ api: api2, props, vm }),
    handleChange: handleChange({ api: api2, state }),
    isValidValue: isValidValue({ api: api2, state }),
    emitInput: emitInput({ api: api2, emit, props, state }),
    handleKeydown: handleKeydown({ api: api2, state }),
    handleEndChange: handleEndChange({ api: api2, state }),
    handleStartChange: handleStartChange({ api: api2, state }),
    handleClickIcon: handleClickIcon({ api: api2, props, state }),
    showPicker: showPicker({ api: api2, nextTick, updatePopper, state }),
    formatToValue: formatToValue({ api: api2, props, state }),
    formatAsFormatAndType: formatAsFormatAndType({ api: api2 }),
    parseString: parseString({ api: api2, state }),
    handleClose: handleClose({ api: api2, props, state }),
    displayValue: displayValue({ api: api2, props, state }),
    handlePick: handlePick({ api: api2, state }),
    watchPickerVisible: watchPickerVisible({ api: api2, vm, dispatch, emit, props, state }),
    formatToString: formatToString({ api: api2, state }),
    watchIsRange: watchIsRange({ api: api2, state, TimePanel, TimeRangePanel }),
    mountPicker: mountPicker({ api: api2, vm, props, state, updatePopper }),
    watchModelValue: watchModelValue({ api: api2, props, state, dispatch }),
    computedFormat: computedFormat({ props, utils }),
    computedTriggerClass: computedTriggerClass({ props, state }),
    computedHaveTrigger: computedHaveTrigger({ props }),
    setInputPaddingLeft: setInputPaddingLeft({ props, state, vm, nextTick }),
    t,
    state,
    blur: blur(state),
    getMode: getMode({ state }),
    getType: getType({ props }),
    dateParser: dateParser({ t }),
    rangeParser: rangeParser(api2),
    rangeFormatter: rangeFormatter(api2),
    dateFormatter: dateFormatter({ t }),
    getValueEmpty: getValueEmpty(props),
    handleEndInput: handleEndInput(state),
    handleStartInput: handleStartInput(state),
    firstInputId: firstInputId({ props, state }),
    secondInputId: secondInputId({ props, state }),
    handleMouseEnter: handleMouseEnter({ props, state }),
    initGlobalTimezone: initGlobalTimezone({ api: api2, state, props }),
    parseValue: parseValue({ api: api2, props, state }),
    handleSelectRange: handleSelectRange(state),
    handleEnterPickerlabel: handleEnterPickerlabel({ state, props }),
    handleEnterDisplayOnlyContent: handleEnterDisplayOnlyContent({ state, t })
  });
};
const initWatch = ({ api: api2, state, props, watch, markRaw }) => {
  watch(
    () => state.type,
    (type) => state.panel = markRaw(api2.getPanel(type)),
    { immediate: true }
  );
  watch(() => state.pickerVisible, api2.watchPickerVisible);
  watch(
    () => props.defaultValue,
    (value) => state.picker && (state.picker.state.defaultValue = value)
  );
  watch(
    () => state.parsedValue,
    (value) => state.picker && (state.picker.state.value = value),
    { immediate: true }
  );
  watch(() => props.isRange, api2.watchIsRange);
  watch(() => props.modelValue, api2.watchModelValue);
  watch(() => props.pickerOptions, api2.updateOptions, { deep: true });
  watch(() => props.label, api2.setInputPaddingLeft);
};
const renderless = (props, hooks, vnode, others) => {
  const api2 = {};
  const { reactive, computed, watch, onBeforeUnmount, inject, markRaw, onMounted } = hooks;
  const { vm, service, parent } = vnode;
  const { utils = {} } = service || {};
  const state = initState({ api: api2, reactive, vm, computed, props, utils, parent });
  parent.tinyForm = parent.tinyForm || inject("form", null);
  initApi({ api: api2, props, hooks, state, vnode, others, utils });
  initWatch({ api: api2, state, props, watch, markRaw });
  api2.initGlobalTimezone();
  onMounted(() => {
    api2.setInputPaddingLeft();
  });
  vm.$on("handle-clear", (event) => {
    state.showClose = true;
    api2.handleClickIcon(event);
  });
  onBeforeUnmount(() => {
    api2.destroyPopper("remove");
    state.popperElm = null;
    state.picker = null;
  });
  return api2;
};
export {
  api,
  renderless
};
