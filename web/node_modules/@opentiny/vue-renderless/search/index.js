import "../chunk-G2ADBYYC.js";
import { on, off } from "../common/deps/dom";
import PopupManager from "../common/deps/popup-manager";
import { isObject, typeOf } from "../common/type";
const emitInput = ({ emit }) => (...args) => {
  emit("update:modelValue", ...args);
  emit("input", ...args);
};
const handleChange = ({ emit, state }) => (event) => {
  const value = event.target.value;
  emit("change", state.searchValue, value);
};
const handleInput = ({ api, state }) => (event) => {
  const value = event.target.value;
  api.emitInput(value, state.searchValue);
};
const showSelector = ({ refs, state }) => () => {
  refs.selector.style.zIndex = PopupManager.nextZIndex();
  state.show = true;
};
const changeKey = ({ emit, state }) => (key) => {
  state.searchValue = key;
  state.show = false;
  emit("select", key);
};
const searchClick = ({ emit, props, state }) => (event) => {
  event.preventDefault();
  if (props.mini && state.collapse) {
    state.collapse = false;
  } else {
    emit("search", state.searchValue, state.currentValue);
  }
};
const searchEnterKey = ({ api, props, refs, nextTick }) => (event) => {
  if (props.isEnterSearch) {
    api.searchClick(event);
    nextTick(() => refs.input.blur());
  }
};
const clickOutside = ({ parent, props, state }) => (event) => {
  if (!parent.$el.contains(event.target)) {
    state.show = false;
    props.mini && !state.currentValue && (state.collapse = true);
  }
};
const setDefaultType = (searchTypes, typeValue) => {
  if (typeValue && searchTypes.includes(typeValue)) {
    return typeValue;
  }
  let type = {};
  for (let i = 0, len = searchTypes.length; i < len; i++) {
    if (isObject(searchTypes[i]) && typeOf(searchTypes[i].value) !== "undefined" && typeOf(searchTypes[i].text) !== "undefined") {
      type = searchTypes[i];
      break;
    }
  }
  return type;
};
const formatSearchTypes = (searchTypes) => {
  const types = [];
  for (let i = 0, len = searchTypes.length; i < len; i++) {
    if (isObject(searchTypes[i]) && typeOf(searchTypes[i].value) !== "undefined" && typeOf(searchTypes[i].text) !== "undefined") {
      types.push(searchTypes[i]);
    }
  }
  return types;
};
const mounted = ({ api }) => () => {
  on(document.body, "click", api.clickOutside);
};
const beforeDestroy = ({ api }) => () => {
  off(document.body, "click", api.clickOutside);
};
const clear = ({ api, emit, refs, state }) => (event) => {
  event.preventDefault();
  state.currentValue = "";
  refs.input.focus();
  state.focus = true;
  emit("change", [], "");
  api.emitInput("", state.searchValue);
  emit("clear");
};
export {
  beforeDestroy,
  changeKey,
  clear,
  clickOutside,
  emitInput,
  formatSearchTypes,
  handleChange,
  handleInput,
  mounted,
  searchClick,
  searchEnterKey,
  setDefaultType,
  showSelector
};
