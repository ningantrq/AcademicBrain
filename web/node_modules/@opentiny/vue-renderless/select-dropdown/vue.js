import "../chunk-G2ADBYYC.js";
import { mounted } from "./index";
import userPopper from "../common/deps/vue-popper";
const api = ["state", "doDestroy"];
const initState = ({ reactive, computed, popper, selectVm }) => {
  const { showPopper, currentPlacement, popperElm, referenceElm } = popper;
  const state = reactive({
    showPopper,
    currentPlacement,
    popperElm,
    referenceElm,
    minWidth: "",
    multiple: computed(() => selectVm.multiple),
    popperClass: computed(() => selectVm.popperClass)
  });
  return state;
};
const initApi = ({ api: api2, popper, state, selectEmitter, constants, selectVm, parent }) => {
  const { destroyPopper, doDestroy, updatePopper } = popper;
  Object.assign(api2, {
    state,
    doDestroy,
    mounted: mounted({ selectEmitter, constants, state, selectVm, updatePopper, destroyPopper, parent })
  });
};
const initWatch = ({ watch, selectVm, state, nextTick }) => {
  watch(
    () => selectVm.state.inputWidth,
    (val) => {
      nextTick(() => {
        state.minWidth = (selectVm && selectVm.$el && selectVm.$el.getBoundingClientRect().width || val) + "px";
      });
    },
    { immediate: true }
  );
};
const renderless = (props, { computed, onBeforeUnmount, onDeactivated, onMounted, reactive, toRefs, watch, inject }, { vm, slots, parent, emit, nextTick }) => {
  const api2 = {};
  const constants = parent.select._constants;
  const selectEmitter = inject("selectEmitter");
  const selectVm = inject("selectVm");
  const popper = userPopper({
    emit,
    nextTick,
    onBeforeUnmount,
    onDeactivated,
    props,
    reactive,
    vm,
    slots,
    toRefs,
    watch
  });
  const state = initState({ reactive, computed, popper, selectVm });
  initApi({ api: api2, popper, state, selectEmitter, constants, selectVm, parent });
  initWatch({ watch, selectVm, state, nextTick });
  onBeforeUnmount(() => {
    popper.destroyPopper("remove");
    state.popperElm = null;
    state.referenceElm = null;
  });
  onMounted(api2.mounted);
  return api2;
};
export {
  api,
  renderless
};
