import {
  __spreadProps,
  __spreadValues
} from "../chunk-G2ADBYYC.js";
import {
  debouncRquest,
  nodeCollapse,
  nodeExpand,
  getChildValue,
  nodeCheckClick,
  treeNodeClick,
  getTreeData,
  radioChange,
  getcheckedData,
  selectChange,
  calcOverFlow,
  toggleCheckAll,
  handleCopyClick,
  showTip,
  handleComposition,
  handleQueryChange,
  scrollToOption,
  handleMenuEnter,
  emitChange,
  directEmitChange,
  getOption,
  setSelected,
  handleFocus,
  focus,
  blur,
  handleBlur,
  handleClearClick,
  doDestroy,
  handleClose,
  toggleLastOptionHitState,
  deletePrevTag,
  managePlaceholder,
  resetInputState,
  resetInputHeight,
  resetHoverIndex,
  handleOptionSelect,
  setSoftFocus,
  getValueIndex,
  toggleMenu,
  selectOption,
  deleteSelected,
  deleteTag,
  onInputChange,
  onOptionDestroy,
  resetInputWidth,
  handleResize,
  checkDefaultFirstOption,
  getValueKey,
  emptyText,
  watchValue,
  watchVisible,
  watchOptions,
  navigateOptions,
  getPluginOption,
  watchPropsOption,
  buildSelectConfig,
  buildRadioConfig,
  onMouseenterNative,
  onMouseleaveNative,
  onCopying,
  gridOnQueryChange,
  defaultOnQueryChange,
  toVisible,
  toHide,
  mounted,
  unMount,
  watchHoverIndex,
  computeOptimizeOpts,
  watchOptimizeOpts,
  getScrollListener,
  computeCollapseTags,
  computeMultipleLimit,
  handleDropdownClick,
  handleEnterTag,
  calcCollapseTags,
  initValue,
  watchInputHover,
  initQuery,
  updateModelValue,
  getLabelSlotValue,
  computedTagsStyle,
  computedReadonly,
  computedShowClose,
  computedCollapseTagSize,
  computedShowNewOption,
  computedShowCopy,
  computedOptionsAllDisabled,
  computedDisabledTooltipContent,
  computedSelectDisabled,
  computedIsExpandAll,
  watchInitValue,
  watchShowClose,
  loadTreeData,
  resetFilter,
  computedGetIcon,
  computedGetTagType,
  computedShowDropdownIcon,
  clearNoMatchValue,
  debouncedQueryChange,
  handleDebouncedQueryChange
} from "./index";
import debounce from "../common/deps/debounce";
import { isNumber } from "../common/type";
const api = [
  "state",
  "nodeCollapse",
  "nodeExpand",
  "toggleCheckAll",
  "handleCopyClick",
  "focus",
  "blur",
  "showTip",
  "doDestroy",
  "getOption",
  "emitChange",
  "handleBlur",
  "toggleMenu",
  "getValueKey",
  "handleFocus",
  "handleClose",
  "setSoftFocus",
  "getValueIndex",
  "scrollToOption",
  "resetHoverIndex",
  "onOptionDestroy",
  "resetInputWidth",
  "resetInputHeight",
  "managePlaceholder",
  "checkDefaultFirstOption",
  "toggleLastOptionHitState",
  "deleteTag",
  "setSelected",
  "selectOption",
  "handleResize",
  "deletePrevTag",
  "onInputChange",
  "deleteSelected",
  "handleMenuEnter",
  "resetInputState",
  "handleClearClick",
  "handleComposition",
  "handleQueryChange",
  "handleOptionSelect",
  "debouncedOnInputChange",
  "debouncedQueryChange",
  "navigateOptions",
  "selectChange",
  "radioChange",
  "treeNodeClick",
  "nodeCheckClick",
  "buildSelectConfig",
  "buildRadioConfig",
  "onMouseenterNative",
  "onMouseleaveNative",
  "onCopying",
  "handleDropdownClick",
  "handleEnterTag",
  "getLabelSlotValue",
  "loadTreeData",
  "resetFilter",
  "computedGetIcon"
];
const initStateAdd = ({ computed, props, api: api2, parent }) => ({
  selectedTags: [],
  tips: "",
  showTip: false,
  tipHover: false,
  selectHover: false,
  tipTimer: null,
  selectCls: "checked-sur",
  overflow: null,
  completed: false,
  inputWidth: 0,
  inputPaddingRight: 0,
  hoverIndex: -1,
  hoverOption: -1,
  inputLength: 20,
  optionsCount: 0,
  selectFiexd: {},
  createdLabel: null,
  isSilentBlur: false,
  cachedOptions: [],
  selectedLabel: "",
  previousQuery: null,
  inputHovering: false,
  createdSelected: false,
  isOnComposition: false,
  cachedPlaceHolder: props.placeholder,
  inputHeight: 0,
  initialInputHeight: 28,
  currentPlaceholder: props.placeholder,
  filteredOptionsCount: 0,
  gridData: [],
  treeData: [],
  remoteData: [],
  currentKey: props.modelValue,
  updateId: "",
  popperElm: null,
  debounce: computed(() => isNumber(props.queryDebounce) ? props.queryDebounce : props.remote ? 300 : 0),
  emptyText: computed(() => api2.emptyText()),
  formItemSize: computed(() => (parent.formItem || {}).formItemSize),
  selectDisabled: computed(() => api2.computedSelectDisabled()),
  isDisplayOnly: computed(() => props.displayOnly || (parent.form || {}).displayOnly),
  gridCheckedData: computed(() => api2.getcheckedData()),
  isExpandAll: computed(() => api2.computedIsExpandAll()),
  searchSingleCopy: computed(() => props.allowCopy && !props.multiple && props.filterable),
  tooltipContent: {},
  isHidden: false,
  defaultCheckedKeys: [],
  filterOrSearch: computed(() => props.filterable || props.searchable)
});
const initState = ({ reactive, computed, props, api: api2, emitter, parent, constants }) => {
  const stateAdd = initStateAdd({ computed, props, api: api2, parent });
  const state = reactive(__spreadProps(__spreadValues({}, stateAdd), {
    selectEmitter: emitter(),
    datas: [],
    query: "",
    options: [],
    visible: false,
    showCopy: computed(() => api2.computedShowCopy()),
    showWarper: true,
    // 显示下拉外层控制
    selected: props.multiple ? [] : {},
    softFocus: false,
    hover: false,
    firstAutoSearch: props.remoteConfig.autoSearch,
    tagsStyle: computed(() => api2.computedTagsStyle()),
    readonly: computed(() => api2.computedReadonly()),
    iconClass: computed(() => state.visible ? "" : constants.CLASS.IsReverse),
    showClose: computed(() => api2.computedShowClose()),
    optionsAllDisabled: computed(() => api2.computedOptionsAllDisabled()),
    collapseTagSize: computed(() => api2.computedCollapseTagSize()),
    showNewOption: computed(() => api2.computedShowNewOption()),
    selectSize: computed(() => props.size || state.formItemSize),
    optimizeOpts: computed(() => api2.computeOptimizeOpts()),
    optimizeStore: { flag: false, valueIndex: 0, startIndex: 0, viewStyle: "", datas: [] },
    collapseTags: computed(() => api2.computeCollapseTags()),
    multipleLimit: computed(() => api2.computeMultipleLimit()),
    disabledTooltipContent: computed(() => api2.computedDisabledTooltipContent()),
    collapseTagsLength: 0,
    initValue: [],
    key: 0,
    isSelectAll: computed(() => state.selectCls === "checked-sur"),
    isHalfSelect: computed(() => state.selectCls === "halfselect"),
    getIcon: computed(() => api2.computedGetIcon()),
    getTagType: computed(() => api2.computedGetTagType()),
    isShowDropdownIcon: computed(() => api2.computedShowDropdownIcon())
  }));
  return state;
};
const addApi = ({ api: api2, props, state, emit, constants, parent, nextTick, dispatch, vm, designConfig }) => {
  Object.assign(api2, {
    resetInputHeight: resetInputHeight({ api: api2, constants, nextTick, props, vm, state, designConfig }),
    calcOverFlow: calcOverFlow({ vm, props, state }),
    handleFocus: handleFocus({ api: api2, emit, props, state }),
    deleteTag: deleteTag({ api: api2, constants, emit, props, vm, nextTick, state }),
    watchValue: watchValue({ api: api2, constants, dispatch, props, vm, state }),
    toHide: toHide({ constants, state, props, vm, api: api2, nextTick }),
    toVisible: toVisible({ constants, state, props, vm, api: api2, nextTick }),
    setSelected: setSelected({ api: api2, constants, nextTick, props, vm, state }),
    selectOption: selectOption({ api: api2, state, props }),
    handleResize: handleResize({ api: api2, props, state }),
    watchOptions: watchOptions({ api: api2, constants, nextTick, parent, props, state }),
    watchVisible: watchVisible({ api: api2, constants, emit, state, vm, props }),
    deletePrevTag: deletePrevTag({ api: api2, constants, props, state, vm }),
    onInputChange: onInputChange({ api: api2, props, state, constants, nextTick }),
    deleteSelected: deleteSelected({ api: api2, constants, emit, props, vm, state }),
    handleMenuEnter: handleMenuEnter({ api: api2, nextTick, state }),
    resetInputState: resetInputState({ api: api2, vm, state }),
    navigateOptions: navigateOptions({ api: api2, nextTick, state }),
    handleClearClick: handleClearClick(api2),
    handleComposition: handleComposition({ api: api2, nextTick, state }),
    handleQueryChange: handleQueryChange({ api: api2, constants, nextTick, props, vm, state }),
    handleOptionSelect: handleOptionSelect({ api: api2, nextTick, props, vm, state }),
    getPluginOption: getPluginOption({ api: api2, props, state }),
    toggleCheckAll: toggleCheckAll({ api: api2, state }),
    handleDebouncedQueryChange: handleDebouncedQueryChange({ state, api: api2 }),
    debouncedQueryChange: debouncedQueryChange({ props, api: api2 }),
    debouncedOnInputChange: debounce(state.debounce, () => {
      api2.onInputChange();
    }),
    debouncRquest: debouncRquest({ api: api2, state, props }),
    defaultOnQueryChange: defaultOnQueryChange({ props, state, constants, api: api2 }),
    mounted: mounted({ api: api2, parent, state, props, vm, constants }),
    unMount: unMount({ api: api2, parent, vm, state }),
    watchOptimizeOpts: watchOptimizeOpts({ api: api2, props, vm, state }),
    handleDropdownClick: handleDropdownClick({ emit }),
    handleEnterTag: handleEnterTag({ state }),
    calcCollapseTags: calcCollapseTags({ state, vm }),
    initValue: initValue({ state }),
    getLabelSlotValue: getLabelSlotValue({ props, state }),
    loadTreeData: loadTreeData({ state, vm, props, api: api2 }),
    resetFilter: resetFilter({ state, api: api2 }),
    computedGetIcon: computedGetIcon({ constants, designConfig, props }),
    computedGetTagType: computedGetTagType({ designConfig, props }),
    computedShowDropdownIcon: computedShowDropdownIcon({ props, state }),
    clearNoMatchValue: clearNoMatchValue({ props, emit })
  });
};
const initApi = ({
  api: api2,
  props,
  state,
  emit,
  maskState,
  constants,
  parent,
  nextTick,
  dispatch,
  t,
  vm,
  designConfig
}) => {
  Object.assign(api2, {
    state,
    maskState,
    doDestroy: doDestroy(vm),
    getTreeData: getTreeData(props),
    blur: blur({ vm, state }),
    focus: focus({ vm, state }),
    getValueKey: getValueKey(props),
    handleClose: handleClose(state),
    getValueIndex: getValueIndex(props),
    getChildValue: getChildValue(),
    getOption: getOption({ props, state }),
    emitChange: emitChange({ emit, props, state, constants }),
    directEmitChange: directEmitChange({ emit, props, state }),
    toggleMenu: toggleMenu({ vm, state, props }),
    showTip: showTip({ props, state, vm }),
    onOptionDestroy: onOptionDestroy(state),
    setSoftFocus: setSoftFocus({ vm, state }),
    getcheckedData: getcheckedData({ props, state }),
    resetInputWidth: resetInputWidth({ vm, state }),
    resetHoverIndex: resetHoverIndex({ props, state }),
    scrollToOption: scrollToOption({ vm, constants }),
    selectChange: selectChange({ emit, props, vm, state, api: api2 }),
    radioChange: radioChange({ emit, props, state, api: api2 }),
    handleCopyClick: handleCopyClick({ parent, props, state }),
    treeNodeClick: treeNodeClick({ emit, props, state, api: api2, vm }),
    managePlaceholder: managePlaceholder({ vm, state }),
    nodeCheckClick: nodeCheckClick({ emit, props, state, api: api2 }),
    checkDefaultFirstOption: checkDefaultFirstOption(state),
    nodeExpand: nodeExpand({ state, constants, nextTick }),
    nodeCollapse: nodeCollapse({ state, constants, nextTick }),
    handleBlur: handleBlur({ constants, dispatch, emit, state }),
    toggleLastOptionHitState: toggleLastOptionHitState({ state }),
    emptyText: emptyText({ I18N: constants.I18N, props, state, t }),
    watchPropsOption: watchPropsOption({ constants, parent, props, state }),
    buildSelectConfig: buildSelectConfig({ props, state }),
    buildRadioConfig: buildRadioConfig({ props, state }),
    onMouseenterNative: onMouseenterNative({ state }),
    onMouseleaveNative: onMouseleaveNative({ state }),
    onCopying: onCopying({ state, vm }),
    gridOnQueryChange: gridOnQueryChange({ props, vm, constants, state }),
    watchHoverIndex: watchHoverIndex({ state }),
    computeOptimizeOpts: computeOptimizeOpts({ props, state }),
    getScrollListener: getScrollListener({ props, vm, state }),
    computeCollapseTags: computeCollapseTags(props),
    computeMultipleLimit: computeMultipleLimit({ props, state }),
    watchInputHover: watchInputHover({ vm }),
    initQuery: initQuery({ props, state, constants, vm }),
    updateModelValue: updateModelValue({ emit, state }),
    computedTagsStyle: computedTagsStyle({ props, parent, state }),
    computedReadonly: computedReadonly({ props, state }),
    computedShowClose: computedShowClose({ props, state }),
    computedCollapseTagSize: computedCollapseTagSize(state),
    computedShowNewOption: computedShowNewOption({ props, state }),
    computedShowCopy: computedShowCopy({ props, state }),
    computedOptionsAllDisabled: computedOptionsAllDisabled(state),
    computedDisabledTooltipContent: computedDisabledTooltipContent(state),
    computedSelectDisabled: computedSelectDisabled({ props, parent }),
    computedIsExpandAll: computedIsExpandAll(props),
    watchInitValue: watchInitValue({ props, emit }),
    watchShowClose: watchShowClose({ nextTick, state, parent })
  });
  addApi({ api: api2, props, state, emit, constants, parent, nextTick, dispatch, vm, designConfig });
};
const addWatch = ({ watch, props, api: api2, state, nextTick }) => {
  watch(() => [...state.options], api2.watchOptions);
  if (props.renderType === "grid") {
    watch(() => state.gridData, api2.setSelected, { immediate: true });
  }
  if (props.renderType === "tree") {
    watch(() => state.treeData, api2.setSelected, { immediate: true });
  }
  watch(() => state.hoverIndex, api2.watchHoverIndex);
  if (props.options) {
    watch(() => props.options, api2.watchPropsOption, { immediate: true, deep: true });
  }
  watch(() => state.optimizeOpts, api2.watchOptimizeOpts);
  watch([() => state.inputHovering, () => state.visible], api2.watchInputHover);
  watch(() => state.showClose, api2.watchShowClose, { immediate: true });
  watch(
    () => state.selectHover,
    () => props.hoverExpand && !props.disabled && !state.isDisplayOnly && nextTick(api2.resetInputHeight)
  );
};
const initWatch = ({ watch, props, api: api2, state, nextTick }) => {
  if (props.renderType === "tree" && props.treeOp.data) {
    watch(
      () => props.treeOp.data,
      (data) => {
        data && (state.treeData = data);
      },
      { immediate: true, deep: true }
    );
  }
  if (props.renderType === "grid" && props.gridOp.data) {
    watch(
      () => props.gridOp.data,
      (data) => {
        data && (state.gridData = data);
      },
      { immediate: true, deep: true }
    );
  }
  watch(
    () => state.selectDisabled,
    () => nextTick(api2.resetInputHeight)
  );
  watch(
    () => props.placeholder,
    (value) => {
      state.cachedPlaceHolder = state.currentPlaceholder = value;
    }
  );
  watch(() => props.modelValue, api2.watchValue);
  watch(
    () => props.extraQueryParams,
    () => api2.handleQueryChange(state.previousQuery, true),
    { deep: true }
  );
  watch(() => state.visible, api2.watchVisible);
  watch(() => state.initValue, api2.watchInitValue, { deep: true });
  addWatch({ watch, props, api: api2, state, nextTick });
};
const renderless = (props, { computed, onBeforeUnmount, onMounted, reactive, watch, provide }, { vm, parent, emit, constants, nextTick, dispatch, t, emitter, designConfig }) => {
  const api2 = {};
  const state = initState({ reactive, computed, props, api: api2, emitter, parent, constants, designConfig });
  provide("selectEmitter", state.selectEmitter);
  provide("selectVm", vm);
  const maskState = reactive({ width: "", height: "", top: "" });
  initApi({ api: api2, props, state, emit, maskState, constants, parent, nextTick, dispatch, t, vm, designConfig });
  initWatch({ watch, props, api: api2, state, nextTick });
  onMounted(api2.mounted);
  onBeforeUnmount(api2.unMount);
  parent.$on("handle-clear", (event) => {
    api2.handleClearClick(event);
  });
  if (props.multiple && !Array.isArray(props.modelValue)) {
    emit("update:modelValue", []);
  }
  if (!props.multiple && Array.isArray(props.modelValue)) {
    emit("update:modelValue", "");
  }
  state.selectEmitter.on(constants.EVENT_NAME.handleOptionClick, api2.handleOptionSelect);
  state.selectEmitter.on(constants.EVENT_NAME.setSelected, api2.setSelected);
  state.selectEmitter.on(constants.EVENT_NAME.initValue, api2.initValue);
  return api2;
};
export {
  api,
  renderless
};
