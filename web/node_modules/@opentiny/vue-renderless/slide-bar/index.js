import "../chunk-G2ADBYYC.js";
import { emitEvent } from "../common/event";
const leftClick = ({ api, props, vm, state }) => () => {
  if (state.leftLength >= 0) {
    return;
  }
  state.leftLength = state.leftLength + (state.blockWidth + state.blockMargin) * props.wheelBlocks;
  vm.$refs.insider.style.left = state.leftLength + "px";
  api.changeState();
};
const rightClick = ({ api, props, vm, state }) => () => {
  if (state.blockWrapper < Math.abs(state.leftLength) + state.wrapperWidth) {
    return;
  }
  state.leftLength = state.leftLength - (state.blockWidth + state.blockMargin) * props.wheelBlocks;
  vm.$refs.insider.style.left = state.leftLength + "px";
  api.changeState();
};
const blockClick = ({ emit, state }) => ({ item, index }) => {
  if (!emitEvent(emit, "before-click")) {
    return;
  }
  state.currentIndex = index;
  emit("click", item, index);
};
const changeState = ({ state }) => () => {
  const contentWidth = state.blockWrapper;
  state.showLeft = !(parseInt(state.leftLength, 10) >= 0);
  state.showRight = contentWidth <= Math.abs(state.leftLength) + state.wrapperWidth;
};
const mouseEvent = ({ api, state }) => (e) => {
  if (e.wheelDelta >= 0) {
    if (state.leftLength < 0) {
      api.leftClick();
    }
  } else {
    if (state.blockWrapper > Math.abs(state.leftLength) + state.wrapperWidth) {
      api.rightClick();
    }
  }
};
const changeSize = ({ props, state, vm }) => () => {
  state.wrapperWidth = vm.$refs.wrapper.offsetWidth;
  state.blockWidth = parseInt((1 - (props.initBlocks - 1) * 0.02) / props.initBlocks * state.wrapperWidth, 10);
  state.blockMargin = parseInt(state.wrapperWidth * 0.02, 10);
  state.blockWrapper = props.modelValue.length * state.blockWidth + (props.modelValue.length - 1) * state.blockMargin;
};
const swipeleft = ({ api, state }) => () => {
  if (state.blockWrapper > Math.abs(state.leftLength) + state.wrapperWidth) {
    api.rightClick();
  }
};
const swiperight = ({ api, state }) => () => {
  if (state.leftLength < 0) {
    api.leftClick();
  }
};
export {
  blockClick,
  changeSize,
  changeState,
  leftClick,
  mouseEvent,
  rightClick,
  swipeleft,
  swiperight
};
