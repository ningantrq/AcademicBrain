import "../chunk-G2ADBYYC.js";
import { random } from "../common/string";
import debounce from "../common/deps/debounce";
import { fastdom } from "../common/deps/fastdom";
const setActive = ({ emit, state, props }) => (name) => {
  const current = state.currentItem ? state.currentItem.name : "";
  if (current && current !== name && props.beforeLeave && !props.beforeLeave(name, current)) {
    return;
  }
  state.items.forEach((item) => item.selected = item.name === name);
  emit("update:activeName", name);
  emit("update:modelValue", name);
};
const addItem = (state) => (item) => {
  state.items = [...state.items, item];
};
const addNav = (state) => (nav) => {
  state.navs = [...state.navs, nav];
};
const scrollTo = ({ vm, state }) => (name) => {
  const { navs } = state;
  const { $refs } = vm;
  const { tabbar } = $refs;
  const { scroll } = tabbar.$refs;
  fastdom.measure(() => {
    const { clientWidth, scrollWidth } = scroll;
    if (name && scrollWidth > clientWidth) {
      const total = navs.length;
      const index = navs.findIndex((nav) => nav.name === name);
      const max = scrollWidth - clientWidth;
      if (~index) {
        fastdom.mutate(() => {
          scroll.scrollLeft = max / (total - 1) * index;
          tabbar.wheelListener();
        });
      }
    }
  });
};
const clickMore = (api) => (name) => {
  api.setActive(name);
  api.scrollTo(name);
};
const removeItem = ({ state, emit }) => (name) => {
  const itemIndex = state.items.findIndex((item) => item.name === name);
  const navIndex = state.navs.findIndex((item) => item.name === name);
  if (~itemIndex) {
    state.items.splice(itemIndex, 1);
    state.items = [...state.items];
    state.navs.splice(navIndex, 1);
    state.navs = [...state.navs];
    emit("edit", name, "remove");
    emit("close", name);
  }
};
const wheelListener = ({ vm, api, tabs, state }) => debounce(10, (e) => {
  const { $refs } = vm;
  const { getBoundRect: getBoundRect2 } = api;
  e && e.stopPropagation();
  $refs.scroll && ($refs.scroll.scrollLeft += ((e || {}).deltaY || 0) / 3);
  state.tabMoreWidth = $refs.tabMore && $refs.tabMore.offsetWidth || 0;
  state.navPaddingRight = state.tabMoreWidth + 1;
  const { left, width } = getBoundRect2();
  const barRange = { left, width, reserve: state.tabMoreWidth };
  let { moreList = [], moreLeft = false, moreRight = false } = {};
  tabs.state.navs.forEach((nav) => {
    const { name, rect } = nav.getBoundRect();
    const { left: left2, width: width2 } = rect;
    const navRange = { name, left: left2, width: width2 };
    if (navRange.left < barRange.left || navRange.left + navRange.width > barRange.left + barRange.width - barRange.reserve) {
      moreList.push(navRange.name);
    }
  });
  if (tabs.state.items.length) {
    moreLeft = ~moreList.indexOf(tabs.state.items[0].name);
    moreRight = ~moreList.indexOf(tabs.state.items[tabs.state.items.length - 1].name);
  }
  Object.assign(state, { moreList, moreLeft, moreRight });
});
const getBoundRect = (vm) => () => vm.$el.getBoundingClientRect();
const handleClickDropdownItem = (tabs) => (name) => tabs.clickMore(name);
const key = (opt) => opt.name + "-" + random();
const emitAdd = (tabs) => () => {
  tabs.$emit("edit", null, "add");
  tabs.$emit("add");
};
const handleNavItemClick = ({ tabs, props }) => () => {
  tabs.setActive(props.navItem.name);
  tabs.$emit("click", props.navItem);
};
const getBoundRectNV = ({ vm, props }) => () => ({
  name: props.navItem.name,
  rect: vm.$el.getBoundingClientRect()
});
const handleNavItemClose = ({ tabs, props }) => (e) => {
  e.stopPropagation();
  tabs.removeItem(props.navItem.name);
};
export {
  addItem,
  addNav,
  clickMore,
  emitAdd,
  getBoundRect,
  getBoundRectNV,
  handleClickDropdownItem,
  handleNavItemClick,
  handleNavItemClose,
  key,
  removeItem,
  scrollTo,
  setActive,
  wheelListener
};
