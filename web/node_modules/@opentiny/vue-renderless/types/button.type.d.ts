import { ComputedRef, ExtractPropTypes } from 'vue';
import { ISharedRenderlessFunctionParams, ISharedRenderlessParamUtils } from './shared.type.js';

declare const buttonProps: {
    type: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: (StringConstructor | ObjectConstructor)[];
        default: string;
    };
    text: {
        type: StringConstructor;
        default: string;
    };
    resetTime: {
        type: NumberConstructor;
        default: number;
    };
    nativeType: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: StringConstructor;
        default: string;
        validator(val: string): boolean;
    };
    round: BooleanConstructor;
    plain: BooleanConstructor;
    circle: BooleanConstructor;
    loading: BooleanConstructor;
    disabled: BooleanConstructor;
    autofocus: BooleanConstructor;
    customClass: {
        type: StringConstructor;
        default: string;
    };
    banner: {
        type: BooleanConstructor;
        default: boolean;
    };
    ghost: BooleanConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (FunctionConstructor | ObjectConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};

/**
 * Copyright (c) 2022 - present TinyVue Authors.
 * Copyright (c) 2022 - present Huawei Cloud Computing Technologies Co., Ltd.
 *
 * Use of this source code is governed by an MIT-style license.
 *
 * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
 * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR
 * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.
 *
 */

declare const handleClick: ({ emit, props, state }: Pick<IButtonRenderlessParams, 'emit' | 'props' | 'state'>) => (event: MouseEvent) => void;
declare const clearTimer: (state: IButtonState) => () => void;

interface IButtonState {
    timer: number;
    disabled: boolean;
    plain: ComputedRef<boolean>;
    formDisabled: ComputedRef<boolean>;
    buttonDisabled: ComputedRef<boolean>;
}
type IButtonRenderlessParams = ISharedRenderlessFunctionParams<never> & {
    state: IButtonState;
    props: IButtonProps;
};
type IButtonProps = ExtractPropTypes<typeof buttonProps>;
interface IButtonApi {
    state: IButtonState;
    clearTimer: ReturnType<typeof clearTimer>;
    handleClick: ReturnType<typeof handleClick>;
}
type IButtonRenderlessParamUtils = ISharedRenderlessParamUtils<never>;

export { IButtonApi, IButtonProps, IButtonRenderlessParamUtils, IButtonRenderlessParams, IButtonState };
