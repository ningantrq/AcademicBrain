import { ExtractPropTypes } from 'vue';
import { ISharedRenderlessParamUtils, ISharedRenderlessFunctionParams } from './shared.type.js';

declare const stepsProps: {
    nameField: {
        type: StringConstructor;
        default: string;
    };
    countField: {
        type: StringConstructor;
        default: string;
    };
    statusField: {
        type: StringConstructor;
        default: string;
    };
    data: (ObjectConstructor | ArrayConstructor)[];
    space: (StringConstructor | NumberConstructor)[];
    active: {
        type: NumberConstructor;
        default: number;
    };
    visibleNum: {
        type: NumberConstructor;
        default: number;
    };
    descriptionField: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: StringConstructor;
        default: string;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    advanced: {
        type: BooleanConstructor;
        default: boolean;
    };
    line: BooleanConstructor;
    duration: {
        type: NumberConstructor;
        default: number;
    };
    noArrow: BooleanConstructor;
    flex: BooleanConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (FunctionConstructor | ObjectConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};

type IStepsProps = ExtractPropTypes<typeof stepsProps>;
type IStepsRenderlessParamUtils = ISharedRenderlessParamUtils<never>;
interface IStepsState {
    startIndex: number;
    endIndex: number;
    rightNodePositions: IStepsNodePosConfig[];
    computedSpace: number | string;
}
interface IStepsApi {
    state: IStepsState;
    updateStartIndex: () => void;
    isVisibleHandler: (index: number) => IStepsVisibleConfig;
    computedRightNodePos: () => IStepsNodePosConfig[];
}
type IStepsRenderlessParams = ISharedRenderlessFunctionParams<never> & {
    props: IStepsProps;
    state: IStepsState;
    api: IStepsApi;
};
type IStepsVisibleConfig = 'hidden-left' | 'hidden-right' | 'visible';
interface IStepsNodePosConfig {
    zIndex: number;
    right: string;
}

export { IStepsApi, IStepsNodePosConfig, IStepsProps, IStepsRenderlessParamUtils, IStepsRenderlessParams, IStepsState, IStepsVisibleConfig };
