import { createVNode } from "vue";
import { renderless as renderless$1, api as api$1 } from "@opentiny/vue-renderless/scrollbar/vue";
import { $prefix, setup as _setup, h, defineComponent } from "@opentiny/vue-common";
import scrollbarWidth from "@opentiny/vue-renderless/common/deps/scrollbar-width";
import { toObject } from "@opentiny/vue-renderless/common/array";
import { renderless, api } from "@opentiny/vue-renderless/scrollbar/vue-bar";
import "@opentiny/vue-theme/scrollbar/index.css";
var _sfc_main$1 = {
  name: $prefix + "Bar",
  props: {
    vertical: Boolean,
    size: String,
    move: Number
  },
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true,
      h
    });
  },
  render: function render() {
    var size = this.size, move = this.move, renderThumbStyle = this.renderThumbStyle, clickTrackHandler = this.clickTrackHandler, clickThumbHandler = this.clickThumbHandler, bar = this.state.bar;
    return createVNode("div", {
      "ref": "bar",
      "class": ["tiny-scrollbar__bar", "is-" + bar.key],
      "onMousedown": clickTrackHandler
    }, [createVNode("div", {
      "ref": "thumb",
      "class": "tiny-scrollbar__thumb",
      "onMousedown": clickThumbHandler,
      "style": renderThumbStyle({
        bar,
        move,
        size
      })
    }, null)]);
  }
};
var _sfc_main = /* @__PURE__ */ defineComponent({
  name: $prefix + "Scrollbar",
  emits: ["mouseenter", "mousemove", "scroll"],
  components: {
    Bar: _sfc_main$1
  },
  props: {
    marginBottomAdjust: {
      type: Number,
      default: 0
    },
    native: Boolean,
    // 如果container尺寸不会发生变化，最好设置它可以优化性能
    noresize: Boolean,
    tag: {
      type: String,
      default: "div"
    },
    viewClass: {},
    viewStyle: {},
    wrapClass: {},
    wrapStyle: {}
  },
  setup: function setup2(props, context) {
    return _setup({
      props,
      context,
      renderless: renderless$1,
      api: api$1,
      mono: true
    });
  },
  render: function render2() {
    var _this = this;
    var tag = this.tag, $slots = this.vm.$slots, native = this.native, wrapStyle = this.wrapStyle, wrapClass = this.wrapClass, viewStyle = this.viewStyle, viewClass = this.viewClass, handleScroll = this.handleScroll, state = this.state, marginBottomAdjust = this.marginBottomAdjust;
    var gutter = scrollbarWidth();
    var style = wrapStyle;
    if (gutter) {
      var gutterWith = "-" + gutter + "px";
      var gutterHeight = "-" + (gutter - marginBottomAdjust) + "px";
      var gutterStyle = "margin-bottom: " + gutterHeight + "; margin-right: " + gutterWith + ";";
      if (Array.isArray(wrapStyle)) {
        style = toObject(wrapStyle);
        style.marginRight = gutterWith;
        style.marginBottom = gutterHeight;
      } else if (typeof wrapStyle === "string") {
        style += gutterStyle;
      } else {
        style = gutterStyle;
      }
    }
    var view = h(tag, {
      class: ["tiny-scrollbar__view", viewClass],
      style: viewStyle,
      ref: "resize"
    }, $slots.default ? $slots.default() : $slots.empty && $slots.empty());
    var wrap = createVNode("div", {
      "ref": "wrap",
      "style": style,
      "onScroll": handleScroll,
      "class": [wrapClass, "tiny-scrollbar__wrap", gutter ? "" : "tiny-scrollbar__wrap--hidden-default"]
    }, [[view]]);
    var nodes;
    if (native) {
      nodes = [createVNode("div", {
        "ref": "wrap",
        "class": [wrapClass, "tiny-scrollbar__wrap"],
        "style": style
      }, [[view]])];
    } else {
      nodes = [wrap, createVNode(_sfc_main$1, {
        "move": state.moveX,
        "size": state.sizeWidth
      }, null), createVNode(_sfc_main$1, {
        "vertical": true,
        "move": state.moveY,
        "size": state.sizeHeight
      }, null)];
    }
    return createVNode("div", {
      "class": "tiny-scrollbar",
      "onMouseenter": function onMouseenter(e) {
        _this.$emit("mouseenter", e);
      },
      "onMousemove": function onMousemove(e) {
        _this.$emit("mousemove", e);
      }
    }, [nodes]);
  }
});
var version = "3.13.0";
_sfc_main.install = function(Vue) {
  Vue.component(_sfc_main.name, _sfc_main);
};
_sfc_main.version = version;
export {
  _sfc_main as default
};
