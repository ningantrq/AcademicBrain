function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import { t } from "@opentiny/vue-locale";
import PcTemplate from "./pc.js";
import "@opentiny/vue-theme/select/index.css";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return PcTemplate;
};
var $constants = {
  CLASS: {
    SelectDropdownWrap: ".tiny-select-dropdown__wrap",
    IsReverse: "is-reverse"
  },
  I18N: {
    noData: "ui.select.noData",
    noMatch: "ui.select.noMatch",
    loading: "ui.select.loading"
  },
  COMPONENT_NAME: {
    Form: "Form",
    Select: "Select",
    Option: "Option",
    FormItem: "FormItem",
    OptionGroup: "OptionGroup",
    SelectDropdown: "SelectDropdown"
  },
  EVENT_NAME: {
    removeTag: "remove-tag",
    formChange: "form.change",
    formBlur: "form.blur",
    queryChange: "queryChange",
    setSelected: "setSelected",
    updatePopper: "updatePopper",
    destroyPopper: "destroyPopper",
    visibleChange: "visible-change",
    handleOptionClick: "handleOptionClick",
    handleGroupDisabled: "handleGroupDisabled",
    initValue: "initValue"
  },
  TYPE: {
    Grid: "grid",
    Tree: "tree"
  },
  MAX_WIDTH: 132,
  InputBoxType: {
    Input: "input",
    Underline: "underline"
  },
  ICON_MAP: {
    dropdownIcon: "icon-delta-down"
  },
  BORDER_HEIGHT: 2,
  // 上下边框各1px,加起来是2
  DEFAULT_HEIGHT: 28
  // 默认主题的默认高度
};
var Select = defineComponent({
  name: $prefix + "Select",
  componentName: "Select",
  inject: {
    form: {
      default: ""
    },
    formItem: {
      default: ""
    }
  },
  provide: function provide() {
    return {
      select: this
    };
  },
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    id: [Number, String],
    name: String,
    size: String,
    remote: Boolean,
    remoteConfig: {
      type: Object,
      default: function _default2() {
        return {
          showIcon: false,
          clearData: false,
          autoSearch: false
        };
      }
    },
    shape: String,
    tip: String,
    label: String,
    loading: Boolean,
    disabled: Boolean,
    options: Array,
    dataset: Object,
    textField: {
      type: String,
      default: "label"
    },
    tabindex: {
      type: String,
      default: "1"
    },
    valueField: {
      type: String,
      default: "value"
    },
    placement: {
      type: String,
      default: "bottom-start"
    },
    showCheck: {
      type: Boolean,
      default: true
    },
    showAlloption: {
      type: Boolean,
      default: true
    },
    multiple: Boolean,
    clearable: Boolean,
    noDataText: String,
    filterable: Boolean,
    loadingText: String,
    noMatchText: String,
    popperClass: String,
    allowCreate: Boolean,
    collapseTags: Boolean,
    remoteMethod: Function,
    filterMethod: Function,
    reserveKeyword: Boolean,
    automaticDropdown: Boolean,
    defaultFirstOption: Boolean,
    modelValue: {},
    valueKey: {
      type: String,
      default: "value"
    },
    placeholder: {
      type: String,
      default: function _default3() {
        return t("ui.select.placeholder");
      }
    },
    autocomplete: {
      type: String,
      default: "off"
    },
    multipleLimit: {
      type: Number,
      default: 0
    },
    popperAppendToBody: {
      type: Boolean,
      default: true
    },
    hideDrop: {
      type: Boolean,
      default: false
    },
    copyable: {
      type: Boolean,
      default: false
    },
    renderType: String,
    gridOp: {
      type: Object,
      default: function _default4() {
        return {};
      }
    },
    treeOp: {
      type: Object,
      default: function _default5() {
        return {};
      }
    },
    delay: {
      type: Number,
      default: 200
    },
    readonly: Boolean,
    dropStyle: {
      type: Object,
      default: function _default6() {
        return {};
      }
    },
    cacheOp: Object,
    isDropInheritWidth: Boolean,
    tagSelectable: {
      type: Boolean,
      default: false
    },
    selectConfig: {
      type: Object,
      default: function _default7() {
        return {
          checkMethod: function checkMethod() {
            return true;
          }
        };
      }
    },
    radioConfig: {
      type: Object,
      default: function _default8() {
        return {
          checkMethod: function checkMethod() {
            return true;
          }
        };
      }
    },
    allowCopy: {
      type: Boolean,
      default: false
    },
    textSplit: {
      type: String,
      default: ","
    },
    autoClose: Boolean,
    queryDebounce: Number,
    ignoreEnter: {
      type: Boolean,
      default: false
    },
    dropdownIcon: {
      type: [Object, String],
      default: ""
    },
    disabledTooltipContent: String,
    hoverExpand: {
      type: Boolean,
      default: false
    },
    optimization: [Boolean, Object],
    displayOnly: {
      type: Boolean,
      default: false
    },
    initQuery: Function,
    extraQueryParams: {
      type: [Object, String, Boolean, Array, Number],
      default: ""
    },
    showTips: {
      type: Boolean,
      default: true
    },
    searchable: {
      type: Boolean,
      default: false
    },
    showEmptyImage: {
      type: Boolean,
      default: false
    },
    InputBoxType: {
      type: String,
      default: "input"
    },
    tagType: {
      type: String,
      default: ""
      // aui 默认 info
    },
    clearNoMatchValue: {
      type: Boolean,
      default: false
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
Select.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Select.install = function(Vue) {
  Vue.component(Select.name, Select);
};
Select.version = version;
export {
  Select as default
};
