function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { renderless, api } from "@opentiny/vue-renderless/select/vue";
import { defineComponent, directive, props, setup as _setup } from "@opentiny/vue-common";
import Tag from "@opentiny/vue-tag";
import Loading from "@opentiny/vue-loading";
import Input from "@opentiny/vue-input";
import Option from "@opentiny/vue-option";
import Scrollbar from "@opentiny/vue-scrollbar";
import SelectDropdown from "@opentiny/vue-select-dropdown";
import Search from "@opentiny/vue-search";
import Grid from "@opentiny/vue-grid";
import Tree from "@opentiny/vue-tree";
import Tooltip from "@opentiny/vue-tooltip";
import FilterBox from "@opentiny/vue-filter-box";
import Checkbox from "@opentiny/vue-checkbox";
import Clickoutside from "@opentiny/vue-renderless/common/deps/clickoutside";
import { iconClose, iconCopy, iconHalfselect, iconCheck, iconCheckedSur, iconSearch, iconDeltaDown, iconLoadingShadow } from "@opentiny/vue-icon";
import { resolveComponent, resolveDirective, withDirectives, openBlock, createElementBlock, mergeProps, withModifiers, createElementVNode, normalizeStyle, normalizeClass, renderSlot, createBlock, createCommentVNode, withCtx, createVNode, createSlots, createTextVNode, toDisplayString, Fragment, renderList, withKeys, vModelText, resolveDynamicComponent, vShow, Transition } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var getReference = function getReference2(el, binding, vnode) {
  var _ref = binding.expression ? binding.value : binding.arg;
  var popper = vnode.context.$refs[_ref];
  if (popper) {
    if (Array.isArray(popper)) {
      popper[0].$refs.reference = el;
    } else {
      popper.$refs.reference = el;
    }
  }
};
var _sfc_main = defineComponent({
  emits: ["update:modelValue", "change", "focus", "blur", "clear", "remove-tag", "visible-change", "handleDropdownClick", "dropdown-click"],
  directives: directive({
    Clickoutside,
    Loading,
    popover: {
      bind: function bind(el, binding, vnode) {
        getReference(el, binding, vnode);
      },
      inserted: function inserted(el, binding, vnode) {
        getReference(el, binding, vnode);
      }
    }
  }),
  components: {
    TinyTag: Tag,
    TinyInput: Input,
    TinyOption: Option,
    TinySearch: Search,
    TinyScrollbar: Scrollbar,
    TinySelectDropdown: SelectDropdown,
    TinyGrid: Grid,
    TinyTree: Tree,
    TinyCheckbox: Checkbox,
    TinyTooltip: Tooltip,
    TinyFilterBox: FilterBox,
    IconClose: iconClose(),
    IconCopy: iconCopy(),
    IconHalfselect: iconHalfselect(),
    IconCheck: iconCheck(),
    IconCheckedSur: iconCheckedSur(),
    IconSearch: iconSearch(),
    IconDeltaDown: iconDeltaDown(),
    IconLoadingShadow: iconLoadingShadow()
  },
  props: [].concat(props, ["id", "multiple", "name", "dataset", "readonly", "tabindex", "dropStyle", "valueField", "textField", "copyable", "size", "options", "showCheck", "showAlloption", "hideDrop", "modelValue", "showOverflowTooltip", "remote", "remoteConfig", "placement", "loading", "disabled", "valueKey", "clearable", "noDataText", "filterable", "loadingText", "noMatchText", "popperClass", "allowCreate", "placeholder", "remoteMethod", "filterMethod", "collapseTags", "autocomplete", "multipleLimit", "reserveKeyword", "automaticDropdown", "defaultFirstOption", "popperAppendToBody", "showDropdown", "expandTags", "renderType", "gridOp", "treeOp", "delay", "cacheOp", "isDropInheritWidth", "tagSelectable", "selectConfig", "radioConfig", "allowCopy", "textSplit", "autoClose", "queryDebounce", "ignoreEnter", "dropdownIcon", "disabledTooltipContent", "hoverExpand", "optimization", "displayOnly", "initQuery", "extraQueryParams", "shape", "label", "tip", "showTips", "searchable", "showEmptyImage", "inputBoxType", "tagType", "clearNoMatchValue"]),
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  key: 0
};
var _hoisted_2 = {
  key: 0
};
var _hoisted_3 = {
  class: "tiny-select__tags-text"
};
var _hoisted_4 = {
  class: "tiny-select__tags-text"
};
var _hoisted_5 = {
  class: "tiny-select__tags-text"
};
var _hoisted_6 = {
  key: 1,
  ref: "tags-content"
};
var _hoisted_7 = {
  key: 0,
  class: "tiny-select__tags-text"
};
var _hoisted_8 = {
  key: 1,
  class: "tiny-select__tags-text"
};
var _hoisted_9 = {
  key: 0,
  class: "tiny-select__tags-text"
};
var _hoisted_10 = {
  key: 1,
  class: "tiny-select__tags-text"
};
var _hoisted_11 = {
  key: 1,
  class: "tiny-select__tags-text is-disabled"
};
var _hoisted_12 = {
  key: 0
};
var _hoisted_13 = {
  key: 1
};
var _hoisted_14 = ["disabled", "autocomplete"];
var _hoisted_15 = {
  class: "tiny-icon-close"
};
var _hoisted_16 = {
  key: 0,
  class: "tiny-select-dropdown__loading"
};
var _hoisted_17 = {
  key: 0,
  class: "tiny-select-dropdown__empty"
};
var _hoisted_18 = {
  class: "tiny-select-dropdown__loading-svg"
};
var _hoisted_19 = {
  key: 1
};
var _hoisted_20 = {
  key: 1,
  class: "tiny-select-dropdown__empty-wrap"
};
var _hoisted_21 = {
  key: 0,
  class: "tiny-select-dropdown__empty-images"
};
var _hoisted_22 = {
  key: 1,
  class: "tiny-select-dropdown__empty"
};
var _hoisted_23 = {
  key: 0,
  class: "tiny-select__placeholder"
};
var _hoisted_24 = /* @__PURE__ */ createElementVNode(
  "input",
  {
    class: "tiny-input__inner",
    disabled: ""
  },
  null,
  -1
  /* HOISTED */
);
var _hoisted_25 = [_hoisted_24];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_filter_box = resolveComponent("tiny-filter-box");
  var _component_tiny_tooltip = resolveComponent("tiny-tooltip");
  var _component_tiny_tag = resolveComponent("tiny-tag");
  var _component_icon_copy = resolveComponent("icon-copy");
  var _component_icon_close = resolveComponent("icon-close");
  var _component_tiny_input = resolveComponent("tiny-input");
  var _component_tiny_grid = resolveComponent("tiny-grid");
  var _component_tiny_tree = resolveComponent("tiny-tree");
  var _component_icon_search = resolveComponent("icon-search");
  var _component_tiny_option = resolveComponent("tiny-option");
  var _component_tiny_checkbox = resolveComponent("tiny-checkbox");
  var _component_tiny_scrollbar = resolveComponent("tiny-scrollbar");
  var _component_tiny_select_dropdown = resolveComponent("tiny-select-dropdown");
  var _directive_loading = resolveDirective("loading");
  var _directive_popover = resolveDirective("popover");
  var _directive_clickoutside = resolveDirective("clickoutside");
  return withDirectives((openBlock(), createElementBlock(
    "div",
    mergeProps({
      ref: "select",
      class: ["tiny-select", [_ctx.state.selectSize ? "tiny-select--" + _ctx.state.selectSize : "", _ctx.state.collapseTags ? "tiny-select__collapse-tags" : "", _ctx.filterable ? "tiny-select__filterable" : "", _ctx.multiple ? "tiny-select__multiple" : "", _ctx.state.inputHovering || _ctx.state.visible ? "is-hover" : "", _ctx.state.isDisplayOnly ? "is-display-only" : "", _ctx.hoverExpand ? "is-hover-expand" : "", _ctx.state.selectDisabled ? "is-disabled" : "", _ctx.state.selectSize ? "tiny-select--" + _ctx.state.selectSize : "", _ctx.inputBoxType === "underline" ? "tiny-select__underline" : "", _ctx.$parent.$attrs.class]],
      onMouseleave: _cache[36] || (_cache[36] = withModifiers(function() {
        _ctx.state.selectHover = false;
        _ctx.state.inputHovering = false;
      }, ["self"])),
      onMouseenter: _cache[37] || (_cache[37] = withModifiers(function() {
        _ctx.state.selectHover = true;
        _ctx.state.inputHovering = true;
      }, ["self"])),
      onClick: _cache[38] || (_cache[38] = withModifiers(function() {
        return _ctx.toggleMenu && _ctx.toggleMenu.apply(_ctx, arguments);
      }, ["stop"]))
    }, _ctx.a(_ctx.$attrs, ["class", "style"], true)),
    [createElementVNode(
      "div",
      {
        ref: "tagsGroup",
        style: normalizeStyle(_ctx.state.selectFiexd),
        class: normalizeClass(["tiny-select__tags-group", {
          "is-expand": (_ctx.state.selectHover || _ctx.state.visible) && _ctx.hoverExpand && !_ctx.disabled
        }])
      },
      [renderSlot(_ctx.$slots, "reference", {}, function() {
        return [_ctx.shape === "filter" ? (openBlock(), createBlock(_component_tiny_filter_box, {
          key: 0,
          ref: "reference",
          onClick: _ctx.toggleMenu,
          "show-close": _ctx.clearable,
          disabled: _ctx.state.selectDisabled,
          label: _ctx.label,
          tip: _ctx.tip,
          value: _ctx.multiple ? _ctx.state.selected.map(function(item) {
            return item.state ? item.state.currentLabel : item.currentLabel;
          }).join("; ") : _ctx.state.selectedLabel,
          "drop-down-visible": _ctx.state.visible
        }, null, 8, ["onClick", "show-close", "disabled", "label", "tip", "value", "drop-down-visible"])) : createCommentVNode("v-if", true), _ctx.multiple && !_ctx.state.isDisplayOnly && !_ctx.shape ? (openBlock(), createElementBlock(
          "div",
          {
            key: 1,
            ref: "tags",
            class: normalizeClass(["tiny-select__tags", {
              "is-showicon": _ctx.slots.prefix
            }, {
              "not-selected": !_ctx.state.selected.length
            }]),
            style: normalizeStyle(_ctx.state.tagsStyle)
          },
          [!_ctx.state.selectDisabled ? (openBlock(), createElementBlock("span", _hoisted_1, [_ctx.state.collapseTags && _ctx.state.selected.length ? (openBlock(), createElementBlock("span", _hoisted_2, [(openBlock(), createBlock(_component_tiny_tag, {
            type: _ctx.state.getTagType,
            closable: !_ctx.state.selectDisabled && !_ctx.state.selected[0].disabled,
            size: _ctx.state.collapseTagSize,
            hit: _ctx.state.selected[0].state ? _ctx.state.selected[0].state.hitState : _ctx.state.selected[0].hitState,
            key: _ctx.state.key,
            onClose: _cache[1] || (_cache[1] = function($event) {
              return _ctx.deleteTag($event, _ctx.state.selected[0]);
            }),
            "disable-transitions": ""
          }, {
            default: withCtx(function() {
              return [createVNode(
                _component_tiny_tooltip,
                {
                  effect: "light",
                  placement: "top",
                  onMouseenter: _cache[0] || (_cache[0] = function($event) {
                    return _ctx.handleEnterTag($event, _ctx.getValueKey(_ctx.state.selected[0]));
                  })
                },
                createSlots({
                  default: withCtx(function() {
                    return [createElementVNode("span", _hoisted_3, [renderSlot(_ctx.$slots, "label", {
                      item: _ctx.getLabelSlotValue(_ctx.state.selected[0])
                    }, function() {
                      return [createTextVNode(
                        toDisplayString(_ctx.state.selected[0].state ? _ctx.state.selected[0].state.currentLabel : _ctx.state.selected[0].currentLabel),
                        1
                        /* TEXT */
                      )];
                    })])];
                  }),
                  _: 2
                  /* DYNAMIC */
                }, [_ctx.state.tooltipContent[_ctx.getValueKey(_ctx.state.selected[0])] ? {
                  name: "content",
                  fn: withCtx(function() {
                    return [createElementVNode("span", _hoisted_4, [renderSlot(_ctx.$slots, "label", {
                      item: _ctx.getLabelSlotValue(_ctx.state.selected[0])
                    }, function() {
                      return [createTextVNode(
                        toDisplayString(_ctx.state.selected[0].state ? _ctx.state.selected[0].state.currentLabel : _ctx.state.selected[0].currentLabel),
                        1
                        /* TEXT */
                      )];
                    })])];
                  }),
                  key: "0"
                } : void 0]),
                1024
                /* DYNAMIC_SLOTS */
              )];
            }),
            _: 3
            /* FORWARDED */
          }, 8, ["type", "closable", "size", "hit"])), _ctx.state.selected.length > 1 ? (openBlock(), createBlock(_component_tiny_tag, {
            key: 0,
            type: _ctx.state.getTagType,
            closable: false,
            size: _ctx.state.collapseTagSize,
            "disable-transitions": ""
          }, {
            default: withCtx(function() {
              return [createElementVNode(
                "span",
                _hoisted_5,
                "+ " + toDisplayString(_ctx.state.selected.length - 1),
                1
                /* TEXT */
              )];
            }),
            _: 1
            /* STABLE */
          }, 8, ["type", "size"])) : createCommentVNode("v-if", true)])) : createCommentVNode("v-if", true), !_ctx.state.collapseTags ? (openBlock(), createElementBlock(
            "span",
            _hoisted_6,
            [_ctx.hoverExpand ? (openBlock(), createBlock(_component_tiny_tag, {
              class: normalizeClass(["tiny-select__tags-collapse", {
                "is-hidden": _ctx.state.isHidden
              }]),
              type: "info",
              key: "tags-collapse",
              closable: false,
              size: _ctx.state.collapseTagSize
            }, {
              default: withCtx(function() {
                return [createTextVNode(
                  " + " + toDisplayString(_ctx.state.collapseTagsLength),
                  1
                  /* TEXT */
                )];
              }),
              _: 1
              /* STABLE */
            }, 8, ["class", "size"])) : createCommentVNode("v-if", true), (openBlock(true), createElementBlock(
              Fragment,
              null,
              renderList(_ctx.state.selected, function(item, index) {
                return openBlock(), createBlock(_component_tiny_tag, {
                  key: _ctx.getValueKey(item),
                  type: _ctx.state.getTagType,
                  closable: !item.selectDisabled && !item.disabled && !item.required,
                  size: _ctx.state.collapseTagSize,
                  hit: item.state ? item.state.hitState : item.hitState,
                  onClose: function onClose($event) {
                    return _ctx.deleteTag($event, item);
                  },
                  "disable-transitions": ""
                }, {
                  default: withCtx(function() {
                    return [createVNode(_component_tiny_tooltip, {
                      effect: "light",
                      placement: "top",
                      onMouseenter: function onMouseenter($event) {
                        return _ctx.handleEnterTag($event, _ctx.getValueKey(item));
                      }
                    }, createSlots({
                      default: withCtx(function() {
                        return [!_ctx.state.visible && _ctx.state.overflow === index ? (openBlock(), createElementBlock(
                          "span",
                          _hoisted_7,
                          toDisplayString(item.state ? item.state.currentLabel + "... " : item.currentLabel + "... "),
                          1
                          /* TEXT */
                        )) : (openBlock(), createElementBlock("span", _hoisted_8, [renderSlot(_ctx.$slots, "label", {
                          item: _ctx.getLabelSlotValue(item)
                        }, function() {
                          return [createTextVNode(
                            toDisplayString(item.state ? item.state.currentLabel : item.currentLabel),
                            1
                            /* TEXT */
                          )];
                        })]))];
                      }),
                      _: 2
                      /* DYNAMIC */
                    }, [_ctx.state.tooltipContent[_ctx.getValueKey(item)] ? {
                      name: "content",
                      fn: withCtx(function() {
                        return [!_ctx.state.visible && _ctx.state.overflow === index ? (openBlock(), createElementBlock(
                          "span",
                          _hoisted_9,
                          toDisplayString(item.state ? item.state.currentLabel + "... " : item.currentLabel + "... "),
                          1
                          /* TEXT */
                        )) : (openBlock(), createElementBlock("span", _hoisted_10, [renderSlot(_ctx.$slots, "label", {
                          item: _ctx.getLabelSlotValue(item)
                        }, function() {
                          return [createTextVNode(
                            toDisplayString(item.state ? item.state.currentLabel : item.currentLabel),
                            1
                            /* TEXT */
                          )];
                        })]))];
                      }),
                      key: "0"
                    } : void 0]), 1032, ["onMouseenter"])];
                  }),
                  _: 2
                  /* DYNAMIC */
                }, 1032, ["type", "closable", "size", "hit", "onClose"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))],
            512
            /* NEED_PATCH */
          )) : createCommentVNode("v-if", true)])) : (openBlock(), createElementBlock("span", _hoisted_11, [createVNode(_component_tiny_tooltip, {
            effect: "light",
            placement: "top",
            disabled: !_ctx.showTips
          }, {
            content: withCtx(function() {
              return [createElementVNode(
                "div",
                {
                  class: normalizeClass([_ctx.state.showTips && "tiny-select__show-tips", "tiny-select__show-common"])
                },
                [_ctx.slots.label ? (openBlock(), createElementBlock("span", _hoisted_12, [(openBlock(true), createElementBlock(
                  Fragment,
                  null,
                  renderList(_ctx.state.selected, function(item) {
                    return openBlock(), createElementBlock("span", {
                      key: _ctx.getValueKey(item)
                    }, [renderSlot(_ctx.$slots, "label", {
                      item
                    })]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))])) : (openBlock(), createElementBlock(
                  "span",
                  _hoisted_13,
                  toDisplayString(_ctx.disabledTooltipContent || _ctx.state.disabledTooltipContent),
                  1
                  /* TEXT */
                ))],
                2
                /* CLASS */
              )];
            }),
            default: withCtx(function() {
              return [createElementVNode("span", null, [(openBlock(true), createElementBlock(
                Fragment,
                null,
                renderList(_ctx.state.selected, function(item) {
                  return openBlock(), createElementBlock("span", {
                    key: item.value
                  }, [renderSlot(_ctx.$slots, "label", {
                    item
                  }, function() {
                    return [createTextVNode(
                      toDisplayString(item.state ? item.state.currentLabel : item.currentLabel),
                      1
                      /* TEXT */
                    )];
                  }), createTextVNode("; ")]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))])];
            }),
            _: 3
            /* FORWARDED */
          }, 8, ["disabled"])])), _ctx.filterable && !_ctx.state.selectDisabled ? withDirectives((openBlock(), createElementBlock("input", {
            key: 2,
            ref: "input",
            "onUpdate:modelValue": _cache[2] || (_cache[2] = function($event) {
              return _ctx.state.query = $event;
            }),
            type: "text",
            class: normalizeClass(["tiny-select__input", [_ctx.state.selectSize ? "is-" + _ctx.state.selectSize : ""]]),
            disabled: _ctx.state.selectDisabled,
            autocomplete: _ctx.autocomplete,
            onFocus: _cache[3] || (_cache[3] = function() {
              return _ctx.handleFocus && _ctx.handleFocus.apply(_ctx, arguments);
            }),
            onBlur: _cache[4] || (_cache[4] = function() {
              return _ctx.handleBlur && _ctx.handleBlur.apply(_ctx, arguments);
            }),
            onKeyup: _cache[5] || (_cache[5] = function() {
              return _ctx.managePlaceholder && _ctx.managePlaceholder.apply(_ctx, arguments);
            }),
            onKeydown: [_cache[6] || (_cache[6] = function() {
              return _ctx.resetInputState && _ctx.resetInputState.apply(_ctx, arguments);
            }), _cache[7] || (_cache[7] = withKeys(withModifiers(function($event) {
              return _ctx.navigateOptions("next");
            }, ["prevent"]), ["down"])), _cache[8] || (_cache[8] = withKeys(withModifiers(function($event) {
              return _ctx.navigateOptions("prev");
            }, ["prevent"]), ["up"])), _cache[9] || (_cache[9] = withKeys(withModifiers(function() {
              return _ctx.selectOption && _ctx.selectOption.apply(_ctx, arguments);
            }, ["prevent"]), ["enter"])), _cache[10] || (_cache[10] = withKeys(withModifiers(function($event) {
              return _ctx.state.visible = false;
            }, ["stop", "prevent"]), ["esc"])), _cache[11] || (_cache[11] = withKeys(function() {
              return _ctx.deletePrevTag && _ctx.deletePrevTag.apply(_ctx, arguments);
            }, ["delete"])), _cache[12] || (_cache[12] = withKeys(function($event) {
              return _ctx.state.visible = false;
            }, ["tab"]))],
            onCompositionstart: _cache[13] || (_cache[13] = function() {
              return _ctx.handleComposition && _ctx.handleComposition.apply(_ctx, arguments);
            }),
            onCompositionupdate: _cache[14] || (_cache[14] = function() {
              return _ctx.handleComposition && _ctx.handleComposition.apply(_ctx, arguments);
            }),
            onCompositionend: _cache[15] || (_cache[15] = function() {
              return _ctx.handleComposition && _ctx.handleComposition.apply(_ctx, arguments);
            }),
            onInput: _cache[16] || (_cache[16] = function() {
              return _ctx.debouncedQueryChange && _ctx.debouncedQueryChange.apply(_ctx, arguments);
            }),
            style: normalizeStyle({
              "flex-grow": "1",
              width: _ctx.state.inputLength / (_ctx.state.inputWidth - 32) + "%",
              "max-width": _ctx.state.inputWidth - 42 + "px",
              height: "auto"
            })
          }, null, 46, _hoisted_14)), [[vModelText, _ctx.state.query]]) : createCommentVNode("v-if", true)],
          6
          /* CLASS, STYLE */
        )) : createCommentVNode("v-if", true), !_ctx.shape ? (openBlock(), createBlock(_component_tiny_input, {
          key: 2,
          ref: "reference",
          modelValue: _ctx.state.selectedLabel,
          "onUpdate:modelValue": _cache[19] || (_cache[19] = function($event) {
            return _ctx.state.selectedLabel = $event;
          }),
          type: "text",
          placeholder: _ctx.state.currentPlaceholder,
          name: _ctx.name,
          id: _ctx.id,
          autocomplete: _ctx.autocomplete,
          size: _ctx.state.selectSize,
          disabled: _ctx.state.selectDisabled,
          readonly: _ctx.state.readonly,
          "display-only": _ctx.state.isDisplayOnly,
          "display-only-content": _ctx.multiple ? _ctx.state.selected.map(function(item) {
            return item.state ? item.state.currentLabel : item.currentLabel;
          }).join("; ") : "",
          unselectable: _ctx.state.readonly ? "on" : "off",
          "validate-event": false,
          class: normalizeClass({
            "is-focus": _ctx.state.visible,
            overflow: _ctx.state.overflow,
            "is-show-close": _ctx.state.showClose
          }),
          tabindex: _ctx.multiple && _ctx.filterable ? "-1" : _ctx.tabindex,
          onFocus: _ctx.handleFocus,
          onBlur: _ctx.handleBlur,
          onKeyup: _ctx.debouncedOnInputChange,
          onKeydown: [_cache[20] || (_cache[20] = withKeys(withModifiers(function($event) {
            return _ctx.navigateOptions("next");
          }, ["stop", "prevent"]), ["down"])), _cache[21] || (_cache[21] = withKeys(withModifiers(function($event) {
            return _ctx.navigateOptions("prev");
          }, ["stop", "prevent"]), ["up"])), withKeys(withModifiers(_ctx.selectOption, ["prevent"]), ["enter"]), _cache[22] || (_cache[22] = withKeys(withModifiers(function($event) {
            return _ctx.state.visible = false;
          }, ["stop", "prevent"]), ["esc"])), _cache[23] || (_cache[23] = withKeys(function($event) {
            return _ctx.state.visible = false;
          }, ["tab"]))],
          onPaste: _ctx.debouncedOnInputChange,
          onMouseenter: _ctx.onMouseenterNative,
          onMouseleave: _ctx.onMouseleaveNative
        }, createSlots({
          suffix: withCtx(function() {
            return [renderSlot(_ctx.$slots, "suffix"), _ctx.state.showCopy ? (openBlock(), createElementBlock("span", {
              key: 0,
              class: "tiny-select__copy",
              onClick: _cache[17] || (_cache[17] = withModifiers(function() {
                return _ctx.handleCopyClick && _ctx.handleCopyClick.apply(_ctx, arguments);
              }, ["stop"]))
            }, [createVNode(_component_icon_copy, {
              class: "tiny-svg-size tiny-select__caret"
            })])) : createCommentVNode("v-if", true), _ctx.state.showClose ? (openBlock(), createBlock(_component_icon_close, {
              key: 1,
              class: "tiny-svg-size tiny-select__caret tiny-select__close",
              onClick: _ctx.handleClearClick,
              onMouseenter: _cache[18] || (_cache[18] = function($event) {
                return _ctx.state.inputHovering = true;
              })
            }, null, 8, ["onClick"])) : createCommentVNode("v-if", true), withDirectives((openBlock(), createBlock(resolveDynamicComponent(_ctx.state.getIcon), {
              class: normalizeClass(["tiny-svg-size", "tiny-select__caret", _ctx.state.iconClass]),
              onClick: _ctx.handleDropdownClick
            }, null, 8, ["class", "onClick"])), [[vShow, _ctx.state.isShowDropdownIcon]])];
          }),
          _: 2
          /* DYNAMIC */
        }, [_ctx.slots.prefix ? {
          name: "prefix",
          fn: withCtx(function() {
            return [renderSlot(_ctx.$slots, "prefix")];
          }),
          key: "0"
        } : void 0]), 1032, ["modelValue", "placeholder", "name", "id", "autocomplete", "size", "disabled", "readonly", "display-only", "display-only-content", "unselectable", "class", "tabindex", "onFocus", "onBlur", "onKeyup", "onKeydown", "onPaste", "onMouseenter", "onMouseleave"])) : createCommentVNode("v-if", true)];
      }), createVNode(Transition, {
        name: "tiny-zoom-in-top",
        onBeforeEnter: _ctx.handleMenuEnter,
        onAfterLeave: _ctx.doDestroy,
        persisted: ""
      }, {
        default: withCtx(function() {
          return [withDirectives(createVNode(_component_tiny_select_dropdown, {
            ref: "popper",
            "is-drop-inherit-width": _ctx.isDropInheritWidth,
            placement: _ctx.placement,
            "append-to-body": _ctx.popperAppendToBody,
            style: normalizeStyle(_ctx.dropStyle)
          }, {
            default: withCtx(function() {
              return [_ctx.shape && _ctx.filterable ? (openBlock(), createElementBlock(
                "div",
                {
                  key: 0,
                  class: normalizeClass(["tiny-select__filter-input", [_ctx.remote && !_ctx.state.options.length ? "tiny-select__remote-input" : ""]])
                },
                [createVNode(_component_tiny_input, {
                  ref: "input",
                  type: "text",
                  modelValue: _ctx.state.query,
                  "onUpdate:modelValue": _cache[24] || (_cache[24] = function($event) {
                    return _ctx.state.query = $event;
                  }),
                  placeholder: _ctx.placeholder,
                  onInput: _ctx.debouncedQueryChange,
                  onFocus: _ctx.handleFocus,
                  autofocus: ""
                }, null, 8, ["modelValue", "placeholder", "onInput", "onFocus"])],
                2
                /* CLASS */
              )) : createCommentVNode("v-if", true), _ctx.renderType === "grid" ? (openBlock(), createBlock(_component_tiny_grid, mergeProps({
                key: 1,
                "auto-resize": "",
                "row-id": _ctx.valueField,
                "select-config": _ctx.buildSelectConfig(),
                "radio-config": _ctx.buildRadioConfig(),
                ref: "selectGrid",
                "highlight-current-row": true,
                columns: _ctx.gridOp.columns,
                data: _ctx.state.gridData,
                onSelectAll: _ctx.selectChange,
                onSelectChange: _ctx.selectChange,
                onRadioChange: _ctx.radioChange,
                onMousedown: _cache[25] || (_cache[25] = withModifiers(function() {
                }, ["stop"]))
              }, _ctx.gridOp), null, 16, ["row-id", "select-config", "radio-config", "columns", "data", "onSelectAll", "onSelectChange", "onRadioChange"])) : createCommentVNode("v-if", true), _ctx.renderType === "tree" ? (openBlock(), createBlock(_component_tiny_tree, mergeProps({
                key: 2,
                "filter-node-method": _ctx.filterMethod,
                props: _extends({
                  label: _ctx.textField,
                  isLeaf: "isLeaf"
                }, _ctx.treeOp.props),
                "expand-on-click-node": false,
                "icon-trigger-click-node": false,
                "node-key": _ctx.valueField,
                "default-expand-all": _ctx.state.isExpandAll,
                "check-strictly": _ctx.treeOp.checkStrictly,
                "default-checked-keys": _ctx.state.defaultCheckedKeys,
                ref: "selectTree",
                "current-node-key": !_ctx.multiple ? _ctx.state.currentKey : "",
                "show-checkbox": _ctx.multiple,
                onLoadData: _ctx.loadTreeData,
                onNodeCollapse: _ctx.nodeCollapse,
                onNodeExpand: _ctx.nodeExpand,
                onCheck: _ctx.nodeCheckClick,
                onNodeClick: _ctx.treeNodeClick
              }, _ctx.treeOp), null, 16, ["filter-node-method", "props", "node-key", "default-expand-all", "check-strictly", "default-checked-keys", "current-node-key", "show-checkbox", "onLoadData", "onNodeCollapse", "onNodeExpand", "onCheck", "onNodeClick"])) : createCommentVNode("v-if", true), _ctx.searchable ? (openBlock(), createBlock(_component_tiny_input, {
                key: 3,
                modelValue: _ctx.state.query,
                "onUpdate:modelValue": [_cache[28] || (_cache[28] = function($event) {
                  return _ctx.state.query = $event;
                }), _cache[29] || (_cache[29] = function($event) {
                  return _ctx.handleQueryChange(_ctx.state.query);
                })],
                placeholder: _ctx.t("ui.search.placeholder"),
                class: "tiny-select-dropdown__search",
                onKeydown: _cache[30] || (_cache[30] = withKeys(withModifiers(function($event) {
                  return _ctx.handleQueryChange(_ctx.state.query);
                }, ["prevent"]), ["enter"]))
              }, {
                prefix: withCtx(function() {
                  return [createVNode(_component_icon_search, {
                    class: "tiny-select-dropdown__search-prefix",
                    onClick: _cache[26] || (_cache[26] = function($event) {
                      return _ctx.handleQueryChange(_ctx.state.query);
                    })
                  })];
                }),
                suffix: withCtx(function() {
                  return [withDirectives(createElementVNode(
                    "span",
                    _hoisted_15,
                    [createVNode(_component_icon_close, {
                      onClick: _ctx.resetFilter
                    }, null, 8, ["onClick"])],
                    512
                    /* NEED_PATCH */
                  ), [[vShow, _ctx.state.query]]), createVNode(_component_icon_search, {
                    class: "tiny-select-dropdown__search-suffix",
                    onClick: _cache[27] || (_cache[27] = function($event) {
                      return _ctx.handleQueryChange(_ctx.state.query);
                    })
                  })];
                }),
                _: 1
                /* STABLE */
              }, 8, ["modelValue", "placeholder"])) : createCommentVNode("v-if", true), !~["grid", "tree"].indexOf(_ctx.renderType) ? withDirectives((openBlock(), createBlock(_component_tiny_scrollbar, {
                key: 4,
                ref: "scrollbar",
                tag: _ctx.state.optimizeStore.flag ? "div" : "ul",
                native: _ctx.state.optimizeStore.flag,
                "view-style": _ctx.state.optimizeStore.flag ? _ctx.state.optimizeStore.viewStyle : "",
                "wrap-class": ["tiny-select-dropdown__wrap", _ctx.state.optimizeStore.flag ? "virtual" : ""],
                "view-class": ["tiny-select-dropdown__list", _ctx.state.optimizeStore.flag ? "virtual" : ""],
                onMousedown: _cache[35] || (_cache[35] = withModifiers(function() {
                }, ["stop"])),
                class: normalizeClass({
                  "is-empty": !_ctx.allowCreate && _ctx.state.query && _ctx.state.filteredOptionsCount === 0
                })
              }, {
                default: withCtx(function() {
                  return [_ctx.state.showNewOption && !_ctx.state.optimizeStore.flag ? (openBlock(), createBlock(_component_tiny_option, {
                    key: 0,
                    value: _ctx.state.query,
                    created: ""
                  }, null, 8, ["value"])) : createCommentVNode("v-if", true), _ctx.multiple && _ctx.showCheck && _ctx.showAlloption && !_ctx.filterable && !_ctx.state.multipleLimit && !_ctx.state.emptyText ? (openBlock(), createElementBlock(
                    "li",
                    {
                      key: 1,
                      class: normalizeClass(["tiny-option tiny-select-dropdown__item", {
                        hover: _ctx.state.hoverIndex === -9,
                        virtual: _ctx.state.optimizeStore.flag
                      }]),
                      onClick: _cache[31] || (_cache[31] = withModifiers(function() {
                        return _ctx.toggleCheckAll && _ctx.toggleCheckAll.apply(_ctx, arguments);
                      }, ["stop"])),
                      onMousedown: _cache[32] || (_cache[32] = withModifiers(function() {
                      }, ["stop"])),
                      onMouseenter: _cache[33] || (_cache[33] = function($event) {
                        return _ctx.state.hoverIndex = -9;
                      })
                    },
                    [createVNode(_component_tiny_checkbox, {
                      "model-value": _ctx.state.isSelectAll,
                      indeterminate: _ctx.state.isHalfSelect,
                      class: normalizeClass(_ctx.state.selectCls)
                    }, {
                      default: withCtx(function() {
                        return [createTextVNode(
                          toDisplayString(_ctx.t("ui.base.all")),
                          1
                          /* TEXT */
                        )];
                      }),
                      _: 1
                      /* STABLE */
                    }, 8, ["model-value", "indeterminate", "class"])],
                    34
                    /* CLASS, NEED_HYDRATION */
                  )) : createCommentVNode("v-if", true), renderSlot(_ctx.$slots, "default", {}, function() {
                    return [(openBlock(true), createElementBlock(
                      Fragment,
                      null,
                      renderList(_ctx.state.optimizeStore.flag ? _ctx.state.optimizeStore.datas : _ctx.state.datas, function(item) {
                        return openBlock(), createBlock(_component_tiny_option, {
                          class: normalizeClass({
                            virtual: _ctx.state.optimizeStore.flag,
                            "virtual-hidden": _ctx.state.optimizeStore.flag && ~_ctx.state.optimizeStore.hiddenOptions.indexOf(item)
                          }),
                          key: "" + item[_ctx.valueField],
                          label: item[_ctx.textField],
                          value: item[_ctx.valueField],
                          disabled: item.disabled,
                          required: item.required,
                          icon: item.icon,
                          "highlight-class": item._highlightClass,
                          events: item.events,
                          onMousedown: _cache[34] || (_cache[34] = withModifiers(function() {
                          }, ["stop"]))
                        }, null, 8, ["class", "label", "value", "disabled", "required", "icon", "highlight-class", "events"]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))];
                  })];
                }),
                _: 3
                /* FORWARDED */
              }, 8, ["tag", "native", "view-style", "wrap-class", "view-class", "class"])), [[vShow, _ctx.state.options.length > 0 && !_ctx.loading]]) : createCommentVNode("v-if", true), _ctx.renderType !== "grid" && _ctx.renderType !== "tree" && _ctx.state.emptyText && (!_ctx.allowCreate || _ctx.loading || _ctx.allowCreate && _ctx.state.options.length === 0) ? (openBlock(), createElementBlock(
                Fragment,
                {
                  key: 5
                },
                [_ctx.loading ? (openBlock(), createElementBlock("div", _hoisted_16, [_ctx.loadingText ? (openBlock(), createElementBlock(
                  "div",
                  _hoisted_17,
                  toDisplayString(_ctx.state.emptyText),
                  1
                  /* TEXT */
                )) : createCommentVNode("v-if", true), withDirectives(createElementVNode(
                  "div",
                  _hoisted_18,
                  null,
                  512
                  /* NEED_PATCH */
                ), [[_directive_loading, _ctx.loading && !_ctx.loadingText, void 0, {
                  "tiny-select-dropdown__loading": true
                }]])])) : (openBlock(), createElementBlock("div", _hoisted_19, [_ctx.slots.empty ? renderSlot(_ctx.$slots, "empty", {
                  key: 0
                }) : (openBlock(), createElementBlock("div", _hoisted_20, [_ctx.showEmptyImage ? (openBlock(), createElementBlock("span", _hoisted_21)) : (openBlock(), createElementBlock(
                  "div",
                  _hoisted_22,
                  toDisplayString(_ctx.state.emptyText),
                  1
                  /* TEXT */
                ))]))]))],
                64
                /* STABLE_FRAGMENT */
              )) : createCommentVNode("v-if", true), renderSlot(_ctx.$slots, "footer")];
            }),
            _: 3
            /* FORWARDED */
          }, 8, ["is-drop-inherit-width", "placement", "append-to-body", "style"]), [[vShow, !_ctx.onCopying() && !_ctx.hideDrop && _ctx.state.visible && _ctx.state.emptyText !== false]])];
        }),
        _: 3
        /* FORWARDED */
      }, 8, ["onBeforeEnter", "onAfterLeave"])],
      6
      /* CLASS, STYLE */
    ), _ctx.hoverExpand && !_ctx.state.isDisplayOnly ? (openBlock(), createElementBlock("div", _hoisted_23, _hoisted_25)) : createCommentVNode("v-if", true)],
    16
    /* FULL_PROPS */
  )), [[_directive_popover, void 0, "popover"], [_directive_clickoutside, _ctx.handleClose]]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
