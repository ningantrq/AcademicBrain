function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return MobileFirstTemplate;
};
var SliderButtonGroup = defineComponent({
  name: $prefix + "SliderButtonGroup",
  componentName: "SliderButtonGroup",
  props: _extends({}, $props, {
    modelValue: {},
    size: {
      type: String,
      default: "small"
    },
    options: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    type: {
      type: String,
      default: "text"
    },
    pageTurn: {
      type: Boolean,
      default: false
    },
    nameField: {
      type: String,
      default: "label"
    },
    iconField: {
      type: String,
      default: "customIcon"
    },
    noArrow: Boolean,
    flex: Boolean,
    duration: {
      type: Number,
      default: 300
    },
    delay: {
      type: Number,
      default: 5
    },
    disabled: {
      type: Boolean,
      default: false
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
SliderButtonGroup.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
SliderButtonGroup.install = function(Vue) {
  Vue.component(SliderButtonGroup.name, SliderButtonGroup);
};
SliderButtonGroup.version = version;
export {
  SliderButtonGroup as default
};
