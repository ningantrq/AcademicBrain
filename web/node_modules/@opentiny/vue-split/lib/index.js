function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import "@opentiny/vue-theme/split/index.css";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return PcTemplate;
};
var $constants = {
  PREFIX: "tiny-split",
  HORIZONTAL: "horizontal",
  VERTICAL: "vertical"
};
var Split = defineComponent({
  name: $prefix + "Split",
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    modelValue: {
      type: [Number, String],
      default: 0.5
    },
    mode: {
      validator: function validator(value) {
        var arr = [$constants.HORIZONTAL, $constants.VERTICAL];
        for (var i = 0; i < arr.length; i++) {
          if (value === arr[i]) {
            return true;
          }
        }
        return false;
      },
      default: $constants.HORIZONTAL
    },
    leftTopMin: {
      type: [Number, String],
      default: "40px"
    },
    rightBottomMin: {
      type: [Number, String],
      default: "40px"
    },
    "disabled": {
      type: Boolean,
      default: false
    },
    "trigger-simple": {
      type: Boolean,
      default: false
    },
    "collapse-left-top": {
      type: Boolean,
      default: false
    },
    "collapse-right-bottom": {
      type: Boolean,
      default: false
    },
    "three-areas": {
      type: Boolean,
      default: false
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
Split.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Split.install = function(Vue) {
  Vue.component(Split.name, Split);
};
Split.version = version;
export {
  Split as default
};
