declare const _default: import("@vue/runtime-core").DefineComponent<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            PREFIX: string;
            HORIZONTAL: string;
            VERTICAL: string;
        };
    };
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    mode: {
        validator(value: unknown): boolean;
        default: string;
    };
    leftTopMin: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    rightBottomMin: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    'trigger-simple': {
        type: BooleanConstructor;
        default: boolean;
    };
    'collapse-left-top': {
        type: BooleanConstructor;
        default: boolean;
    };
    'collapse-right-bottom': {
        type: BooleanConstructor;
        default: boolean;
    };
    'three-areas': {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            PREFIX: string;
            HORIZONTAL: string;
            VERTICAL: string;
        };
    };
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    mode: {
        validator(value: unknown): boolean;
        default: string;
    };
    leftTopMin: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    rightBottomMin: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    'trigger-simple': {
        type: BooleanConstructor;
        default: boolean;
    };
    'collapse-left-top': {
        type: BooleanConstructor;
        default: boolean;
    };
    'collapse-right-bottom': {
        type: BooleanConstructor;
        default: boolean;
    };
    'three-areas': {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    mode: string;
    disabled: boolean;
    tiny_mode_root: boolean;
    _constants: Record<string, any>;
    modelValue: string | number;
    leftTopMin: string | number;
    rightBottomMin: string | number;
    'trigger-simple': boolean;
    'collapse-left-top': boolean;
    'collapse-right-bottom': boolean;
    'three-areas': boolean;
}, {}>;
export default _default;
