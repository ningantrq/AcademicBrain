import { defineComponent, $prefix, setup as _setup } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/tabbar/vue";
import TabbarItem from "@opentiny/vue-tabbar-item";
import { resolveComponent, openBlock, createElementBlock, normalizeClass, renderSlot, Fragment, renderList, createBlock, mergeProps } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  name: $prefix + "Tabbar",
  componentName: "Tabbar",
  props: {
    activeColor: String,
    border: {
      type: Boolean,
      default: true
    },
    inactiveColor: String,
    modelValue: {
      type: [Number, String],
      default: 0
    },
    showNumber: {
      type: Number,
      default: 5
    },
    itemList: {
      type: Array,
      default: function _default() {
        return [];
      }
    }
  },
  components: {
    TabbarItem
  },
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api
    });
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tabbar_item = resolveComponent("tabbar-item");
  return openBlock(), createElementBlock(
    "div",
    {
      "data-tag": "tiny-tabbar",
      class: normalizeClass(["z-10 flex box-content w-full h-14 bg-color-bg-1 fixed bottom-0 left-0", {
        "border-t border-color-border border-solid": _ctx.border
      }, {
        unfit: !_ctx.state.fit
      }]),
      ref: "tabbar"
    },
    [renderSlot(_ctx.$slots, "default", {}, function() {
      return [(openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.itemList, function(item, index) {
          return openBlock(), createBlock(
            _component_tabbar_item,
            mergeProps({
              key: index
            }, item),
            null,
            16
            /* FULL_PROPS */
          );
        }),
        128
        /* KEYED_FRAGMENT */
      ))];
    })],
    2
    /* CLASS */
  );
}
var mobileFirst = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  mobileFirst as default
};
