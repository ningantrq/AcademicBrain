function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { openBlock, createElementBlock, normalizeStyle, normalizeClass, createVNode, resolveComponent } from "vue";
import { renderless as renderless$2, api as api$2 } from "@opentiny/vue-renderless/tabs/vue";
import { $prefix, setup as _setup, h, defineComponent, props } from "@opentiny/vue-common";
import { t } from "@opentiny/vue-locale";
import { renderless as renderless$1, api as api$1 } from "@opentiny/vue-renderless/tab-nav/vue";
import Dropdown from "@opentiny/vue-dropdown";
import DropdownMenu from "@opentiny/vue-dropdown-menu";
import DropdownItem from "@opentiny/vue-dropdown-item";
import Tooltip from "@opentiny/vue-tooltip";
import { iconChevronLeft, iconChevronRight, iconClose, iconPlus } from "@opentiny/vue-icon";
import { renderless, api } from "@opentiny/vue-renderless/tab-bar/vue";
function _extends_tiny() {
  _extends_tiny = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends_tiny.apply(this, arguments);
}
import { $props } from "@opentiny/vue-common";
var tabNavPcProps = _extends_tiny({}, $props, {
  panes: {
    type: Array,
    default: function _default() {
      return [];
    }
  },
  currentName: String,
  editable: Boolean,
  onTabClick: {
    type: Function,
    default: function _default2() {
    }
  },
  onTabRemove: {
    type: Function,
    default: function _default3() {
    }
  },
  tabStyle: String,
  stretch: Boolean,
  showMoreTabs: Boolean,
  showPanesCount: Number,
  popperClass: String,
  dropConfig: {
    type: Object,
    default: function _default4() {
      return null;
    }
  },
  tooltipConfig: [String, Object]
});
var tabNavMobileProps = _extends_tiny({}, $props, {
  panes: {
    type: Array,
    default: function _default5() {
      return [];
    }
  },
  currentName: String,
  activeColor: {
    type: String,
    default: ""
  },
  onTabClick: {
    type: Function,
    default: function _default6() {
    }
  },
  onTabRemove: {
    type: Function,
    default: function _default7() {
    }
  },
  showExpandTabs: Boolean,
  expandPanesWidth: {
    type: String,
    default: ""
  },
  expandTabsTitle: {
    type: String,
    default: "请选择"
  },
  expandTabsMode: {
    type: String,
    default: "columns"
  }
});
var tabBarProps = _extends_tiny({}, $props, {
  tabs: Array
});

function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

import "@opentiny/vue-theme/tabs/index.css";
var _sfc_main$2 = {
  name: $prefix + "TabBar",
  props: tabBarProps,
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api,
      mono: true
    });
  }
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock(
    "div",
    {
      style: normalizeStyle(_ctx.state.barStyle),
      class: normalizeClass(["is-" + _ctx.state.rootTabs.position, _ctx.state.separator ? "" : "tiny-tabs__active-bar"])
    },
    null,
    6
    /* CLASS, STYLE */
  );
}
var TabBar = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render]]);
var getOrderedPanes = function getOrderedPanes2(state, panes) {
  var slotDefault = state.rootTabs.$slots.default;
  var orders;
  if (typeof slotDefault === "function") {
    orders = [];
    var tabVnodes = slotDefault();
    var handler = function handler2(_ref) {
      var type = _ref.type, componentOptions = _ref.componentOptions, props2 = _ref.props;
      var componentName = type && type.componentName;
      if (!componentName)
        componentName = componentOptions && componentOptions.Ctor.extendOptions.componentName;
      if (componentName === "TabItem") {
        var paneName = props2 && props2.name || componentOptions && componentOptions.propsData.name;
        orders.push(paneName);
      }
    };
    tabVnodes.forEach(function(_ref2) {
      var type = _ref2.type, componentOptions = _ref2.componentOptions, props2 = _ref2.props, children = _ref2.children;
      if (type && (type.toString() === "Symbol(Fragment)" || // vue@3.3之前的开发模式
      type.toString() === "Symbol(v-fgt)" || //   vue@3.3.1 的变更
      type.toString() === "Symbol()")) {
        Array.isArray(children) && children.forEach(function(_ref3) {
          var type2 = _ref3.type, componentOptions2 = _ref3.componentOptions, props3 = _ref3.props;
          return handler({
            type: type2,
            componentOptions: componentOptions2,
            props: props3
          });
        });
      } else {
        handler({
          type,
          componentOptions,
          props: props2
        });
      }
    });
  }
  if (orders) {
    var tmpPanes = [];
    orders.forEach(function(paneName) {
      var pane = panes.find(function(pane2) {
        return pane2.name === paneName;
      });
      if (pane)
        tmpPanes.push(pane);
    });
    panes = tmpPanes;
  }
  return panes;
};
var _sfc_main$1 = {
  name: $prefix + "TabNav",
  components: {
    TabBar,
    Dropdown,
    DropdownMenu,
    DropdownItem,
    Tooltip,
    IconChevronLeft: iconChevronLeft(),
    IconChevronRight: iconChevronRight(),
    IconClose: iconClose()
  },
  props: tabNavPcProps,
  inject: ["moreIcon"],
  setup: function setup2(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless: renderless$1,
      api: api$1,
      mono: true
    });
  },
  render: function render() {
    var state = this.state, tabStyle = this.tabStyle, editable = this.editable, stretch = this.stretch, showPanesCount = this.showPanesCount, onTabClick = this.onTabClick, onTabRemove = this.onTabRemove, scrollNext = this.scrollNext, scrollPrev = this.scrollPrev, changeTab = this.changeTab, tooltipConfig = this.tooltipConfig;
    var panes = this.panes, setFocus = this.setFocus, removeFocus = this.removeFocus, showMoreTabs = this.showMoreTabs, popperClass = this.popperClass, moreIcon = this.moreIcon;
    var spans = [createVNode("span", {
      "class": ["tiny-tabs__nav-prev", state.scrollable.prev ? "" : "is-disabled"],
      "onClick": scrollPrev
    }, [createVNode(resolveComponent("icon-chevron-left"), null, null)]), !showMoreTabs ? createVNode("span", {
      "class": ["tiny-tabs__nav-next", state.scrollable.next ? "" : "is-disabled"],
      "onClick": scrollNext
    }, [createVNode(resolveComponent("icon-chevron-right"), null, null)]) : null];
    var scrollBtn = state.scrollable ? spans : null;
    var moreTabs = null;
    if (showMoreTabs && state.scrollable) {
      var reference = function reference2() {
        return moreIcon ? createVNode("span", {
          "class": "tiny-tabs__more-icon"
        }, [moreIcon() || t("ui.tabs.moreItem")]) : createVNode("span", {
          "class": "tiny-tabs__more"
        }, [t("ui.tabs.moreItem")]);
      };
      var dropdowpList = panes.slice(showPanesCount);
      var isShowDropDown = showPanesCount !== -1 && Boolean(dropdowpList.length);
      var menuSlot = function menuSlot2() {
        return isShowDropDown ? dropdowpList.map(function(pane, index) {
          var tabName = pane.name || pane.state.index || index;
          var tabLabelContent = pane.$slots.title || pane.title;
          var tabindex = pane.state.active ? 0 : -1;
          pane.state.index = "" + (index + showPanesCount);
          return createVNode(resolveComponent("dropdown-item"), {
            "class": "tiny-tabs__more-item",
            "tabindex": tabindex,
            "onFocus": function onFocus() {
              setFocus();
            },
            "onBlur": function onBlur() {
              removeFocus();
            },
            "onClick": function onClick(e) {
              removeFocus();
              onTabClick(pane, tabName, e);
            }
          }, {
            default: function _default() {
              return [typeof tabLabelContent === "function" ? tabLabelContent() : tabLabelContent];
            }
          });
        }) : null;
      };
      var dropdownSlot = function dropdownSlot2() {
        return isShowDropDown ? h(DropdownMenu, {
          attrs: {
            popperClass: "tiny-tabs-dropdown tiny-tabs__more-dropdown" + (popperClass ? " " + popperClass : ""),
            placement: "bottom-start"
          },
          scopedSlots: {
            default: menuSlot
          }
        }) : null;
      };
      var moreContent = isShowDropDown ? h(Dropdown, {
        attrs: {
          trigger: "hover"
        },
        scopedSlots: {
          default: reference,
          dropdown: dropdownSlot
        }
      }) : reference();
      moreTabs = createVNode("div", {
        "class": "tiny-tabs__more-container",
        "ref": "more"
      }, [moreContent]);
    }
    var tabs = getOrderedPanes(state, panes).map(function(pane, index) {
      var _class;
      var tabName = pane.name || pane.state.index || index;
      var withClose = pane.state.isClosable || editable;
      pane.state.index = "" + index;
      var btnClose = withClose ? createVNode("span", {
        "class": "tiny-tabs__icon-close"
      }, [createVNode(resolveComponent("icon-close"), {
        "onClick": function onClick(e) {
          onTabRemove(pane, e);
        }
      }, null)]) : null;
      var tipComp = function tipComp2() {
        return tooltipConfig === "title" ? h("span", {
          class: "tiny-tabs__item__title",
          attrs: {
            title: pane.title
          }
        }, [pane.title]) : h(Tooltip, {
          class: "tiny-tabs__item__title",
          props: _extends({
            content: pane.title
          }, tooltipConfig)
        }, [h("span", {}, [pane.title])]);
      };
      var toolTipComp = function toolTipComp2() {
        return tooltipConfig ? tipComp() : h("span", {
          class: "tiny-tabs__item__title"
        }, [pane.title]);
      };
      var itemsSeparator = createVNode("span", {
        "class": "tiny-tabs__item-separator"
      }, null);
      var tabLabelContent = function tabLabelContent2() {
        return pane.$slots.title ? pane.$slots.title() : toolTipComp();
      };
      var tabindex = pane.state.active ? 0 : -1;
      return h("div", {
        ref: "tabs-" + tabName,
        key: "tab-" + tabName + "-" + index,
        class: (_class = {
          "tiny-tabs__item": true,
          "tiny-tabs__item-separator-space": state.separator
        }, _class["is-" + state.rootTabs.position] = true, _class["is-active"] = pane.state.active, _class["is-disabled"] = pane.disabled, _class["is-closable"] = withClose, _class["is-focus"] = state.isFocus, _class),
        attrs: {
          id: "tab-" + tabName,
          "aria-controls": "pane-" + tabName,
          role: "tab",
          "aria-selected": pane.state.active,
          tabindex,
          refInFor: true
        },
        on: {
          focus: function focus() {
            setFocus();
          },
          blur: function blur() {
            removeFocus();
          },
          click: function click(e) {
            removeFocus();
            onTabClick(pane, tabName, e);
          },
          keydown: function keydown(e) {
            if (withClose && (e.keyCode === 46 || e.keyCode === 8)) {
              onTabRemove(pane, e);
            }
          }
        }
      }, [tabLabelContent(), btnClose, state.separator && itemsSeparator]);
    });
    var paddingRight = this.$refs.more ? this.$refs.more.offsetWidth + "px" : "46px";
    return createVNode("div", {
      "style": showMoreTabs ? {
        paddingRight
      } : {},
      "class": ["tiny-tabs__nav-wrap", !state.separator && "tiny-tabs__nav-wrap-not-separator", state.scrollable ? "is-scrollable" : "", showMoreTabs ? "is-show-more" : "", "is-" + state.rootTabs.position]
    }, [[scrollBtn, moreTabs], createVNode("div", {
      "class": ["tiny-tabs__nav-scroll"],
      "ref": "navScroll"
    }, [createVNode("div", {
      "class": ["tiny-tabs__nav", "is-" + state.rootTabs.position, stretch && ["top", "bottom"].includes(state.rootTabs.position) ? "is-stretch" : "", !tabStyle ? "is-show-active-bar" : ""],
      "ref": "nav",
      "style": state.navStyle,
      "role": "tablist",
      "on-keydown": changeTab
    }, [!tabStyle ? createVNode(resolveComponent("tab-bar"), {
      "ref": "tabBar",
      "tabs": panes
    }, null) : null, tabs])])]);
  }
};
var _sfc_main = /* @__PURE__ */ defineComponent({
  emits: ["add", "click", "close", "edit", "update:modelValue", "tab-drag-start", "tab-drag-over", "tab-drag-end"],
  props: [].concat(props, ["tabStyle", "activeName", "withClose", "withAdd", "size", "modelValue", "editable", "position", "beforeLeave", "stretch", "showMoreTabs", "popperClass", "popperAppendToBody", "dropConfig", "tooltipConfig", "separator"]),
  components: {
    TabNav: _sfc_main$1,
    IconPlus: iconPlus()
  },
  provide: function provide() {
    return {
      moreIcon: this.$slots.moreIcon
    };
  },
  setup: function setup3(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless: renderless$2,
      api: api$2
    });
  },
  render: function render2() {
    var _this = this, _class2;
    var state = this.state, tabStyle = this.tabStyle, handleTabClick = this.handleTabClick, handleTabRemove = this.handleTabRemove, handleTabAdd = this.handleTabAdd, handleTabDragStart = this.handleTabDragStart, handleTabDragOver = this.handleTabDragOver, handleTabDragEnd = this.handleTabDragEnd, editable = this.editable, withAdd = this.withAdd, position = this.position, size = this.size, stretch = this.stretch, showMoreTabs = this.showMoreTabs, popperClass = this.popperClass, popperAppendToBody = this.popperAppendToBody, dropConfig = this.dropConfig, tooltipConfig = this.tooltipConfig;
    var newButton = editable || withAdd ? createVNode("span", {
      "class": "tiny-tabs__new-tab",
      "onClick": handleTabAdd,
      "tabindex": "0",
      "onKeydown": function onKeydown(ev) {
        if (ev.keyCode === 13) {
          handleTabAdd();
        }
      }
    }, [createVNode(resolveComponent("icon-plus"), null, null)]) : null;
    var navData = {
      props: {
        currentName: state.currentName,
        panes: state.panes,
        onTabClick: handleTabClick,
        onTabRemove: handleTabRemove,
        showPanesCount: state.showPanesCount,
        editable,
        tabStyle,
        size,
        stretch,
        showMoreTabs,
        popperClass,
        popperAppendToBody,
        dropConfig,
        tooltipConfig,
        separator: state.separator
      },
      on: {
        "tab-drag-start": handleTabDragStart,
        "tab-drag-over": handleTabDragOver,
        "tab-drag-end": handleTabDragEnd
      },
      ref: "nav"
    };
    var TabNavComponent = h(_sfc_main$1, _extends({}, navData));
    this.$nextTick(function() {
      _this.$refs.nav && _this.$refs.nav.$forceUpdate();
    });
    var header = createVNode("div", {
      "class": ["tiny-tabs__header", "is-" + position]
    }, [TabNavComponent, newButton]);
    var panels = createVNode("div", {
      "class": "tiny-tabs__content"
    }, [this.slots.default && this.slots.default()]);
    return createVNode("div", {
      "class": (_class2 = {
        "tiny-tabs": true,
        "tiny-tabs--card": tabStyle === "card"
      }, _class2["tiny-tabs--" + (!state.separator ? position : "top")] = true, _class2["tiny-tabs--border-card"] = tabStyle === "border-card", _class2["tiny-tabs--button-card"] = tabStyle === "button-card", _class2["tiny-tabs--small"] = size === "small", _class2)
    }, [position !== "bottom" ? [header, panels] : [panels, header]]);
  }
});
export {
  _sfc_main as default
};
