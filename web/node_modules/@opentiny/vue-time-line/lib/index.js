function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  PROCESS_DONE_CLS: "process-done",
  PROCESS_CUR_CLS: "process-current",
  PROCESS_WAIT_CLS: "process-wait",
  PROCESS_DISABLED_CLS: "process-disabled",
  PROCESS_ERROR_CLS: "process-error",
  STACK_NODES_MAX: 7,
  LIMITED_STACK_NODES: 3
};
var timelineProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  vertical: {
    type: Boolean,
    default: false
  },
  horizontal: {
    type: Boolean,
    default: true
  },
  showNumber: {
    type: Boolean,
    default: true
  },
  nameField: {
    type: String,
    default: "name"
  },
  timeField: {
    type: String,
    default: "time"
  },
  tipsField: {
    type: String,
    default: "tips"
  },
  autoColorField: {
    type: String,
    default: "autoColor"
  },
  showIconField: {
    type: String,
    default: "showIcon"
  },
  start: {
    type: Number,
    default: 1
  },
  data: Array,
  space: {
    type: [String, Number],
    default: ""
  },
  active: {
    type: Number,
    default: -1
  },
  reverse: {
    type: Boolean,
    default: false
  },
  showStatus: {
    type: Boolean,
    default: false
  },
  subField: {
    type: Boolean,
    default: false
  },
  onlyNumber: {
    type: Boolean,
    default: false
  },
  lineWidth: {
    type: [String, Number],
    default: ""
  },
  shape: {
    type: String,
    default: "circle"
  }
});
var TimeLine = defineComponent({
  name: $prefix + "TimeLine",
  props: timelineProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
TimeLine.install = function(Vue) {
  Vue.component(TimeLine.name, TimeLine);
};
TimeLine.version = version;
export {
  TimeLine as default
};
