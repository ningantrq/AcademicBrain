import { renderless, api } from "@opentiny/vue-renderless/time-line/vue";
import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import { iconYes } from "@opentiny/vue-icon";
import "@opentiny/vue-theme-mobile/steps/index.css";
import { resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, normalizeStyle, renderSlot, createElementVNode, toDisplayString, createVNode, createCommentVNode } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = /* @__PURE__ */ defineComponent({
  emits: ["click"],
  props: [].concat(props, ["vertical", "horizontal", "showNumber", "nameField", "timeField", "start", "data", "space", "active", "reverse", "showStatus", "showFoldBtn"]),
  components: {
    IconYes: iconYes()
  },
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  key: 0,
  class: "tiny-mobile-steps-normal"
};
var _hoisted_2 = {
  class: "date-time"
};
var _hoisted_3 = {
  class: "time"
};
var _hoisted_4 = ["onClick"];
var _hoisted_5 = {
  key: 0
};
var _hoisted_6 = ["custom-title"];
var _hoisted_7 = {
  class: "node-description"
};
var _hoisted_8 = ["textContent"];
var _hoisted_9 = {
  class: "status"
};
var _hoisted_10 = {
  class: "header"
};
var _hoisted_11 = {
  key: 0,
  class: "date-time-vertical"
};
var _hoisted_12 = {
  class: "time"
};
var _hoisted_13 = {
  class: "name"
};
var _hoisted_14 = ["onClick"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_icon_yes = resolveComponent("icon-yes");
  return openBlock(), createElementBlock(
    "div",
    {
      class: normalizeClass(["tiny-mobile-steps", {
        "is-horizontal": _ctx.horizontal && !_ctx.vertical
      }])
    },
    [!_ctx.vertical ? (openBlock(), createElementBlock("div", _hoisted_1, [(openBlock(true), createElementBlock(
      Fragment,
      null,
      renderList(_ctx.state.nodes, function(node, index) {
        return openBlock(), createElementBlock(
          "div",
          {
            key: index,
            style: normalizeStyle({
              width: _ctx.horizontal ? "auto" : _ctx.space ? _ctx.space + "px" : 100 / _ctx.state.nodes.length + "%"
            }),
            class: normalizeClass(["normal", _ctx.getStatusCls(index)])
          },
          [renderSlot(_ctx.$slots, "top", {
            slotScope: node
          }, function() {
            return [createElementVNode("div", _hoisted_2, [createElementVNode(
              "span",
              _hoisted_3,
              toDisplayString(_ctx.getDate(node[_ctx.timeField]).date) + " " + toDisplayString(_ctx.getDate(node[_ctx.timeField]).time),
              1
              /* TEXT */
            )])];
          }), createElementVNode("div", {
            class: "icon",
            onClick: function onClick($event) {
              return _ctx.handleClick({
                index,
                node
              });
            }
          }, [index >= _ctx.state.current ? (openBlock(), createElementBlock(
            "span",
            _hoisted_5,
            toDisplayString(_ctx.showNumber ? index + _ctx.start : ""),
            1
            /* TEXT */
          )) : (openBlock(), createElementBlock("span", {
            key: 1,
            "custom-title": index + _ctx.start,
            class: "icon-wrap"
          }, [createVNode(_component_icon_yes, {
            class: "tiny-svg-size fixicon"
          })], 8, _hoisted_6))], 8, _hoisted_4), createElementVNode(
            "div",
            {
              class: normalizeClass(["line", {
                "line-done": index < _ctx.state.current,
                "line-end": index === _ctx.state.nodes.length - 1
              }])
            },
            null,
            2
            /* CLASS */
          ), createElementVNode("div", _hoisted_7, [renderSlot(_ctx.$slots, "bottom", {
            item: node
          }, function() {
            return [createElementVNode("div", {
              class: "name",
              textContent: toDisplayString(node[_ctx.nameField])
            }, null, 8, _hoisted_8), createElementVNode(
              "div",
              _hoisted_9,
              toDisplayString(_ctx.showStatus ? _ctx.getStatus(index) : ""),
              1
              /* TEXT */
            )];
          })])],
          6
          /* CLASS, STYLE */
        );
      }),
      128
      /* KEYED_FRAGMENT */
    ))])) : (openBlock(), createElementBlock(
      "div",
      {
        key: 1,
        class: normalizeClass(["tiny-mobile-steps-timeline", {
          reverse: _ctx.reverse
        }])
      },
      [(openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.state.nodes, function(node, index) {
          return openBlock(), createElementBlock("div", {
            key: index,
            class: "timeline"
          }, [createElementVNode("ul", null, [createElementVNode("li", null, [createElementVNode("div", _hoisted_10, [node.time ? (openBlock(), createElementBlock("div", _hoisted_11, [createElementVNode(
            "span",
            _hoisted_12,
            toDisplayString(_ctx.getDate(node[_ctx.timeField]).date) + " " + toDisplayString(_ctx.getDate(node[_ctx.timeField]).time),
            1
            /* TEXT */
          )])) : createCommentVNode("v-if", true), createElementVNode(
            "span",
            {
              class: normalizeClass(["round", "round-" + node.state])
            },
            null,
            2
            /* CLASS */
          ), renderSlot(_ctx.$slots, "header", {
            item: node
          }, function() {
            return [createElementVNode(
              "div",
              _hoisted_13,
              toDisplayString(node.name),
              1
              /* TEXT */
            )];
          }), node.showFoldBtn ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: "arrow-btn",
            onClick: function onClick($event) {
              return _ctx.toggleFold(node);
            }
          }, [createElementVNode(
            "div",
            {
              class: normalizeClass(["arrow-btn-arrow", node.fold ? "arrow-btn-arrow-fold" : ""])
            },
            null,
            2
            /* CLASS */
          )], 8, _hoisted_14)) : createCommentVNode("v-if", true)]), !node.fold ? (openBlock(), createElementBlock(
            "div",
            {
              key: 0,
              class: normalizeClass(["content", node.time ? "content-left-margin" : null])
            },
            [renderSlot(_ctx.$slots, "content", {
              item: node
            })],
            2
            /* CLASS */
          )) : createCommentVNode("v-if", true), _ctx.state.nodes.length > 1 ? (openBlock(), createElementBlock(
            "div",
            {
              key: 1,
              class: normalizeClass(["line", node.time ? "line-left-margin" : null])
            },
            null,
            2
            /* CLASS */
          )) : createCommentVNode("v-if", true)])])]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))],
      2
      /* CLASS */
    ))],
    2
    /* CLASS */
  );
}
var mobile = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  mobile as default
};
