import { renderless, api } from "@opentiny/vue-renderless/time-panel/vue";
import { defineComponent, $prefix, setup as _setup } from "@opentiny/vue-common";
import Scrollbar from "@opentiny/vue-scrollbar";
import { resolveComponent, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeStyle, normalizeClass, createVNode, createElementBlock, Fragment, renderList, toDisplayString, vShow } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

import "@opentiny/vue-theme/date-panel/index.css";
var _sfc_main = defineComponent({
  name: $prefix + "TimePanel",
  emits: ["dodestroy", "pick"],
  components: {
    TinyScrollbar: Scrollbar
  },
  props: {
    emitter: Object
  },
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _hoisted_1 = ["disabled", "onClick"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_scrollbar = resolveComponent("tiny-scrollbar");
  return openBlock(), createBlock(Transition, {
    name: "tiny-zoom-in-top",
    onBeforeEnter: _ctx.handleMenuEnter,
    onAfterLeave: _ctx.emitDestroy,
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        {
          ref: "popper",
          style: normalizeStyle({
            width: _ctx.state.width + "px"
          }),
          class: normalizeClass([_ctx.state.popperClass, "tiny-picker-panel tiny-time-select tiny-popper"])
        },
        [createVNode(_component_tiny_scrollbar, {
          noresize: "",
          "wrap-class": "tiny-picker-panel__content"
        }, {
          default: withCtx(function() {
            return [(openBlock(true), createElementBlock(
              Fragment,
              null,
              renderList(_ctx.state.items, function(item) {
                return openBlock(), createElementBlock("div", {
                  class: normalizeClass(["tiny-time-select__item", {
                    selected: _ctx.state.value === item.value,
                    disabled: item.disabled,
                    default: item.value === _ctx.state.default
                  }]),
                  disabled: item.disabled,
                  key: item.value,
                  onClick: function onClick($event) {
                    return _ctx.handleClick(item);
                  }
                }, toDisplayString(item.value), 11, _hoisted_1);
              }),
              128
              /* KEYED_FRAGMENT */
            ))];
          }),
          _: 1
          /* STABLE */
        })],
        6
        /* CLASS, STYLE */
      ), [[vShow, _ctx.state.visible]])];
    }),
    _: 1
    /* STABLE */
  }, 8, ["onBeforeEnter", "onAfterLeave"]);
}
var TimePanel = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.13.0";
TimePanel.install = function(Vue) {
  Vue.component(TimePanel.name, TimePanel);
};
TimePanel.version = version;
export {
  TimePanel as default
};
