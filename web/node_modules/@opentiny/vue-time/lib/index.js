import { renderless, api } from "@opentiny/vue-renderless/time/vue";
import { defineComponent, $prefix, setup as _setup } from "@opentiny/vue-common";
import TimeSpinner from "@opentiny/vue-time-spinner";
import { resolveComponent, openBlock, createBlock, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, createVNode, toDisplayString, vShow } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

import "@opentiny/vue-theme/time-panel/index.css";
var _sfc_main = /* @__PURE__ */ defineComponent({
  name: $prefix + "Time",
  emits: ["dodestroy", "pick", "select-range"],
  components: {
    TimeSpinner
  },
  props: {
    show: Boolean,
    timeArrowControl: Boolean,
    emitter: Object,
    value: Date,
    step: {
      type: Object,
      default: function _default() {
        return {
          hour: 1,
          minute: 1,
          second: 1
        };
      }
    }
  },
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _hoisted_1 = {
  class: "tiny-time-panel__footer"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_time_spinner = resolveComponent("time-spinner");
  return openBlock(), createBlock(Transition, {
    name: "tiny-zoom-in-top",
    onAfterLeave: _cache[2] || (_cache[2] = function($event) {
      return _ctx.$emit("dodestroy");
    }),
    persisted: ""
  }, {
    default: withCtx(function() {
      return [withDirectives(createElementVNode(
        "div",
        {
          class: normalizeClass(["tiny-time-panel tiny-popper", _ctx.state.popperClass])
        },
        [createElementVNode(
          "div",
          {
            class: normalizeClass(["tiny-time-panel__content", {
              "has-seconds": _ctx.state.showSeconds
            }])
          },
          [createVNode(_component_time_spinner, {
            ref: "spinner",
            step: _ctx.step,
            onChange: _ctx.handleChange,
            "arrow-control": _ctx.state.useArrow,
            "show-seconds": _ctx.state.showSeconds,
            "am-pm-mode": _ctx.state.amPmMode,
            onSelectRange: _ctx.setSelectionRange,
            date: _ctx.state.date
          }, null, 8, ["step", "onChange", "arrow-control", "show-seconds", "am-pm-mode", "onSelectRange", "date"])],
          2
          /* CLASS */
        ), createElementVNode("div", _hoisted_1, [createElementVNode(
          "button",
          {
            type: "button",
            class: "tiny-time-panel__btn cancel",
            onClick: _cache[0] || (_cache[0] = function() {
              return _ctx.handleCancel && _ctx.handleCancel.apply(_ctx, arguments);
            })
          },
          toDisplayString(_ctx.t("ui.datepicker.cancel")),
          1
          /* TEXT */
        ), createElementVNode(
          "button",
          {
            type: "button",
            class: normalizeClass(["tiny-time-panel__btn", {
              confirm: !_ctx.state.disabled
            }]),
            onClick: _cache[1] || (_cache[1] = function($event) {
              return _ctx.handleConfirm();
            })
          },
          toDisplayString(_ctx.t("ui.datepicker.confirm")),
          3
          /* TEXT, CLASS */
        )])],
        2
        /* CLASS */
      ), [[vShow, _ctx.state.visible]])];
    }),
    _: 1
    /* STABLE */
  });
}
var Time = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.13.0";
Time.install = function(Vue) {
  Vue.component(Time.name, Time);
};
Time.version = version;
export {
  Time as default
};
