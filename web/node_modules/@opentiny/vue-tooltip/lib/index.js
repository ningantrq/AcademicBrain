function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var tooltipProps = _extends({}, $props, {
  visible: {
    type: String,
    default: function _default() {
      return "always";
    },
    validator: function validator(value) {
      return ["always", "auto"].includes(value);
    }
  },
  adjustArrow: {
    type: Boolean,
    default: function _default2() {
      return false;
    }
  },
  appendToBody: {
    type: Boolean,
    default: function _default3() {
      return true;
    }
  },
  arrowOffset: {
    type: Number,
    default: function _default4() {
      return 0;
    }
  },
  content: {
    type: [String, Object]
  },
  disabled: {
    type: Boolean
  },
  enterable: {
    type: Boolean,
    default: function _default5() {
      return true;
    }
  },
  hideAfter: {
    type: Number,
    default: function _default6() {
      return 0;
    }
  },
  manual: {
    type: Boolean
  },
  modelValue: {
    type: Boolean
  },
  offset: {
    default: function _default7() {
      return 0;
    }
  },
  effect: {
    type: String,
    default: function _default8() {
      return "dark";
    }
  },
  openDelay: {
    type: Number,
    default: function _default9() {
      return 0;
    }
  },
  closeDelay: {
    type: Number,
    default: function _default10() {
      return 100;
    }
  },
  placement: {
    type: String,
    default: function _default11() {
      return "bottom";
    }
  },
  popper: {},
  popperClass: {
    type: String
  },
  popperOptions: {
    default: function _default12() {
      return {};
    }
  },
  pre: {
    type: Boolean
  },
  reference: {},
  renderContent: {
    type: Function
  },
  tabindex: {
    type: Number,
    default: function _default13() {
      return 0;
    }
  },
  transition: {
    type: String,
    default: function _default14() {
      return "tiny-fade-in-linear";
    }
  },
  type: {
    type: String,
    validator: function validator2(value) {
      return Boolean(~["normal", "warning", "error", "info", "success"].indexOf(value));
    }
  },
  visibleArrow: {
    type: Boolean,
    default: function _default15() {
      return true;
    }
  },
  genArrowByHtml: {
    type: Boolean,
    default: function _default16() {
      return true;
    }
  },
  zIndex: {
    type: String,
    default: function _default17() {
      return "next";
    }
  }
});
var Tooltip = defineComponent({
  name: $prefix + "Tooltip",
  componentName: "Tooltip",
  props: tooltipProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
Tooltip.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Tooltip.install = function(Vue) {
  Vue.component(Tooltip.name, Tooltip);
};
Tooltip.version = version;
export {
  Tooltip as default
};
