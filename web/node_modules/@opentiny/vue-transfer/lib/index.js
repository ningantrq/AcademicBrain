function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import "@opentiny/vue-theme/transfer/index.css";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return PcTemplate;
};
var $constants = {
  ISCHECKED: "is-checked",
  DROPPANEL: ".tiny-transfer-panel__list",
  TRANSFERPANEL: ".tiny-transfer-panel__item"
};
var Transfer = defineComponent({
  name: $prefix + "Transfer",
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    buttonTexts: {
      type: Array,
      default: function _default2() {
        return [];
      }
    },
    columns: Array,
    data: {
      type: Array,
      default: function _default3() {
        return [];
      }
    },
    dropConfig: Object,
    filterMethod: Function,
    filterPlaceholder: {
      type: String,
      default: ""
    },
    filterable: Boolean,
    format: {
      type: Object,
      default: function _default4() {
        return {};
      }
    },
    leftDefaultChecked: {
      type: Array,
      default: function _default5() {
        return [];
      }
    },
    modelValue: {
      type: Array,
      default: function _default6() {
        return [];
      }
    },
    pagerOp: {
      type: Object,
      default: function _default7() {
        return {
          mode: "fixed",
          pageVO: {
            currentPage: 1,
            pageSize: 10
          }
        };
      }
    },
    props: {
      type: Object,
      default: function _default8() {
        return {
          label: "label",
          key: "key",
          disabled: "disabled"
        };
      }
    },
    render: Object,
    renderContent: Function,
    renderType: String,
    rightDefaultChecked: {
      type: Array,
      default: function _default9() {
        return [];
      }
    },
    showAllBtn: Boolean,
    showPager: {
      type: Boolean,
      default: false
    },
    targetOrder: {
      type: String,
      default: "original"
    },
    titles: {
      type: Array,
      default: function _default10() {
        return [];
      }
    },
    toLeftDisable: {
      type: Boolean,
      default: true
    },
    toRightDisable: {
      type: Boolean,
      default: true
    },
    treeOp: Object,
    beforeTransfer: Function
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
Transfer.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Transfer.install = function(Vue) {
  Vue.component(Transfer.name, Transfer);
};
Transfer.version = version;
export {
  Transfer as default
};
