import { renderless as renderless$1, api as api$1 } from "@opentiny/vue-renderless/tree/vue";
import { directive, h, setup as _setup, isVue2, defineComponent, props } from "@opentiny/vue-common";
import { iconChevronRight, iconLoading, iconArrowBottom, iconEdit, iconMinusSquare, iconPlusSquare, iconWarning, iconMarkOn } from "@opentiny/vue-icon";
import Switch from "@opentiny/vue-switch";
import Popover from "@opentiny/vue-popover";
import Button from "@opentiny/vue-button";
import Checkbox from "@opentiny/vue-checkbox";
import Clickoutside from "@opentiny/vue-renderless/common/deps/clickoutside";
import { renderless, api } from "@opentiny/vue-renderless/tree-node/vue";
import CollapseTransition from "@opentiny/vue-collapse-transition";
import Radio from "@opentiny/vue-radio";
import Input from "@opentiny/vue-input";
import { resolveComponent, resolveDirective, openBlock, createElementBlock, withDirectives, createElementVNode, normalizeClass, withModifiers, normalizeStyle, Fragment, renderList, toDisplayString, createBlock, resolveDynamicComponent, createCommentVNode, renderSlot, withKeys, createVNode, withCtx, vShow, createTextVNode } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main$1 = {
  name: "TreeNode",
  componentName: "TreeNode",
  directives: directive({
    Clickoutside
  }),
  inject: ["TreeRoot"],
  provide: function provide() {
    return {
      parentTree: this
    };
  },
  emits: ["update:modelValue", "hook-updated", "node-expand", "radio-change", "tree-node-expand", "closeMenu"],
  props: {
    node: {
      default: function _default() {
        return {};
      }
    },
    props: {},
    expandIcon: Object,
    shrinkIcon: Object,
    expandIconColor: String,
    shrinkIconColor: String,
    renderContent: Function,
    renderAfterExpand: {
      type: Boolean,
      default: true
    },
    showCheckbox: {
      type: Boolean,
      default: false
    },
    showRadio: {
      type: Boolean,
      default: false
    },
    currentRadio: {
      type: Object,
      default: function _default2() {
        return {
          value: null
        };
      }
    },
    showNumber: {
      type: Boolean,
      default: false
    },
    collapsible: {
      type: Boolean,
      default: true
    },
    nodeHeight: Number,
    checkEasily: {
      type: Boolean,
      default: false
    },
    action: Object,
    nodeKey: String,
    theme: String,
    showLine: Boolean
  },
  components: {
    CollapseTransition,
    Checkbox,
    TinyRadio: Radio,
    TinyInput: Input,
    IconChevronRight: iconChevronRight(),
    IconLoading: iconLoading(),
    IconArrowBottom: iconArrowBottom(),
    IconEdit: iconEdit(),
    IconMinusSquare: iconMinusSquare(),
    IconPlusSquare: iconPlusSquare(),
    MenuContext: {
      props: {
        node: {
          required: true
        }
      },
      render: function render() {
        var tree = this.$parent.state.tree;
        var data = this.node.data;
        return tree && tree.scopedSlots && tree.scopedSlots.contextmenu && tree.scopedSlots.contextmenu({
          data,
          node: this.node
        });
      }
    },
    NodeContent: {
      props: {
        node: {
          required: true
        },
        renderContent: Function
      },
      inject: ["TreeRoot", "parentTree"],
      render: function render2() {
        var parent = this.$parent;
        var tree = parent.state.tree;
        var node = this.node;
        var data = node.data, store = node.store;
        return this.renderContent ? this.renderContent(h, {
          _self: this,
          node,
          data,
          store
        }) : tree.scopedSlots.default && tree.scopedSlots.default({
          node,
          data
        }) || h("span", {
          class: "tiny-tree-node__label"
        }, node.label);
      }
    }
  },
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api,
      mono: true,
      extendOptions: {
        isVue2
      }
    });
  }
};
var _hoisted_1$1 = {
  class: "tiny-tree-node__wrapper"
};
var _hoisted_2$1 = ["aria-expanded", "aria-disabled", "aria-checked", "draggable"];
var _hoisted_3$1 = {
  class: "tiny-tree-node__content-left"
};
var _hoisted_4$1 = {
  key: 0,
  class: "tree-node-number"
};
var _hoisted_5$1 = {
  key: 4,
  class: "tiny-tree-node__loading tiny-svg circular",
  viewBox: "25 25 50 50"
};
var _hoisted_6$1 = /* @__PURE__ */ createElementVNode(
  "circle",
  {
    class: "path",
    cx: "50",
    cy: "50",
    r: "24",
    fill: "none"
  },
  null,
  -1
  /* HOISTED */
);
var _hoisted_7$1 = [_hoisted_6$1];
var _hoisted_8$1 = {
  key: 6,
  class: "tiny-tree-node__content-box"
};
var _hoisted_9$1 = {
  class: "tiny-tree-node__content-right"
};
var _hoisted_10$1 = ["title"];
var _hoisted_11$1 = ["title"];
var _hoisted_12$1 = ["title"];
var _hoisted_13$1 = ["aria-expanded"];
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_checkbox = resolveComponent("checkbox");
  var _component_tiny_radio = resolveComponent("tiny-radio");
  var _component_tiny_input = resolveComponent("tiny-input");
  var _component_node_content = resolveComponent("node-content");
  var _component_icon_edit = resolveComponent("icon-edit");
  var _component_icon_minus_square = resolveComponent("icon-minus-square");
  var _component_icon_plus_square = resolveComponent("icon-plus-square");
  var _component_tree_node = resolveComponent("tree-node", true);
  var _component_collapse_transition = resolveComponent("collapse-transition");
  var _component_menu_context = resolveComponent("menu-context");
  var _directive_clickoutside = resolveDirective("clickoutside");
  return openBlock(), createElementBlock("div", _hoisted_1$1, [withDirectives(createElementVNode("div", {
    class: normalizeClass(["tiny-tree-node", {
      "is-indeterminate": !$props.node.disabled && $props.node.indeterminate,
      "is-current": $props.node.isCurrent,
      "is-hidden": !$props.node.visible,
      "is-checked": !$props.node.disabled && $props.node.checked,
      "is-focusable": !$props.node.disabled,
      "is-expanded": _ctx.state.expanded,
      "is-loading": $props.node.loading,
      "is-disabled": $props.node.disabled,
      "is-leaf": $props.node.isLeaf,
      "is-root": $props.node.level === 1,
      "show-line": $props.showLine,
      "show-checkbox": $props.showCheckbox
    }]),
    role: "treeitem",
    tabindex: "-1",
    "aria-expanded": _ctx.state.expanded,
    "aria-disabled": $props.node.disabled,
    "aria-checked": $props.node.checked,
    draggable: _ctx.state.tree.draggable,
    onClick: _cache[11] || (_cache[11] = withModifiers(function() {
      return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);
    }, ["stop"])),
    onContextmenu: _cache[12] || (_cache[12] = withModifiers(function($event) {
      return _ctx.handleContextMenu($event);
    }, ["stop"])),
    onDragstart: _cache[13] || (_cache[13] = withModifiers(function() {
      return _ctx.handleDragStart && _ctx.handleDragStart.apply(_ctx, arguments);
    }, ["stop"])),
    onDragover: _cache[14] || (_cache[14] = withModifiers(function() {
      return _ctx.handleDragOver && _ctx.handleDragOver.apply(_ctx, arguments);
    }, ["stop"])),
    onDragend: _cache[15] || (_cache[15] = withModifiers(function() {
      return _ctx.handleDragEnd && _ctx.handleDragEnd.apply(_ctx, arguments);
    }, ["stop"])),
    onDrop: _cache[16] || (_cache[16] = withModifiers(function() {
      return _ctx.handleDrop && _ctx.handleDrop.apply(_ctx, arguments);
    }, ["stop"])),
    ref: "node"
  }, [createElementVNode(
    "div",
    {
      class: normalizeClass({
        "tiny-tree-node__content": true,
        "tiny-tree-node__content-number": $props.showNumber
      }),
      style: normalizeStyle({
        "height": $props.nodeHeight ? $props.nodeHeight + "px" : void 0,
        "line-height": $props.nodeHeight ? $props.nodeHeight + "px" : void 0
      }),
      onClick: _cache[9] || (_cache[9] = function($event) {
        return _ctx.handleContentClick($props.node, $props.currentRadio);
      })
    },
    [(openBlock(true), createElementBlock(
      Fragment,
      null,
      renderList($props.showLine ? 1 : $props.node.level - 1, function(i) {
        return openBlock(), createElementBlock(
          "span",
          {
            class: "tiny-tree-node__content-indent",
            style: normalizeStyle({
              width: _ctx.state.computedIndent,
              flexShrink: 0
            })
          },
          null,
          4
          /* STYLE */
        );
      }),
      256
      /* UNKEYED_FRAGMENT */
    )), createElementVNode("div", _hoisted_3$1, [$props.showNumber ? (openBlock(), createElementBlock(
      "span",
      _hoisted_4$1,
      toDisplayString($props.node.data.number),
      1
      /* TEXT */
    )) : (openBlock(), createElementBlock(
      Fragment,
      {
        key: 1
      },
      [!$props.node.isLeaf ? (openBlock(), createElementBlock("span", {
        key: 0,
        class: "tree-node-icon",
        onClick: _cache[0] || (_cache[0] = function($event) {
          return _ctx.handleExpandIconClick($event, $props.node);
        })
      }, [_ctx.state.expandIcon !== void 0 && _ctx.state.shrinkIcon !== void 0 ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.state.expanded ? _ctx.state.shrinkIcon : _ctx.state.expandIcon), {
        key: 0,
        fill: _ctx.state.expanded ? _ctx.state.shrinkIconColor : _ctx.state.expandIconColor,
        class: normalizeClass(["tiny-tree-node__expand-icon", {
          "is-leaf": $props.node.isLeaf
        }])
      }, null, 8, ["fill", "class"])) : (openBlock(), createBlock(resolveDynamicComponent(_ctx.state.computedExpandIcon), {
        key: 1,
        class: normalizeClass(["tiny-tree-node__expand-icon", {
          "is-leaf": $props.node.isLeaf,
          expanded: !$props.node.isLeaf && _ctx.state.expanded,
          "is-saas-theme": _ctx.state.isSaaSTheme
        }])
      }, null, 8, ["class"]))])) : createCommentVNode("v-if", true)],
      64
      /* STABLE_FRAGMENT */
    )), $props.showCheckbox ? (openBlock(), createBlock(_component_checkbox, {
      key: 2,
      modelValue: $props.node.checked,
      ref: "checkbox",
      indeterminate: $props.node.indeterminate,
      disabled: !!$props.node.disabled,
      "validate-event": false,
      onChange: _ctx.handleCheckChange
    }, null, 8, ["modelValue", "indeterminate", "disabled", "onChange"])) : createCommentVNode("v-if", true), $props.showRadio ? (openBlock(), createBlock(_component_tiny_radio, {
      key: 3,
      "model-value": $props.currentRadio.value,
      "onUpdate:modelValue": _cache[1] || (_cache[1] = function($event) {
        return _ctx.$emit("radio-change", $event);
      }),
      "validate-event": false,
      label: $props.node.id,
      disabled: !!$props.node.disabled
    }, null, 8, ["model-value", "label", "disabled"])) : createCommentVNode("v-if", true), $props.node.loading ? (openBlock(), createElementBlock("svg", _hoisted_5$1, _hoisted_7$1)) : createCommentVNode("v-if", true), renderSlot(_ctx.$slots, "prefix", {
      node: $props.node
    }), $props.action.type === "edit" && $props.action.node && $props.action.node === $props.node ? (openBlock(), createBlock(_component_tiny_input, {
      key: 5,
      modelValue: $props.action.label,
      "onUpdate:modelValue": _cache[2] || (_cache[2] = function($event) {
        return $props.action.label = $event;
      }),
      ref: "editInput",
      autofocus: "",
      clearable: "",
      onKeyup: _cache[3] || (_cache[3] = withKeys(function($event) {
        return _ctx.saveEdit($event);
      }, ["enter"])),
      onBlur: _cache[4] || (_cache[4] = function($event) {
        return _ctx.saveEdit($event);
      }),
      onClick: _cache[5] || (_cache[5] = withModifiers(function($event) {
        return $event.stopPropagation();
      }, ["stop"]))
    }, null, 8, ["modelValue"])) : (openBlock(), createElementBlock("div", _hoisted_8$1, [createVNode(_component_node_content, {
      node: $props.node,
      "render-content": $props.renderContent
    }, null, 8, ["node", "render-content"])])), renderSlot(_ctx.$slots, "suffix", {
      node: $props.node
    })]), createElementVNode("div", _hoisted_9$1, [renderSlot(_ctx.$slots, "operation", {
      node: $props.node
    }), $props.action.show ? (openBlock(), createElementBlock(
      Fragment,
      {
        key: 0
      },
      [createElementVNode("span", {
        title: _ctx.t("ui.base.edit")
      }, [!$props.action.deleteDisabled.includes($props.node.data[$props.nodeKey]) ? (openBlock(), createBlock(_component_icon_edit, {
        key: 0,
        onClick: _cache[6] || (_cache[6] = withModifiers(function($event) {
          return _ctx.openEdit($props.node);
        }, ["stop"]))
      })) : createCommentVNode("v-if", true)], 8, _hoisted_10$1), createElementVNode("span", {
        title: _ctx.t("ui.base.delete")
      }, [!$props.action.editDisabled.includes($props.node.data[$props.nodeKey]) ? (openBlock(), createBlock(_component_icon_minus_square, {
        key: 0,
        onClick: _cache[7] || (_cache[7] = withModifiers(function($event) {
          return _ctx.deleteNode($event, $props.node);
        }, ["stop"]))
      })) : createCommentVNode("v-if", true)], 8, _hoisted_11$1), createElementVNode("span", {
        title: _ctx.t("ui.tree.newNodeTitle")
      }, [!$props.node.data._isNewNode && !$props.action.addDisabled.includes($props.node.data[$props.nodeKey]) ? (openBlock(), createBlock(_component_icon_plus_square, {
        key: 0,
        onClick: _cache[8] || (_cache[8] = withModifiers(function($event) {
          return _ctx.addNode($props.node);
        }, ["stop"]))
      })) : createCommentVNode("v-if", true)], 8, _hoisted_12$1)],
      64
      /* STABLE_FRAGMENT */
    )) : createCommentVNode("v-if", true)])],
    6
    /* CLASS, STYLE */
  ), $props.node.childNodes.length ? (openBlock(), createBlock(_component_collapse_transition, {
    key: 0
  }, {
    default: withCtx(function() {
      return [!$props.renderAfterExpand || _ctx.state.childNodeRendered ? withDirectives((openBlock(), createElementBlock("div", {
        key: 0,
        class: "tiny-tree-node__children",
        role: "group",
        "aria-expanded": _ctx.state.expanded,
        style: normalizeStyle({
          "margin-left": $props.showLine ? _ctx.state.computedIndent : 0
        })
      }, [$props.showLine ? (openBlock(), createElementBlock(
        "span",
        {
          key: 0,
          class: "tiny-tree-node__children-indent",
          style: normalizeStyle({
            width: _ctx.state.computedIndent,
            left: "-" + _ctx.state.computedIndent
          })
        },
        null,
        4
        /* STYLE */
      )) : createCommentVNode("v-if", true), (openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList($props.node.childNodes, function(child) {
          return openBlock(), createBlock(_component_tree_node, {
            action: $props.action,
            "show-radio": $props.showRadio,
            theme: $props.theme,
            "current-radio": $props.currentRadio,
            "render-content": $props.renderContent,
            "expand-icon": _ctx.state.expandIcon,
            "shrink-icon": _ctx.state.shrinkIcon,
            "expand-icon-color": _ctx.state.expandIconColor,
            "shrink-icon-color": _ctx.state.shrinkIconColor,
            "render-after-expand": $props.renderAfterExpand,
            "show-checkbox": $props.showCheckbox,
            "show-number": $props.showNumber,
            "node-height": $props.nodeHeight,
            key: _ctx.getNodeKey(child),
            "node-key": $props.nodeKey,
            "check-easily": $props.checkEasily,
            node: child,
            "show-line": $props.showLine,
            onNodeExpand: _ctx.handleChildNodeExpand,
            onRadioChange: _cache[10] || (_cache[10] = function($event) {
              return _ctx.$emit("radio-change", $event);
            })
          }, {
            prefix: withCtx(function(slotScoped) {
              return [renderSlot(_ctx.$slots, "prefix", {
                node: slotScoped.node
              })];
            }),
            suffix: withCtx(function(slotScoped) {
              return [renderSlot(_ctx.$slots, "suffix", {
                node: slotScoped.node
              })];
            }),
            operation: withCtx(function(slotScoped) {
              return [renderSlot(_ctx.$slots, "operation", {
                node: slotScoped.node
              })];
            }),
            _: 2
            /* DYNAMIC */
          }, 1032, ["action", "show-radio", "theme", "current-radio", "render-content", "expand-icon", "shrink-icon", "expand-icon-color", "shrink-icon-color", "render-after-expand", "show-checkbox", "show-number", "node-height", "node-key", "check-easily", "node", "show-line", "onNodeExpand"]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))], 12, _hoisted_13$1)), [[vShow, _ctx.state.expanded]]) : createCommentVNode("v-if", true)];
    }),
    _: 3
    /* FORWARDED */
  })) : createCommentVNode("v-if", true)], 42, _hoisted_2$1), [[vShow, $props.node.visible]]), _ctx.state.showMenu && $options.TreeRoot.showContextmenu ? withDirectives((openBlock(), createElementBlock(
    "div",
    {
      key: 0,
      ref: "menuContext",
      class: "tiny-tree-node__menu",
      style: normalizeStyle(_ctx.state.menuposition),
      onContextmenu: _cache[17] || (_cache[17] = withModifiers(function() {
      }, ["stop"])),
      onClick: _cache[18] || (_cache[18] = withModifiers(function() {
      }, ["stop"]))
    },
    [createVNode(_component_menu_context, {
      node: $props.node
    }, null, 8, ["node"])],
    36
    /* STYLE, NEED_HYDRATION */
  )), [[_directive_clickoutside, _ctx.closeMenu]]) : createCommentVNode("v-if", true)]);
}
var TreeNode = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render$1]]);
var _sfc_main = /* @__PURE__ */ defineComponent({
  directives: directive({
    Clickoutside
  }),
  props: [].concat(props, ["data", "dataset", "parentKey", "expandIcon", "shrinkIcon", "expandIconColor", "shrinkIconColor", "emptyText", "renderAfterExpand", "nodeKey", "checkStrictly", "defaultExpandAll", "expandOnClickNode", "checkOnClickNode", "checkDescendants", "autoExpandParent", "defaultCheckedKeys", "defaultExpandedKeys", "defaultExpandedKeysHighlight", "currentNodeKey", "renderContent", "showCheckbox", "draggable", "allowDrag", "allowDrop", "props", "lazy", "highlightCurrent", "load", "filterNodeMethod", "accordion", "indent", "icon", "iconTriggerClickNode", "showRadio", "showContextmenu", "showNumber", "collapsible", "nodeHeight", "showCheckEasily", "size", "deleteDisabledKeys", "editDisabledKeys", "addDisabledKeys", "theme", "viewType", "showAuxi", "pathSplit", "filterPlainMethod", "afterLoad", "lazyCurrent", "baseIndent", "showLine"]),
  components: {
    TreeNode,
    IconWarning: iconWarning(),
    IconMarkOn: iconMarkOn(),
    TinyPopover: Popover,
    TinyCheckbox: Checkbox,
    TinyButton: Button,
    TinySwitch: Switch
  },
  emits: ["node-expand", "node-drag-leave", "check-change", "check", "node-drag-over", "node-drag-enter", "node-drag-start", "node-drag-end", "node-drop", "current-change", "node-click", "leave-plain-view", "check-plain", "load-data"],
  provide: function provide2() {
    return {
      parentTree: this,
      TreeRoot: this
    };
  },
  setup: function setup2(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless: renderless$1,
      api: api$1
    });
  }
});
var _hoisted_1 = {
  class: "tiny-tree__plain-node-title"
};
var _hoisted_2 = {
  class: "tiny-tree__plain-node-title-txt"
};
var _hoisted_3 = {
  class: "tiny-tree__plain-node-title-loc"
};
var _hoisted_4 = {
  key: 0,
  class: "tiny-tree__plain-node-auxi"
};
var _hoisted_5 = {
  key: 2,
  class: "tiny-tree__empty-block"
};
var _hoisted_6 = {
  class: "tiny-tree__empty-text"
};
var _hoisted_7 = {
  class: "tiny-tree__drop-indicator",
  ref: "dropIndicator"
};
var _hoisted_8 = {
  key: 3,
  class: "tiny-tree__strict-bottom"
};
var _hoisted_9 = {
  class: "tiny-tree__strict-bottom-content"
};
var _hoisted_10 = {
  class: "tiny-tree__bottom-text"
};
var _hoisted_11 = {
  class: "tiny-tree__del-body"
};
var _hoisted_12 = {
  class: "tiny-tree__del-icon"
};
var _hoisted_13 = {
  class: "tiny-tree__del-content"
};
var _hoisted_14 = {
  key: 0
};
var _hoisted_15 = {
  class: "tiny-tree__del-checkbox"
};
var _hoisted_16 = {
  class: "tiny-tree__del-footer"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tree_node = resolveComponent("tree-node");
  var _component_tiny_checkbox = resolveComponent("tiny-checkbox");
  var _component_icon_mark_on = resolveComponent("icon-mark-on");
  var _component_tiny_switch = resolveComponent("tiny-switch");
  var _component_icon_warning = resolveComponent("icon-warning");
  var _component_tiny_button = resolveComponent("tiny-button");
  var _component_tiny_popover = resolveComponent("tiny-popover");
  var _directive_clickoutside = resolveDirective("clickoutside");
  return openBlock(), createElementBlock(
    "div",
    {
      class: normalizeClass(["tiny-tree", {
        "tiny-tree--highlight-current": _ctx.highlightCurrent,
        "is-dragging": !!_ctx.state.dragState.draggingNode,
        "is-drop-not-allow": !_ctx.state.dragState.allowDrop,
        "is-drop-inner": _ctx.state.dragState.dropType === "inner",
        "tiny-tree--small": _ctx.size === "small"
      }]),
      role: "tree"
    },
    [_ctx.viewType === "tree" ? (openBlock(true), createElementBlock(
      Fragment,
      {
        key: 0
      },
      renderList(_ctx.state.root.childNodes, function(child) {
        return openBlock(), createBlock(_component_tree_node, {
          action: _ctx.state.action,
          "show-radio": _ctx.showRadio,
          theme: _ctx.theme,
          "show-number": _ctx.showNumber,
          collapsible: _ctx.collapsible,
          "node-height": _ctx.nodeHeight,
          "current-radio": _ctx.state.currentRadio,
          onRadioChange: _cache[0] || (_cache[0] = function($event) {
            return _ctx.state.currentRadio.value = $event;
          }),
          "expand-icon": _ctx.expandIcon,
          "shrink-icon": _ctx.shrinkIcon,
          "expand-icon-color": _ctx.expandIconColor,
          "shrink-icon-color": _ctx.shrinkIconColor,
          node: child,
          props: _ctx.props,
          "render-after-expand": _ctx.renderAfterExpand,
          "show-checkbox": _ctx.showCheckbox,
          key: _ctx.getNodeKey(child),
          "node-key": _ctx.nodeKey,
          "render-content": _ctx.renderContent,
          onNodeExpand: _ctx.handleNodeExpand,
          "check-easily": _ctx.state.checkEasily,
          "show-line": _ctx.showLine
        }, {
          prefix: withCtx(function(slotScoped) {
            return [renderSlot(_ctx.$slots, "prefix", {
              node: slotScoped.node
            })];
          }),
          suffix: withCtx(function(slotScoped) {
            return [renderSlot(_ctx.$slots, "suffix", {
              node: slotScoped.node
            })];
          }),
          operation: withCtx(function(slotScoped) {
            return [renderSlot(_ctx.$slots, "operation", {
              node: slotScoped.node
            })];
          }),
          _: 2
          /* DYNAMIC */
        }, 1032, ["action", "show-radio", "theme", "show-number", "collapsible", "node-height", "current-radio", "expand-icon", "shrink-icon", "expand-icon-color", "shrink-icon-color", "node", "props", "render-after-expand", "show-checkbox", "node-key", "render-content", "onNodeExpand", "check-easily", "show-line"]);
      }),
      128
      /* KEYED_FRAGMENT */
    )) : _ctx.viewType === "plain" ? (openBlock(true), createElementBlock(
      Fragment,
      {
        key: 1
      },
      renderList(_ctx.state.plainNodeStore.filteredNodes, function(plainNode, i) {
        return openBlock(), createElementBlock("div", {
          key: plainNode.nodeKeyPath + "-" + i,
          class: "tiny-tree__plain-node"
        }, [createElementVNode("div", _hoisted_1, [createVNode(_component_tiny_checkbox, {
          modelValue: plainNode.node.checked,
          indeterminate: plainNode.node.indeterminate,
          disabled: !!plainNode.node.disabled,
          onChange: function onChange($event) {
            return _ctx.handleCheckPlainNode($event, plainNode);
          }
        }, null, 8, ["modelValue", "indeterminate", "disabled", "onChange"]), renderSlot(_ctx.$slots, "prefix", {
          node: plainNode.node
        }), renderSlot(_ctx.$slots, "default", {
          node: plainNode.node
        }, function() {
          return [createElementVNode(
            "span",
            _hoisted_2,
            toDisplayString(plainNode.title),
            1
            /* TEXT */
          )];
        }), renderSlot(_ctx.$slots, "suffix", {
          node: plainNode.node
        }, function() {
          return [createElementVNode("span", _hoisted_3, [createVNode(_component_icon_mark_on, {
            onClick: function onClick($event) {
              return _ctx.handleClickPlainNode($event, plainNode);
            }
          }, null, 8, ["onClick"])])];
        })]), _ctx.showAuxi && plainNode.auxi ? (openBlock(), createElementBlock("div", _hoisted_4, [createElementVNode(
          "div",
          null,
          toDisplayString(plainNode.auxi),
          1
          /* TEXT */
        )])) : createCommentVNode("v-if", true)]);
      }),
      128
      /* KEYED_FRAGMENT */
    )) : createCommentVNode("v-if", true), _ctx.state.isEmpty ? (openBlock(), createElementBlock("div", _hoisted_5, [renderSlot(_ctx.$slots, "empty", {}, function() {
      return [createElementVNode(
        "span",
        _hoisted_6,
        toDisplayString(_ctx.state.showEmptyText),
        1
        /* TEXT */
      )];
    })])) : createCommentVNode("v-if", true), withDirectives(createElementVNode(
      "div",
      _hoisted_7,
      null,
      512
      /* NEED_PATCH */
    ), [[vShow, _ctx.state.dragState.showDropIndicator]]), _ctx.state.store.checkStrictly && _ctx.showCheckEasily ? (openBlock(), createElementBlock("div", _hoisted_8, [createElementVNode("div", _hoisted_9, [createVNode(_component_tiny_switch, {
      mini: "",
      onChange: _ctx.switchToggle,
      modelValue: _ctx.state.checkEasily,
      "onUpdate:modelValue": _cache[1] || (_cache[1] = function($event) {
        return _ctx.state.checkEasily = $event;
      })
    }, null, 8, ["onChange", "modelValue"]), createElementVNode("div", _hoisted_10, [renderSlot(_ctx.$slots, "switchText", {}, function() {
      return [createElementVNode(
        "span",
        null,
        toDisplayString(_ctx.t("ui.tree.switchText")),
        1
        /* TEXT */
      )];
    })])])])) : createCommentVNode("v-if", true), createVNode(_component_tiny_popover, {
      ref: "deletePopover",
      modelValue: _ctx.state.action.popoverVisible,
      "onUpdate:modelValue": _cache[3] || (_cache[3] = function($event) {
        return _ctx.state.action.popoverVisible = $event;
      }),
      "popper-class": "tiny-tree__del-popover",
      placement: "top",
      width: _ctx.state.action.isLeaf ? 200 : 270,
      trigger: "manual",
      reference: _ctx.state.action.referenceElm
    }, {
      default: withCtx(function() {
        return [withDirectives((openBlock(), createElementBlock("div", _hoisted_11, [createElementVNode("div", _hoisted_12, [createVNode(_component_icon_warning)]), createElementVNode("div", _hoisted_13, [_ctx.state.action.isLeaf ? (openBlock(), createElementBlock(
          "div",
          _hoisted_14,
          toDisplayString(_ctx.t("ui.tree.deleteTip")),
          1
          /* TEXT */
        )) : (openBlock(), createElementBlock(
          Fragment,
          {
            key: 1
          },
          [createElementVNode(
            "div",
            null,
            toDisplayString(_ctx.t("ui.tree.preserveSubnodeTip")),
            1
            /* TEXT */
          ), createElementVNode("div", _hoisted_15, [createVNode(_component_tiny_checkbox, {
            modelValue: _ctx.state.action.isSaveChildNode,
            "onUpdate:modelValue": _cache[2] || (_cache[2] = function($event) {
              return _ctx.state.action.isSaveChildNode = $event;
            }),
            ref: "deleteCheckbox"
          }, {
            default: withCtx(function() {
              return [createTextVNode(
                toDisplayString(_ctx.t("ui.tree.preserveSubnodeData")),
                1
                /* TEXT */
              )];
            }),
            _: 1
            /* STABLE */
          }, 8, ["modelValue"])])],
          64
          /* STABLE_FRAGMENT */
        ))])])), [[_directive_clickoutside, _ctx.cancelDelete]]), createElementVNode("div", _hoisted_16, [createVNode(_component_tiny_button, {
          onClick: _ctx.cancelDelete
        }, {
          default: withCtx(function() {
            return [createTextVNode(
              toDisplayString(_ctx.t("ui.base.cancel")),
              1
              /* TEXT */
            )];
          }),
          _: 1
          /* STABLE */
        }, 8, ["onClick"]), createVNode(_component_tiny_button, {
          type: "primary",
          onClick: _ctx.deleteAction
        }, {
          default: withCtx(function() {
            return [createTextVNode(
              toDisplayString(_ctx.t("ui.base.confirm")),
              1
              /* TEXT */
            )];
          }),
          _: 1
          /* STABLE */
        }, 8, ["onClick"])])];
      }),
      _: 1
      /* STABLE */
    }, 8, ["modelValue", "width", "reference"])],
    2
    /* CLASS */
  );
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
