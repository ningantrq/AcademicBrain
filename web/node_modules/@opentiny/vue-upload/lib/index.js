function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import uploadAjax from "@opentiny/vue-renderless/common/deps/upload-ajax";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var uploadProps = _extends({}, $props, {
  accept: String,
  action: {
    type: String,
    default: ""
  },
  autoUpload: Boolean,
  beforeUpload: Function,
  pasteUpload: Boolean,
  data: Object,
  disabled: Boolean,
  drag: Boolean,
  edmToken: {
    type: Object,
    default: function _default() {
      return {};
    }
  },
  fileList: {
    type: Array,
    default: function _default2() {
      return [];
    }
  },
  headers: Object,
  httpRequest: {
    type: Function,
    default: uploadAjax
  },
  isFolder: {
    type: Boolean,
    default: false
  },
  limit: Number,
  listType: String,
  multiple: Boolean,
  name: {
    type: String,
    default: "file"
  },
  onError: Function,
  onExceed: Function,
  onPreview: {
    type: Function,
    default: function _default3() {
    }
  },
  onProgress: Function,
  onRemove: {
    type: Function,
    default: function _default4() {
    }
  },
  onStart: Function,
  onSuccess: Function,
  type: String,
  withCredentials: Boolean,
  isHidden: {
    type: Boolean,
    default: false
  },
  scale: {
    type: [Number, String],
    default: 1
  },
  sourceType: {
    type: String,
    default: "picture",
    validator: function validator(val) {
      return val.split("/").every(function(type) {
        return ["picture", "video", "audio"].includes(type);
      });
    }
  },
  displayOnly: {
    type: Boolean,
    default: false
  },
  customClass: [String, Object, Array],
  handleTriggerClick: {
    type: Function,
    default: function _default5() {
    }
  },
  mode: String
});
var Upload = defineComponent({
  name: $prefix + "Upload",
  props: uploadProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template,
      extend: {
        ref: "upload-inner-template"
      }
    });
  }
});
var version = "3.13.0";
Upload.install = function(Vue) {
  Vue.component(Upload.name, Upload);
};
Upload.version = version;
export {
  Upload as default
};
