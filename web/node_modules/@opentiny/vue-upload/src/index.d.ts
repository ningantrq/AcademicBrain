export declare const uploadProps: {
    accept: StringConstructor;
    action: {
        type: StringConstructor;
        default: string;
    };
    autoUpload: BooleanConstructor;
    beforeUpload: FunctionConstructor;
    pasteUpload: BooleanConstructor;
    data: ObjectConstructor;
    disabled: BooleanConstructor;
    drag: BooleanConstructor;
    edmToken: {
        type: ObjectConstructor;
        default: () => {};
    };
    fileList: {
        type: ArrayConstructor;
        default: () => never[];
    };
    headers: ObjectConstructor;
    httpRequest: {
        type: FunctionConstructor;
        default: (option: any) => XMLHttpRequest | undefined;
    };
    isFolder: {
        type: BooleanConstructor;
        default: boolean;
    };
    limit: NumberConstructor;
    listType: StringConstructor;
    multiple: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: string;
    };
    onError: FunctionConstructor;
    onExceed: FunctionConstructor;
    onPreview: {
        type: FunctionConstructor;
        default: () => void;
    };
    onProgress: FunctionConstructor;
    onRemove: {
        type: FunctionConstructor;
        default: () => void;
    };
    onStart: FunctionConstructor;
    onSuccess: FunctionConstructor;
    type: StringConstructor;
    withCredentials: BooleanConstructor;
    isHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    scale: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    sourceType: {
        type: StringConstructor;
        default: string;
        validator(val: string): boolean;
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    customClass: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
    handleTriggerClick: {
        type: FunctionConstructor;
        default: () => void;
    };
    mode: StringConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};
declare const _default: import("@vue/runtime-core").DefineComponent<{
    accept: StringConstructor;
    action: {
        type: StringConstructor;
        default: string;
    };
    autoUpload: BooleanConstructor;
    beforeUpload: FunctionConstructor;
    pasteUpload: BooleanConstructor;
    data: ObjectConstructor;
    disabled: BooleanConstructor;
    drag: BooleanConstructor;
    edmToken: {
        type: ObjectConstructor;
        default: () => {};
    };
    fileList: {
        type: ArrayConstructor;
        default: () => never[];
    };
    headers: ObjectConstructor;
    httpRequest: {
        type: FunctionConstructor;
        default: (option: any) => XMLHttpRequest | undefined;
    };
    isFolder: {
        type: BooleanConstructor;
        default: boolean;
    };
    limit: NumberConstructor;
    listType: StringConstructor;
    multiple: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: string;
    };
    onError: FunctionConstructor;
    onExceed: FunctionConstructor;
    onPreview: {
        type: FunctionConstructor;
        default: () => void;
    };
    onProgress: FunctionConstructor;
    onRemove: {
        type: FunctionConstructor;
        default: () => void;
    };
    onStart: FunctionConstructor;
    onSuccess: FunctionConstructor;
    type: StringConstructor;
    withCredentials: BooleanConstructor;
    isHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    scale: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    sourceType: {
        type: StringConstructor;
        default: string;
        validator(val: string): boolean;
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    customClass: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
    handleTriggerClick: {
        type: FunctionConstructor;
        default: () => void;
    };
    mode: StringConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accept: StringConstructor;
    action: {
        type: StringConstructor;
        default: string;
    };
    autoUpload: BooleanConstructor;
    beforeUpload: FunctionConstructor;
    pasteUpload: BooleanConstructor;
    data: ObjectConstructor;
    disabled: BooleanConstructor;
    drag: BooleanConstructor;
    edmToken: {
        type: ObjectConstructor;
        default: () => {};
    };
    fileList: {
        type: ArrayConstructor;
        default: () => never[];
    };
    headers: ObjectConstructor;
    httpRequest: {
        type: FunctionConstructor;
        default: (option: any) => XMLHttpRequest | undefined;
    };
    isFolder: {
        type: BooleanConstructor;
        default: boolean;
    };
    limit: NumberConstructor;
    listType: StringConstructor;
    multiple: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: string;
    };
    onError: FunctionConstructor;
    onExceed: FunctionConstructor;
    onPreview: {
        type: FunctionConstructor;
        default: () => void;
    };
    onProgress: FunctionConstructor;
    onRemove: {
        type: FunctionConstructor;
        default: () => void;
    };
    onStart: FunctionConstructor;
    onSuccess: FunctionConstructor;
    type: StringConstructor;
    withCredentials: BooleanConstructor;
    isHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    scale: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    sourceType: {
        type: StringConstructor;
        default: string;
        validator(val: string): boolean;
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    customClass: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
    handleTriggerClick: {
        type: FunctionConstructor;
        default: () => void;
    };
    mode: StringConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    name: string;
    disabled: boolean;
    tiny_mode_root: boolean;
    action: string;
    drag: boolean;
    scale: string | number;
    displayOnly: boolean;
    multiple: boolean;
    withCredentials: boolean;
    httpRequest: Function;
    sourceType: string;
    handleTriggerClick: Function;
    isFolder: boolean;
    autoUpload: boolean;
    pasteUpload: boolean;
    edmToken: Record<string, any>;
    fileList: unknown[];
    onPreview: Function;
    onRemove: Function;
    isHidden: boolean;
}, {}>;
export default _default;
