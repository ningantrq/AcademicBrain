import { renderless, api } from "@opentiny/vue-renderless/user-account/vue";
import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import UserContact from "@opentiny/vue-user-contact";
import Logout from "@opentiny/vue-logout";
import { resolveComponent, openBlock, createElementBlock, createVNode, withCtx, createElementVNode, renderSlot } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  components: {
    UserContact,
    Logout
  },
  props: [].concat(props, ["showArrow", "guestRole", "getUserInfo", "getLangData", "getUserImageUrl", "getLogoutUrl", "redirectUrl", "isLocal", "network", "isMock", "isGuestUser", "showLogin", "popperClass", "popperAppendToBody", "beforeLogout"]),
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-user-account"
};
var _hoisted_2 = {
  class: "user-account-pop"
};
var _hoisted_3 = {
  class: "user-account-custom"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_logout = resolveComponent("logout");
  var _component_user_contact = resolveComponent("user-contact");
  return openBlock(), createElementBlock("div", _hoisted_1, [createVNode(_component_user_contact, {
    data: _ctx.state,
    "show-arrow": _ctx.showArrow,
    "popper-class": "tiny-user-account" + (_ctx.popperClass ? " " + _ctx.popperClass : ""),
    "popper-append-to-body": _ctx.popperAppendToBody
  }, {
    default: withCtx(function() {
      return [createElementVNode("div", _hoisted_2, [createElementVNode("div", _hoisted_3, [renderSlot(_ctx.$slots, "default")]), createVNode(_component_logout, {
        "guest-role": _ctx.guestRole,
        "get-logout-url": _ctx.getLogoutUrl,
        "is-local": _ctx.isLocal,
        "redirect-url": _ctx.redirectUrl,
        network: _ctx.network,
        "is-mock": _ctx.isMock,
        "is-guest-user": _ctx.isGuestUser,
        "show-login": _ctx.showLogin,
        "before-logout": _ctx.beforeLogout
      }, null, 8, ["guest-role", "get-logout-url", "is-local", "redirect-url", "network", "is-mock", "is-guest-user", "show-login", "before-logout"])])];
    }),
    _: 3
    /* FORWARDED */
  }, 8, ["data", "show-arrow", "popper-class", "popper-append-to-body"])]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
