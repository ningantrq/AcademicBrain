import { renderless, api } from "@opentiny/vue-renderless/user-contact/vue";
import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import UserHead from "@opentiny/vue-user-head";
import CardTemplate from "@opentiny/vue-card-template";
import Espace from "@opentiny/vue-espace";
import Popover from "@opentiny/vue-popover";
import { IconChevronUp, IconChevronDown } from "@opentiny/vue-icon";
import { resolveComponent, openBlock, createElementBlock, createVNode, withCtx, createElementVNode, withDirectives, vShow, toDisplayString, createBlock, resolveDynamicComponent, renderSlot, Fragment, renderList, createCommentVNode } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  props: [].concat(props, ["data", "showArrow", "espace", "showName", "showNumber", "showImg", "placement", "popperClass", "popperAppendToBody", "isNewImMode"]),
  components: {
    UserHead,
    CardTemplate,
    Espace,
    Popover,
    IconChevronUp: IconChevronUp(),
    IconChevronDown: IconChevronDown()
  },
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-user-contact"
};
var _hoisted_2 = ["href"];
var _hoisted_3 = {
  class: "tiny-user-contact__role"
};
var _hoisted_4 = {
  class: "tiny-user-contact__header"
};
var _hoisted_5 = {
  class: "tiny-user-contact__title"
};
var _hoisted_6 = {
  class: "tiny-user-contact__role"
};
var _hoisted_7 = {
  class: "tiny-user-contact__message"
};
var _hoisted_8 = {
  class: "tiny-user-contact__state-left"
};
var _hoisted_9 = {
  class: "tiny-user-contact__state-right"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_user_head = resolveComponent("user-head");
  var _component_card_template = resolveComponent("card-template");
  var _component_espace = resolveComponent("espace");
  var _component_Popover = resolveComponent("Popover");
  return openBlock(), createElementBlock("div", _hoisted_1, [createVNode(_component_Popover, {
    placement: "bottom-start",
    onShow: _cache[3] || (_cache[3] = function($event) {
      return _ctx.show = true;
    }),
    onHide: _cache[4] || (_cache[4] = function($event) {
      return _ctx.show = false;
    }),
    trigger: "hover",
    "popper-class": "tiny-user-contact" + (_ctx.showArrow ? " showArrow" : "") + (_ctx.popperClass ? " " + _ctx.popperClass : ""),
    "append-to-body": _ctx.popperAppendToBody,
    "visible-arrow": _ctx.showArrow
  }, {
    reference: withCtx(function() {
      return [createElementVNode("a", {
        href: _ctx.getUserHref(),
        onClick: _cache[1] || (_cache[1] = function() {
          return _ctx.doUserAction && _ctx.doUserAction.apply(_ctx, arguments);
        }),
        class: "dropdown-part"
      }, [withDirectives(createVNode(_component_user_head, {
        min: true,
        round: true,
        modelValue: _ctx.data.imgUrl,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = function($event) {
          return _ctx.data.imgUrl = $event;
        }),
        type: "image"
      }, null, 8, ["modelValue"]), [[vShow, _ctx.showImg]]), createElementVNode("div", _hoisted_3, [withDirectives(createElementVNode(
        "span",
        {
          class: "tiny-user-contact__role-name"
        },
        toDisplayString(_ctx.data.userName),
        513
        /* TEXT, NEED_PATCH */
      ), [[vShow, _ctx.showName]]), withDirectives(createElementVNode(
        "span",
        {
          class: "tiny-user-contact__role-number"
        },
        toDisplayString(_ctx.data.roleNumber),
        513
        /* TEXT, NEED_PATCH */
      ), [[vShow, _ctx.showNumber]])])], 8, _hoisted_2), (openBlock(), createBlock(resolveDynamicComponent(_ctx.show ? "icon-chevron-up" : "icon-chevron-down"), {
        class: "tiny-svg-size tiny-user-contact__arrow"
      }))];
    }),
    default: withCtx(function() {
      return [_ctx.slots.default ? (openBlock(), createBlock(_component_card_template, {
        key: 0,
        tools: _ctx.data.tools,
        class: "tiny-user-contact__main"
      }, {
        default: withCtx(function() {
          return [renderSlot(_ctx.$slots, "default")];
        }),
        _: 3
        /* FORWARDED */
      }, 8, ["tools"])) : (openBlock(), createBlock(_component_card_template, {
        key: 1,
        tools: _ctx.data.tools,
        class: "tiny-user-contact__main"
      }, {
        header: withCtx(function() {
          return [createElementVNode("div", _hoisted_4, [createElementVNode("div", _hoisted_5, [createVNode(_component_user_head, {
            round: true,
            modelValue: _ctx.data.imgUrl,
            "onUpdate:modelValue": _cache[2] || (_cache[2] = function($event) {
              return _ctx.data.imgUrl = $event;
            }),
            type: "image"
          }, null, 8, ["modelValue"]), createElementVNode("div", _hoisted_6, [withDirectives(createElementVNode(
            "span",
            {
              class: "tiny-user-contact__role-name"
            },
            toDisplayString(_ctx.data.userName),
            513
            /* TEXT, NEED_PATCH */
          ), [[vShow, _ctx.showName]]), withDirectives(createElementVNode(
            "span",
            {
              class: "tiny-user-contact__role-number"
            },
            toDisplayString(_ctx.t("ui.usercard.empno")) + "：" + toDisplayString(_ctx.data.roleNumber),
            513
            /* TEXT, NEED_PATCH */
          ), [[vShow, _ctx.showNumber]])])])])];
        }),
        default: withCtx(function() {
          return [createElementVNode("div", null, [createElementVNode("div", _hoisted_7, [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.data.values, function(item) {
              return openBlock(), createElementBlock("div", {
                key: item.text,
                class: "tiny-user-contact__state"
              }, [createElementVNode(
                "span",
                _hoisted_8,
                toDisplayString(item.text) + "：",
                1
                /* TEXT */
              ), createElementVNode(
                "span",
                _hoisted_9,
                toDisplayString(item.value),
                1
                /* TEXT */
              )]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))]), _ctx.espace && _ctx.espace.length ? (openBlock(), createBlock(_component_espace, {
            key: 0,
            data: _ctx.espace
          }, null, 8, ["data"])) : createCommentVNode("v-if", true)])];
        }),
        _: 1
        /* STABLE */
      }, 8, ["tools"]))];
    }),
    _: 3
    /* FORWARDED */
  }, 8, ["popper-class", "append-to-body", "visible-arrow"])]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
