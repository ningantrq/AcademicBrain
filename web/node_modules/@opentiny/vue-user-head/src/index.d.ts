declare const _default: import("@vue/runtime-core").DefineComponent<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            ITEM_NAME: string;
        };
    };
    /**
     * @property {Boolean} [min=false] - 小尺寸模式
     */
    min: BooleanConstructor;
    /**
     * @property {Boolean} [round=true] - 圆形模式
     */
    round: BooleanConstructor;
    /**
     * @property {String} [color=#ffffff] - 文字颜色
     */
    color: {
        type: StringConstructor;
        default: string;
    };
    /**
     * @property {String} [backgroundColor=#BBBBBB] - 背景色
     */
    backgroundColor: {
        type: StringConstructor;
        default: string;
    };
    /**
     * @property {String} [type=label] - 头像类型，icon|image|label 可选
     */
    type: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * @property {String} - 头像资源
     * type=icon 时为图标类名，type=label时为字体串，type=image时为资源路径
     */
    modelValue: {
        type: (ObjectConstructor | StringConstructor)[];
        default: null;
    };
    /**
     * @property {Number} - 消息计数
     */
    messageTotal: NumberConstructor;
    /**
     * @property {String} [messageType=details] - 消息类型 details|basic 可选
     */
    messageType: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * @property {Number} [messageUpperLimit=0] - 消息显示上限
     */
    messageUpperLimit: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: NumberConstructor;
        default: number;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            ITEM_NAME: string;
        };
    };
    /**
     * @property {Boolean} [min=false] - 小尺寸模式
     */
    min: BooleanConstructor;
    /**
     * @property {Boolean} [round=true] - 圆形模式
     */
    round: BooleanConstructor;
    /**
     * @property {String} [color=#ffffff] - 文字颜色
     */
    color: {
        type: StringConstructor;
        default: string;
    };
    /**
     * @property {String} [backgroundColor=#BBBBBB] - 背景色
     */
    backgroundColor: {
        type: StringConstructor;
        default: string;
    };
    /**
     * @property {String} [type=label] - 头像类型，icon|image|label 可选
     */
    type: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * @property {String} - 头像资源
     * type=icon 时为图标类名，type=label时为字体串，type=image时为资源路径
     */
    modelValue: {
        type: (ObjectConstructor | StringConstructor)[];
        default: null;
    };
    /**
     * @property {Number} - 消息计数
     */
    messageTotal: NumberConstructor;
    /**
     * @property {String} [messageType=details] - 消息类型 details|basic 可选
     */
    messageType: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * @property {Number} [messageUpperLimit=0] - 消息显示上限
     */
    messageUpperLimit: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: NumberConstructor;
        default: number;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    type: string;
    color: string;
    backgroundColor: string;
    tiny_mode_root: boolean;
    _constants: Record<string, any>;
    modelValue: string | Record<string, any>;
    size: number;
    round: boolean;
    min: boolean;
    messageType: string;
    messageUpperLimit: number;
}, {}>;
export default _default;
