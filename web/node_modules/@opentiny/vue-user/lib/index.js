function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import "@opentiny/vue-theme/user/index.css";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return PcTemplate;
};
var $constants = {
  COMPONENT_NAME: {
    FormItem: "FormItem"
  },
  EVENT_NAME: {
    FormBlur: "form.blur"
  }
};
var User = defineComponent({
  name: $prefix + "User",
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    tabindex: {
      type: String,
      default: "1"
    },
    modelValue: {
      type: [String, Number, Array],
      required: false
    },
    multiple: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    displayOnly: {
      type: Boolean,
      default: false
    },
    valueSplit: {
      type: String,
      default: ","
    },
    textSplit: {
      type: String,
      default: ","
    },
    valueField: {
      type: String,
      default: "userId"
    },
    textField: {
      type: String,
      default: "userCN"
    },
    cache: {
      type: Boolean,
      default: true
    },
    cacheKey: {
      type: String,
      default: "tiny-user"
    },
    delay: {
      type: Number,
      default: 600
    },
    suggestLength: {
      type: Number,
      default: 3
    },
    cacheFields: {
      type: Array,
      default: function _default2() {
        return [];
      }
    },
    collapseTags: {
      type: Boolean,
      default: false
    },
    placeholder: {
      type: String,
      default: ""
    },
    showOverflowTooltip: {
      type: Boolean,
      default: true
    },
    sortByFetchData: {
      type: Boolean,
      default: false
    },
    sortable: Function,
    size: String,
    fetchW3Accounts: Function,
    fetchSuggestUser: Function,
    fetchUserByUserId: Function,
    userCache: Object,
    popperClass: String,
    popperAppendToBody: {
      type: Boolean,
      default: true
    },
    tagSelectable: {
      type: Boolean,
      default: false
    },
    copyable: {
      type: Boolean,
      default: false
    },
    batch: {
      type: [Boolean, Number],
      default: 0
    },
    allowCopy: {
      type: Boolean,
      default: false
    },
    noDataText: String,
    loadingText: String,
    autoClose: Boolean,
    queryDebounce: {
      type: Number,
      default: 100
    },
    hideSelected: Boolean,
    ignoreEnter: {
      type: Boolean,
      default: true
    },
    showTips: {
      type: Boolean,
      default: true
    },
    maxWidth: {
      type: [String, Number],
      default: 200
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
User.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
User.install = function(Vue) {
  Vue.component(User.name, User);
};
User.version = version;
export {
  User as default
};
