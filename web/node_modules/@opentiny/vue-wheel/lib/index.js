import { defineComponent, $prefix, setup as _setup } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/wheel/vue";
import { IconYes } from "@opentiny/vue-icon";
import BScroll from "@better-scroll/core";
import Wheel$1 from "@better-scroll/wheel";
import { resolveComponent, openBlock, createElementBlock, createElementVNode, createVNode, Transition, withCtx, withModifiers, Fragment, renderList, normalizeClass, toDisplayString, createTextVNode, createBlock, createCommentVNode } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

import "@opentiny/vue-theme-mobile/wheel/index.css";
BScroll.use(Wheel$1);
var _sfc_main = defineComponent({
  name: $prefix + "Wheel",
  components: {
    IconYes: IconYes()
  },
  props: {
    dataSource: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    defaultSelectedIndexs: {
      type: Array,
      default: function _default2() {
        return [];
      }
    },
    hasFooter: {
      type: Boolean,
      default: true
    }
  },
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true,
      extendOptions: {
        BScroll
      }
    });
  }
});
var _hoisted_1 = {
  class: "tiny-mobile-wheel"
};
var _hoisted_2 = {
  class: "tiny-mobile-wheel__container"
};
var _hoisted_3 = {
  class: "tiny-mobile-wheel__picker__content"
};
var _hoisted_4 = {
  class: "tiny-mobile-wheel__wheel__wrapper",
  ref: "wheelWrapper"
};
var _hoisted_5 = {
  key: 0,
  class: "wheel__scroll_hasFooter"
};
var _hoisted_6 = {
  key: 1,
  class: "wheel__scroll_noFooter"
};
var _hoisted_7 = ["onClick"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_IconYes = resolveComponent("IconYes");
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode("div", _hoisted_2, [createVNode(Transition, {
    name: "picker-move"
  }, {
    default: withCtx(function() {
      return [createElementVNode("div", {
        class: "tiny-mobile-wheel__picker__panel",
        onClick: _cache[0] || (_cache[0] = withModifiers(function() {
        }, ["stop"]))
      }, [createElementVNode("div", _hoisted_3, [createElementVNode(
        "div",
        _hoisted_4,
        [(openBlock(true), createElementBlock(
          Fragment,
          null,
          renderList(_ctx.state.pickerData, function(data, index) {
            return openBlock(), createElementBlock("div", {
              class: "wheel",
              key: index
            }, [_ctx.hasFooter ? (openBlock(), createElementBlock("ul", _hoisted_5, [(openBlock(true), createElementBlock(
              Fragment,
              null,
              renderList(data, function(item) {
                return openBlock(), createElementBlock(
                  "li",
                  {
                    key: item.label,
                    class: normalizeClass([item.selected ? "wheel__item__selected" : "", "wheel__item"])
                  },
                  toDisplayString(item.label),
                  3
                  /* TEXT, CLASS */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            ))])) : (openBlock(), createElementBlock("ul", _hoisted_6, [(openBlock(true), createElementBlock(
              Fragment,
              null,
              renderList(data, function(item, index2) {
                return openBlock(), createElementBlock("li", {
                  key: item.label,
                  class: normalizeClass([item.selected ? "wheel__item__selected" : "", "wheel__item"]),
                  onClick: function onClick($event) {
                    return _ctx.clickWheelItem(index2);
                  }
                }, [createTextVNode(
                  toDisplayString(item.label) + " ",
                  1
                  /* TEXT */
                ), item.selected ? (openBlock(), createBlock(_component_IconYes, {
                  key: 0,
                  class: "size20"
                })) : createCommentVNode("v-if", true)], 10, _hoisted_7);
              }),
              128
              /* KEYED_FRAGMENT */
            ))]))]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))],
        512
        /* NEED_PATCH */
      )])])];
    }),
    _: 1
    /* STABLE */
  })])]);
}
var Wheel = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.13.0";
Wheel.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Wheel.install = function(Vue) {
  Vue.component(Wheel.name, Wheel);
};
Wheel.version = version;
export {
  Wheel as default
};
