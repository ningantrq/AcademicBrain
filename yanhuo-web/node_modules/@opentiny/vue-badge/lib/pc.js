import { renderless, api } from "@opentiny/vue-renderless/badge/vue";
import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import "@opentiny/vue-theme/badge/index.css";
import { openBlock, createElementBlock, toDisplayString, renderSlot, normalizeClass, normalizeStyle, createCommentVNode } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  props: [].concat(props, ["isDot", "hidden", "type", "max", "value", "modelValue", "href", "target", "badgeClass", "offset", "data"]),
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-badge__wrapper"
};
var _hoisted_2 = {
  key: 0
};
var _hoisted_3 = ["href", "target"];
var _hoisted_4 = {
  key: 1,
  class: "tiny-badge__content-text"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [_ctx.data ? (openBlock(), createElementBlock(
    "span",
    _hoisted_2,
    toDisplayString(_ctx.data),
    1
    /* TEXT */
  )) : renderSlot(_ctx.$slots, "default", {
    key: 1
  }), !_ctx.hidden && (_ctx.state.content || _ctx.state.content === 0 || _ctx.isDot) ? (openBlock(), createElementBlock(
    "div",
    {
      key: 2,
      class: normalizeClass(["tiny-badge", [_ctx.isDot ? "tiny-badge--default" : "", _ctx.state.isOverstep ? "tiny-badge--max" : "", _ctx.type ? "tiny-badge--" + _ctx.type : "", _ctx.badgeClass || ""]]),
      style: normalizeStyle({
        transform: "translate(\n          " + _ctx.offset[0] + (typeof _ctx.offset[0] === "number" ? "px" : "") + ",\n          " + _ctx.offset[1] + (typeof _ctx.offset[1] === "number" ? "px" : "") + "\n        )"
      })
    },
    [renderSlot(_ctx.$slots, "content", {}, function() {
      return [_ctx.state.href ? (openBlock(), createElementBlock("a", {
        key: 0,
        href: _ctx.state.href,
        target: _ctx.target,
        rel: "noopener noreferrer"
      }, toDisplayString(_ctx.state.content), 9, _hoisted_3)) : createCommentVNode("v-if", true), !_ctx.state.href ? (openBlock(), createElementBlock(
        "span",
        _hoisted_4,
        toDisplayString(_ctx.state.content),
        1
        /* TEXT */
      )) : createCommentVNode("v-if", true)];
    })],
    6
    /* CLASS, STYLE */
  )) : createCommentVNode("v-if", true)]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
