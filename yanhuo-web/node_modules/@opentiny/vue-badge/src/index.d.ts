export declare const badgeProps: {
    showLeft: {
        type: BooleanConstructor;
        default: boolean;
    };
    isDot: {
        type: BooleanConstructor;
        default: boolean;
    };
    isFixed: {
        type: BooleanConstructor;
        default: boolean;
    };
    isMini: {
        type: BooleanConstructor;
        default: boolean;
    };
    max: NumberConstructor;
    value: (StringConstructor | NumberConstructor)[];
    modelValue: (StringConstructor | NumberConstructor)[];
    href: StringConstructor;
    target: StringConstructor;
    hidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    type: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    badgeClass: StringConstructor;
    offset: {
        type: ArrayConstructor;
        default: () => number[];
    };
    data: (StringConstructor | NumberConstructor)[];
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};
declare const _default: import("@vue/runtime-core").DefineComponent<{
    showLeft: {
        type: BooleanConstructor;
        default: boolean;
    };
    isDot: {
        type: BooleanConstructor;
        default: boolean;
    };
    isFixed: {
        type: BooleanConstructor;
        default: boolean;
    };
    isMini: {
        type: BooleanConstructor;
        default: boolean;
    };
    max: NumberConstructor;
    value: (StringConstructor | NumberConstructor)[];
    modelValue: (StringConstructor | NumberConstructor)[];
    href: StringConstructor;
    target: StringConstructor;
    hidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    type: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    badgeClass: StringConstructor;
    offset: {
        type: ArrayConstructor;
        default: () => number[];
    };
    data: (StringConstructor | NumberConstructor)[];
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    showLeft: {
        type: BooleanConstructor;
        default: boolean;
    };
    isDot: {
        type: BooleanConstructor;
        default: boolean;
    };
    isFixed: {
        type: BooleanConstructor;
        default: boolean;
    };
    isMini: {
        type: BooleanConstructor;
        default: boolean;
    };
    max: NumberConstructor;
    value: (StringConstructor | NumberConstructor)[];
    modelValue: (StringConstructor | NumberConstructor)[];
    href: StringConstructor;
    target: StringConstructor;
    hidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    type: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    badgeClass: StringConstructor;
    offset: {
        type: ArrayConstructor;
        default: () => number[];
    };
    data: (StringConstructor | NumberConstructor)[];
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    tiny_mode_root: boolean;
    offset: unknown[];
    hidden: boolean;
    isDot: boolean;
    isFixed: boolean;
    isMini: boolean;
    showLeft: boolean;
}, {}>;
export default _default;
