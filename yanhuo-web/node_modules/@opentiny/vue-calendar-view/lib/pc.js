import { renderless, api } from "@opentiny/vue-renderless/calendar-view/vue";
import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import Button from "@opentiny/vue-button";
import DatePicker from "@opentiny/vue-date-picker";
import RadioButton from "@opentiny/vue-radio-button";
import RadioGroup from "@opentiny/vue-radio-group";
import Tooltip from "@opentiny/vue-tooltip";
import { iconCheckedSur, iconPlus, iconChevronLeft, iconChevronRight, iconDayView, iconAgendaView, iconMonthView } from "@opentiny/vue-icon";
import { resolveComponent, openBlock, createElementBlock, createElementVNode, createVNode, withCtx, createTextVNode, toDisplayString, renderSlot, createBlock, Fragment, renderList, resolveDynamicComponent, normalizeClass, createCommentVNode, normalizeStyle } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  emits: ["new-schedule", "selected-date-change", "prev-week-click", "next-week-click", "week-change", "year-change", "month-change"],
  components: {
    TinyButton: Button,
    IconCheckedSur: iconCheckedSur(),
    IconPlus: iconPlus(),
    IconChevronLeft: iconChevronLeft(),
    IconChevronRight: iconChevronRight(),
    TinyRadioButton: RadioButton,
    TinyRadioGroup: RadioGroup,
    TinyDatePicker: DatePicker,
    TinyTooltip: Tooltip
  },
  props: [].concat(props, ["modelValue", "showMark", "showNewSchedule", "setDayBgColor", "disabled", "mode", "modes", "year", "month", "dayTimes", "events", "height", "markColor", "multiSelect"]),
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api,
      extendOptions: {
        modesIcon: {
          timeline: iconDayView(),
          schedule: iconAgendaView(),
          month: iconMonthView()
        }
      }
    });
  }
});
var _hoisted_1 = {
  class: "tiny-calendar-view"
};
var _hoisted_2 = {
  class: "tiny-calendar-view__header"
};
var _hoisted_3 = {
  class: "tiny-calendar-view__tool"
};
var _hoisted_4 = {
  key: 0,
  class: "tiny-calendar-view-month"
};
var _hoisted_5 = {
  class: "tiny-calendar-view-month__header"
};
var _hoisted_6 = {
  class: "header-main"
};
var _hoisted_7 = {
  class: "tiny-calendar-view-month__main"
};
var _hoisted_8 = {
  class: "main-container"
};
var _hoisted_9 = ["onClick"];
var _hoisted_10 = {
  key: 0,
  class: "day-selected"
};
var _hoisted_11 = {
  class: "day-events",
  style: {
    "max-height": "calc(100% - 26px)"
  }
};
var _hoisted_12 = ["onMouseenter", "onMouseleave"];
var _hoisted_13 = {
  key: 1,
  class: "tiny-calendar-view-week"
};
var _hoisted_14 = {
  class: "tiny-calendar-view-week__header"
};
var _hoisted_15 = {
  class: "header-main"
};
var _hoisted_16 = {
  class: "day-times"
};
var _hoisted_17 = {
  class: "day-events"
};
var _hoisted_18 = {
  class: "events-list"
};
var _hoisted_19 = {
  class: "title"
};
var _hoisted_20 = {
  class: "date"
};
var _hoisted_21 = {
  class: "content"
};
var _hoisted_22 = ["onClick"];
var _hoisted_23 = {
  class: "tooltip-main"
};
var _hoisted_24 = {
  class: "title"
};
var _hoisted_25 = {
  class: "date"
};
var _hoisted_26 = {
  class: "content"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_button = resolveComponent("tiny-button");
  var _component_tiny_date_picker = resolveComponent("tiny-date-picker");
  var _component_tiny_radio_button = resolveComponent("tiny-radio-button");
  var _component_tiny_radio_group = resolveComponent("tiny-radio-group");
  var _component_icon_chevron_left = resolveComponent("icon-chevron-left");
  var _component_icon_chevron_right = resolveComponent("icon-chevron-right");
  var _component_icon_checked_sur = resolveComponent("icon-checked-sur");
  var _component_icon_plus = resolveComponent("icon-plus");
  var _component_tiny_tooltip = resolveComponent("tiny-tooltip");
  return openBlock(), createElementBlock("div", _hoisted_1, [createElementVNode("div", _hoisted_2, [createVNode(_component_tiny_button, {
    onClick: _ctx.toToday
  }, {
    default: withCtx(function() {
      return [createTextVNode(
        toDisplayString(_ctx.t("ui.calendarView.backToday")),
        1
        /* TEXT */
      )];
    }),
    _: 1
    /* STABLE */
  }, 8, ["onClick"]), createVNode(_component_tiny_date_picker, {
    modelValue: _ctx.state.currentDate,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = function($event) {
      return _ctx.state.currentDate = $event;
    }),
    class: "tiny-calendar-view__picker",
    shape: "filter",
    type: "month",
    clearable: false,
    onChange: _ctx.currentDateChange,
    format: _ctx.t("ui.calendarView.dateFormat")
  }, null, 8, ["modelValue", "onChange", "format"]), createElementVNode("div", _hoisted_3, [renderSlot(_ctx.$slots, "tool")]), _ctx.modes.length ? (openBlock(), createBlock(_component_tiny_radio_group, {
    key: 0,
    modelValue: _ctx.state.mode,
    "onUpdate:modelValue": _cache[1] || (_cache[1] = function($event) {
      return _ctx.state.mode = $event;
    }),
    size: "mini",
    class: "tiny-calendar-view__radio"
  }, {
    default: withCtx(function() {
      return [(openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.modes, function(mode) {
          return openBlock(), createBlock(_component_tiny_radio_button, {
            key: mode,
            label: mode
          }, {
            default: withCtx(function() {
              return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.state.modesIcon[mode]), {
                class: normalizeClass(_ctx.state.mode === mode && "fill-brand")
              }, null, 8, ["class"]))];
            }),
            _: 2
            /* DYNAMIC */
          }, 1032, ["label"]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))];
    }),
    _: 1
    /* STABLE */
  }, 8, ["modelValue"])) : createCommentVNode("v-if", true)]), _ctx.state.mode === "month" ? (openBlock(), createElementBlock("div", _hoisted_4, [createElementVNode("div", _hoisted_5, [createElementVNode("div", {
    class: "header-left",
    onClick: _cache[2] || (_cache[2] = function() {
      return _ctx.goPrevMonth && _ctx.goPrevMonth.apply(_ctx, arguments);
    })
  }, [createVNode(_component_icon_chevron_left)]), createElementVNode("ul", _hoisted_6, [(openBlock(true), createElementBlock(
    Fragment,
    null,
    renderList(_ctx.state.weekDays, function(day) {
      return openBlock(), createElementBlock("li", {
        key: day
      }, [createElementVNode(
        "span",
        null,
        toDisplayString(_ctx.t("ui.calendarView.weekDays[" + day + "]")),
        1
        /* TEXT */
      )]);
    }),
    128
    /* KEYED_FRAGMENT */
  ))]), createElementVNode("div", {
    class: "header-right",
    onClick: _cache[3] || (_cache[3] = function() {
      return _ctx.goNextMonth && _ctx.goNextMonth.apply(_ctx, arguments);
    })
  }, [createVNode(_component_icon_chevron_right)])]), createElementVNode("div", _hoisted_7, [createElementVNode("div", _hoisted_8, [(openBlock(true), createElementBlock(
    Fragment,
    null,
    renderList(_ctx.state.calendar, function(item, index) {
      return openBlock(), createElementBlock("ul", {
        key: index
      }, [(openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(item, function(day, i) {
          return openBlock(), createElementBlock("li", {
            key: i,
            onClick: function onClick($event) {
              return _ctx.selectDay(day);
            },
            style: {
              "width": "14.2857%"
            },
            class: normalizeClass([i === 0 || i === 6 ? "is-weekends" : "", day.isLast || day.isNext || day.disabled ? "" : _ctx.isSelectedDate(day) ? "is-selected" : "not-selected", "bg-" + _ctx.getDayBgColor(day)])
          }, [_ctx.multiSelect && _ctx.isSelectedDate(day) ? (openBlock(), createElementBlock("div", _hoisted_10, [createVNode(_component_icon_checked_sur)])) : createCommentVNode("v-if", true), createElementVNode(
            "div",
            {
              class: normalizeClass(["date", [day.isLast || day.isNext ? "is-next-or-last" : _ctx.isToday(day) || _ctx.isSelectedDate(day) ? "is-selected" : "", day.disabled ? "is-disabled" : ""]])
            },
            toDisplayString(_ctx.isToday(day) ? _ctx.t("ui.datepicker.today") : day.value),
            3
            /* TEXT, CLASS */
          ), createElementVNode("div", _hoisted_11, [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.getEventByTime(day, _ctx._constants.DAY_START_TIME, _ctx._constants.DAY_END_TIME), function(event, idx) {
              return openBlock(), createElementBlock("div", {
                key: idx,
                onMouseenter: function onMouseenter($event) {
                  return _ctx.handleMouseenter($event, event);
                },
                onMouseleave: function onMouseleave($event) {
                  return _ctx.handleMouseleave($event, event);
                },
                class: "events-container"
              }, [_ctx.isStartOrEndDay("start", day.value, _ctx._constants.DAY_START_TIME, _ctx._constants.DAY_END_TIME, event) ? (openBlock(), createElementBlock(
                "div",
                {
                  key: 0,
                  class: normalizeClass(["events-start", event.dayNumber > 1 && "multi-day"])
                },
                [createElementVNode(
                  "span",
                  {
                    class: normalizeClass(["events-title", event.theme ? "theme-" + event.theme : ""])
                  },
                  toDisplayString(event.title),
                  3
                  /* TEXT, CLASS */
                )],
                2
                /* CLASS */
              )) : (openBlock(), createElementBlock(
                "div",
                {
                  key: 1,
                  class: normalizeClass(["events-end", [_ctx.isStartOrEndDay("end", day.value, _ctx._constants.DAY_START_TIME, _ctx._constants.DAY_END_TIME, event) ? "is-end" : "", event.theme ? "bg-" + event.theme : ""]])
                },
                null,
                2
                /* CLASS */
              ))], 40, _hoisted_12);
            }),
            128
            /* KEYED_FRAGMENT */
          ))])], 10, _hoisted_9);
        }),
        128
        /* KEYED_FRAGMENT */
      ))]);
    }),
    128
    /* KEYED_FRAGMENT */
  ))])])])) : (openBlock(), createElementBlock("div", _hoisted_13, [createElementVNode("div", _hoisted_14, [createElementVNode("div", {
    class: "header-left",
    onClick: _cache[4] || (_cache[4] = function() {
      return _ctx.getPrevWeek && _ctx.getPrevWeek.apply(_ctx, arguments);
    })
  }, [createVNode(_component_icon_chevron_left)]), createElementVNode("ul", _hoisted_15, [(openBlock(true), createElementBlock(
    Fragment,
    null,
    renderList(_ctx.state.weekDates, function(date, index) {
      return openBlock(), createElementBlock("li", {
        key: date.value
      }, [renderSlot(_ctx.$slots, "header", {
        slotScope: {
          date: date.value,
          weekDay: _ctx.t("ui.calendarView.weekDays[" + index + "]")
        }
      }, function() {
        return [createElementVNode(
          "span",
          {
            class: normalizeClass(["date", _ctx.dateIsToday(date.value) && "is-today"])
          },
          [createElementVNode(
            "span",
            null,
            toDisplayString(date.value.split("-")[2]),
            1
            /* TEXT */
          ), _ctx.isShowMark(date.value) ? (openBlock(), createElementBlock(
            "span",
            {
              key: 0,
              class: normalizeClass(["mark", [date.value.split("-")[2] > 9 ? "is-two-digit" : "", _ctx.markColor ? "mark-" + _ctx.markColor : ""]])
            },
            null,
            2
            /* CLASS */
          )) : createCommentVNode("v-if", true)],
          2
          /* CLASS */
        ), createElementVNode(
          "span",
          {
            class: normalizeClass(["week-day", _ctx.dateIsToday(date.value) && "is-today"])
          },
          toDisplayString(_ctx.dateIsToday(date.value) ? _ctx.t("ui.datepicker.today") : _ctx.t("ui.calendarView.weekDays[" + index + "]")),
          3
          /* TEXT, CLASS */
        )];
      })]);
    }),
    128
    /* KEYED_FRAGMENT */
  ))]), createElementVNode("div", {
    class: "header-right",
    onClick: _cache[5] || (_cache[5] = function() {
      return _ctx.getNextWeek && _ctx.getNextWeek.apply(_ctx, arguments);
    })
  }, [createVNode(_component_icon_chevron_right)])]), _ctx.state.mode === "timeline" ? (openBlock(), createElementBlock(
    "div",
    {
      key: 0,
      class: "tiny-calendar-view-week__timeline",
      style: normalizeStyle({
        "height": _ctx.height
      })
    },
    [createElementVNode("div", _hoisted_16, [createElementVNode("ul", null, [(openBlock(true), createElementBlock(
      Fragment,
      null,
      renderList(_ctx.state.dayTimes, function(item, i) {
        return openBlock(), createElementBlock(
          "li",
          {
            key: item.time,
            class: normalizeClass(i % 2 === 1 && "is-odd-num")
          },
          [createElementVNode(
            "span",
            null,
            toDisplayString(item.text.includes("30") ? "" : item.text),
            1
            /* TEXT */
          )],
          2
          /* CLASS */
        );
      }),
      128
      /* KEYED_FRAGMENT */
    ))])]), createElementVNode("div", _hoisted_17, [createElementVNode("ul", null, [(openBlock(true), createElementBlock(
      Fragment,
      null,
      renderList(_ctx.state.weekDates, function(date, index) {
        return openBlock(), createElementBlock(
          "li",
          {
            key: date.value,
            style: {
              "width": "calc((100% - 10px) / 7)"
            },
            class: normalizeClass(index === 0 || index === 6 ? "is-weekends" : "")
          },
          [renderSlot(_ctx.$slots, "timeline" + (index + 1), {
            slotScope: {
              date: date.value,
              events: _ctx.state.curWeekEvents[date.value]
            }
          }, function() {
            return [createElementVNode("ul", _hoisted_18, [(openBlock(true), createElementBlock(
              Fragment,
              null,
              renderList(_ctx.state.dayTimes, function(item, i) {
                return openBlock(), createElementBlock(
                  "li",
                  {
                    key: date.value + item.time,
                    class: normalizeClass(i % 2 === 0 && "is-even-num")
                  },
                  [(openBlock(true), createElementBlock(
                    Fragment,
                    null,
                    renderList(_ctx.getEventByTime(date.value, item.time, _ctx.state.dayTimes[i + 1] && _ctx.state.dayTimes[i + 1].time), function(event, idx) {
                      return openBlock(), createElementBlock(
                        "div",
                        {
                          key: idx,
                          class: normalizeClass(["events-item", ["theme-" + (event.theme || "blue")]]),
                          style: normalizeStyle({
                            "height": event.height + "px",
                            "left": event.left + "px",
                            "width": "calc(92% - " + event.left + "px)"
                          })
                        },
                        [createElementVNode(
                          "span",
                          null,
                          toDisplayString(event.title),
                          1
                          /* TEXT */
                        )],
                        6
                        /* CLASS, STYLE */
                      );
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))],
                  2
                  /* CLASS */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            ))])];
          })],
          2
          /* CLASS */
        );
      }),
      128
      /* KEYED_FRAGMENT */
    ))])])],
    4
    /* STYLE */
  )) : createCommentVNode("v-if", true), _ctx.state.mode === "schedule" ? (openBlock(), createElementBlock(
    "div",
    {
      key: 1,
      class: "tiny-calendar-view-week__schedule",
      style: normalizeStyle({
        "height": _ctx.height
      })
    },
    [createElementVNode("ul", null, [(openBlock(true), createElementBlock(
      Fragment,
      null,
      renderList(_ctx.state.weekDates, function(date, index) {
        return openBlock(), createElementBlock("li", {
          key: date.value,
          style: {
            "width": "14.28%"
          }
        }, [renderSlot(_ctx.$slots, "weekday" + (index + 1), {
          slotScope: {
            date: date.value,
            events: _ctx.state.curWeekEvents[date.value]
          }
        }, function() {
          return [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.state.curWeekEvents[date.value] || [], function(event, idx) {
              return openBlock(), createElementBlock("div", {
                key: idx,
                class: "day-events"
              }, [createElementVNode(
                "div",
                _hoisted_19,
                toDisplayString(event.title),
                1
                /* TEXT */
              ), createElementVNode(
                "div",
                _hoisted_20,
                toDisplayString(_ctx.getEventShowTime("start", event, date.value)) + " - " + toDisplayString(_ctx.getEventShowTime("end", event, date.value)),
                1
                /* TEXT */
              ), createElementVNode(
                "p",
                _hoisted_21,
                toDisplayString(event.content || ""),
                1
                /* TEXT */
              )]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))];
        }), _ctx.isShowNewSchedule(date.value) ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: "new-schedule",
          onClick: function onClick($event) {
            return _ctx.newSchedule(date.value);
          }
        }, [createVNode(_component_icon_plus), createElementVNode(
          "span",
          null,
          toDisplayString(_ctx.t("ui.calendarView.new")),
          1
          /* TEXT */
        )], 8, _hoisted_22)) : createCommentVNode("v-if", true)]);
      }),
      128
      /* KEYED_FRAGMENT */
    ))])],
    4
    /* STYLE */
  )) : createCommentVNode("v-if", true)])), createVNode(_component_tiny_tooltip, {
    ref: "tooltip",
    modelValue: _ctx.state.eventTipVisible,
    "onUpdate:modelValue": _cache[6] || (_cache[6] = function($event) {
      return _ctx.state.eventTipVisible = $event;
    }),
    "popper-class": "tiny-calendar-view-tooltip",
    manual: true,
    effect: "light",
    placement: "right"
  }, {
    content: withCtx(function() {
      return [createElementVNode("div", _hoisted_23, [createElementVNode(
        "div",
        _hoisted_24,
        toDisplayString(_ctx.state.eventTipContent.title),
        1
        /* TEXT */
      ), createElementVNode(
        "div",
        _hoisted_25,
        toDisplayString(_ctx.state.eventTipContent.startDay) + " " + toDisplayString(_ctx.state.eventTipContent.startTime) + " ~ " + toDisplayString(_ctx.state.eventTipContent.endDay) + " " + toDisplayString(_ctx.state.eventTipContent.endTime),
        1
        /* TEXT */
      ), createElementVNode(
        "p",
        _hoisted_26,
        toDisplayString(_ctx.state.eventTipContent.content || ""),
        1
        /* TEXT */
      )])];
    }),
    _: 1
    /* STABLE */
  }, 8, ["modelValue"])]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
