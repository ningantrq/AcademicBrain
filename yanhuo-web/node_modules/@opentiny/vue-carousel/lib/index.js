function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
import "@opentiny/vue-theme/carousel/index.css";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  CHILD_NAME: $prefix + "CarouselItem"
};
var Carousel = defineComponent({
  name: $prefix + "Carousel",
  componentName: "Carousel",
  props: _extends({}, $props, {
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    },
    initialIndex: {
      type: Number,
      default: 0
    },
    height: String,
    trigger: {
      type: String,
      default: "hover"
    },
    autoplay: {
      type: Boolean,
      default: false
    },
    interval: {
      type: Number,
      default: 3e3
    },
    loop: {
      type: Boolean,
      default: true
    },
    indicatorPosition: String,
    arrow: {
      type: String,
      default: "hover"
    },
    type: {
      type: String,
      default: "horizontal",
      validator: function validator(value) {
        return Boolean(!value || ~["card", "vertical", "horizontal"].indexOf(value));
      }
    },
    showTitle: {
      type: Boolean,
      default: false
    },
    aspectRatio: {
      type: String,
      default: "16:2"
    },
    indicatorStyle: {
      type: String,
      default: "light",
      validator: function validator2(value) {
        return Boolean(!value || ~["light", "dark"].indexOf(value));
      }
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
Carousel.install = function(Vue) {
  Vue.component(Carousel.name, Carousel);
};
Carousel.version = version;
export {
  Carousel as default
};
