/// <reference types="node_modules/.pnpm/registry.npmmirror.com+cropperjs@1.5.12/node_modules/cropperjs/types" />
import Cropper from 'cropperjs';
declare const _default: import("@vue/runtime-core").DefineComponent<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            CROP_IMAGE: string;
        };
    };
    alt: {
        type: StringConstructor;
        default: string;
    };
    aspectRatio: {
        type: NumberConstructor;
        default: number;
    };
    autoCrop: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoCropArea: {
        type: NumberConstructor;
        default: number;
    };
    background: {
        type: BooleanConstructor;
        default: boolean;
    };
    center: {
        type: BooleanConstructor;
        default: boolean;
    };
    cropType: {
        type: StringConstructor;
        default: string;
    };
    cropvisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    dragMode: {
        type: StringConstructor;
        default: string;
    };
    guides: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxSize: {
        type: StringConstructor;
        default: string;
    };
    minContainerHeight: {
        type: NumberConstructor;
        default: number;
    };
    minContainerWidth: {
        type: NumberConstructor;
        default: number;
    };
    minCropBoxHeight: {
        type: NumberConstructor;
        default: number;
    };
    minCropBoxWidth: {
        type: NumberConstructor;
        default: number;
    };
    modal: {
        type: BooleanConstructor;
        default: boolean;
    };
    movable: {
        type: BooleanConstructor;
        default: boolean;
    };
    plugin: {
        type: (ObjectConstructor | FunctionConstructor)[];
        default: () => typeof Cropper;
    };
    preview: {
        type: BooleanConstructor;
        default: boolean;
    };
    previewShow: {
        type: BooleanConstructor;
        default: boolean;
    };
    quality: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    rotatable: {
        type: BooleanConstructor;
        default: boolean;
    };
    src: {
        type: StringConstructor;
        default: string;
    };
    viewMode: {
        type: NumberConstructor;
        default: number;
    };
    wheelZoomRatio: {
        type: NumberConstructor;
        default: number;
    };
    zoomOnWheel: {
        type: BooleanConstructor;
        default: boolean;
    };
    zoomable: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    t: (this: any, path: any, options?: any) => any;
    vm: any;
    f: (props: any, attrs?: {}) => {};
    a: (attrs: any, filters: any, include: any) => {};
    d: (props: any) => void;
    dp: (props: any) => void;
    gcls: (key: any) => any;
}, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, ("update:visible" | "ready" | "update:cropvisible" | "cropdata" | "cropstart" | "cropmove" | "cropend" | "crop")[], "update:visible" | "ready" | "update:cropvisible" | "cropdata" | "cropstart" | "cropmove" | "cropend" | "crop", import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            CROP_IMAGE: string;
        };
    };
    alt: {
        type: StringConstructor;
        default: string;
    };
    aspectRatio: {
        type: NumberConstructor;
        default: number;
    };
    autoCrop: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoCropArea: {
        type: NumberConstructor;
        default: number;
    };
    background: {
        type: BooleanConstructor;
        default: boolean;
    };
    center: {
        type: BooleanConstructor;
        default: boolean;
    };
    cropType: {
        type: StringConstructor;
        default: string;
    };
    cropvisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    dragMode: {
        type: StringConstructor;
        default: string;
    };
    guides: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxSize: {
        type: StringConstructor;
        default: string;
    };
    minContainerHeight: {
        type: NumberConstructor;
        default: number;
    };
    minContainerWidth: {
        type: NumberConstructor;
        default: number;
    };
    minCropBoxHeight: {
        type: NumberConstructor;
        default: number;
    };
    minCropBoxWidth: {
        type: NumberConstructor;
        default: number;
    };
    modal: {
        type: BooleanConstructor;
        default: boolean;
    };
    movable: {
        type: BooleanConstructor;
        default: boolean;
    };
    plugin: {
        type: (ObjectConstructor | FunctionConstructor)[];
        default: () => typeof Cropper;
    };
    preview: {
        type: BooleanConstructor;
        default: boolean;
    };
    previewShow: {
        type: BooleanConstructor;
        default: boolean;
    };
    quality: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    rotatable: {
        type: BooleanConstructor;
        default: boolean;
    };
    src: {
        type: StringConstructor;
        default: string;
    };
    viewMode: {
        type: NumberConstructor;
        default: number;
    };
    wheelZoomRatio: {
        type: NumberConstructor;
        default: number;
    };
    zoomOnWheel: {
        type: BooleanConstructor;
        default: boolean;
    };
    zoomable: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    onReady?: ((...args: any[]) => any) | undefined;
    onCrop?: ((...args: any[]) => any) | undefined;
    "onUpdate:cropvisible"?: ((...args: any[]) => any) | undefined;
    onCropdata?: ((...args: any[]) => any) | undefined;
    onCropstart?: ((...args: any[]) => any) | undefined;
    onCropmove?: ((...args: any[]) => any) | undefined;
    onCropend?: ((...args: any[]) => any) | undefined;
}, {
    center: boolean;
    _constants: Record<string, any>;
    background: boolean;
    aspectRatio: number;
    src: string;
    alt: string;
    modal: boolean;
    plugin: Function | Record<string, any>;
    preview: boolean;
    autoCrop: boolean;
    autoCropArea: number;
    cropType: string;
    cropvisible: boolean;
    dragMode: string;
    guides: boolean;
    maxSize: string;
    minContainerHeight: number;
    minContainerWidth: number;
    minCropBoxHeight: number;
    minCropBoxWidth: number;
    movable: boolean;
    previewShow: boolean;
    quality: number;
    rotatable: boolean;
    viewMode: number;
    wheelZoomRatio: number;
    zoomOnWheel: boolean;
    zoomable: boolean;
}, {}>;
export default _default;
