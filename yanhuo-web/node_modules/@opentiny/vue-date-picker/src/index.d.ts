/**
 * Copyright (c) 2022 - present TinyVue Authors.
 * Copyright (c) 2022 - present Huawei Cloud Computing Technologies Co., Ltd.
 *
 * Use of this source code is governed by an MIT-style license.
 *
 * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
 * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR
 * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.
 *
 */
import type { PropType } from '@opentiny/vue-common';
export declare const $constants: {
    MonthDay: number;
    Minutes: number;
    Hours: number;
    TotalMonth: number;
    Max: string;
    Min: string;
    Hour: string;
    Minute: string;
    CapYear: string;
    CapMonth: string;
    CapDate: string;
    CapHour: string;
    CapMinute: string;
    YearMonth: string;
    DateTime: string;
    Date: string;
    HookMounted: string;
    Hidden: string;
    Year: string;
    Day: string;
};
export declare const datePickerProps: {
    type: {
        type: PropType<"date" | "month" | "week" | "year" | "dates" | "years" | "yearrange" | "daterange" | "datetimerange" | "monthrange" | "datetime">;
        default: string;
    };
    _constants: {
        type: ObjectConstructor;
        default: () => {
            MonthDay: number;
            Minutes: number;
            Hours: number;
            TotalMonth: number;
            Max: string;
            Min: string;
            Hour: string;
            Minute: string;
            CapYear: string;
            CapMonth: string;
            CapDate: string;
            CapHour: string;
            CapMinute: string;
            YearMonth: string;
            DateTime: string;
            Date: string;
            HookMounted: string;
            Hidden: string;
            Year: string;
            Day: string;
        };
    };
    timeArrowControl: BooleanConstructor;
    timeEditable: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: StringConstructor;
    format: StringConstructor;
    valueFormat: StringConstructor;
    readonly: BooleanConstructor;
    placeholder: StringConstructor;
    startPlaceholder: StringConstructor;
    endPlaceholder: StringConstructor;
    prefixIcon: ObjectConstructor;
    clearIcon: {
        type: ObjectConstructor;
        default(): import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    name: {
        default: string;
        validator: (value: any) => boolean;
    };
    disabled: BooleanConstructor;
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    id: {
        default: string;
        validator: (value: any) => boolean;
    };
    popperClass: StringConstructor;
    editable: {
        type: BooleanConstructor;
        default: boolean;
    };
    align: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {};
    defaultValue: {};
    defaultTime: {};
    rangeSeparator: {
        type: (ObjectConstructor | StringConstructor)[];
        default: string;
    };
    pickerOptions: {};
    unlinkPanels: BooleanConstructor;
    validateEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    isRange: BooleanConstructor;
    arrowControl: BooleanConstructor;
    timezoneData: {};
    showTimezone: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultTimezone: {};
    visible: BooleanConstructor;
    minDate: {
        type: DateConstructor;
        default: () => Date;
        validator: (val: Date) => boolean;
    };
    maxDate: {
        type: DateConstructor;
        default: () => Date;
        validator: (val: Date) => boolean;
    };
    formatter: {
        type: FunctionConstructor;
        default: (type: any, value: any) => any;
    };
    componentName: {
        type: StringConstructor;
        default: string;
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    step: {
        type: ObjectConstructor;
        default(): {
            hour: number;
            minute: number;
            second: number;
        };
    };
    showWeekNumber: {
        type: BooleanConstructor;
        default: boolean;
    };
    formatWeeks: FunctionConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};
declare const _default: import("@vue/runtime-core").DefineComponent<{
    type: {
        type: PropType<"date" | "month" | "week" | "year" | "dates" | "years" | "yearrange" | "daterange" | "datetimerange" | "monthrange" | "datetime">;
        default: string;
    };
    _constants: {
        type: ObjectConstructor;
        default: () => {
            MonthDay: number;
            Minutes: number;
            Hours: number;
            TotalMonth: number;
            Max: string;
            Min: string;
            Hour: string;
            Minute: string;
            CapYear: string;
            CapMonth: string;
            CapDate: string;
            CapHour: string;
            CapMinute: string;
            YearMonth: string;
            DateTime: string;
            Date: string;
            HookMounted: string;
            Hidden: string;
            Year: string;
            Day: string;
        };
    };
    timeArrowControl: BooleanConstructor;
    timeEditable: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: StringConstructor;
    format: StringConstructor;
    valueFormat: StringConstructor;
    readonly: BooleanConstructor;
    placeholder: StringConstructor;
    startPlaceholder: StringConstructor;
    endPlaceholder: StringConstructor;
    prefixIcon: ObjectConstructor;
    clearIcon: {
        type: ObjectConstructor;
        default(): import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    name: {
        default: string;
        validator: (value: any) => boolean;
    };
    disabled: BooleanConstructor;
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    id: {
        default: string;
        validator: (value: any) => boolean;
    };
    popperClass: StringConstructor;
    editable: {
        type: BooleanConstructor;
        default: boolean;
    };
    align: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {};
    defaultValue: {};
    defaultTime: {};
    rangeSeparator: {
        type: (ObjectConstructor | StringConstructor)[];
        default: string;
    };
    pickerOptions: {};
    unlinkPanels: BooleanConstructor;
    validateEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    isRange: BooleanConstructor;
    arrowControl: BooleanConstructor;
    timezoneData: {};
    showTimezone: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultTimezone: {};
    visible: BooleanConstructor;
    minDate: {
        type: DateConstructor;
        default: () => Date;
        validator: (val: Date) => boolean;
    };
    maxDate: {
        type: DateConstructor;
        default: () => Date;
        validator: (val: Date) => boolean;
    };
    formatter: {
        type: FunctionConstructor;
        default: (type: any, value: any) => any;
    };
    componentName: {
        type: StringConstructor;
        default: string;
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    step: {
        type: ObjectConstructor;
        default(): {
            hour: number;
            minute: number;
            second: number;
        };
    };
    showWeekNumber: {
        type: BooleanConstructor;
        default: boolean;
    };
    formatWeeks: FunctionConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    type: {
        type: PropType<"date" | "month" | "week" | "year" | "dates" | "years" | "yearrange" | "daterange" | "datetimerange" | "monthrange" | "datetime">;
        default: string;
    };
    _constants: {
        type: ObjectConstructor;
        default: () => {
            MonthDay: number;
            Minutes: number;
            Hours: number;
            TotalMonth: number;
            Max: string;
            Min: string;
            Hour: string;
            Minute: string;
            CapYear: string;
            CapMonth: string;
            CapDate: string;
            CapHour: string;
            CapMinute: string;
            YearMonth: string;
            DateTime: string;
            Date: string;
            HookMounted: string;
            Hidden: string;
            Year: string;
            Day: string;
        };
    };
    timeArrowControl: BooleanConstructor;
    timeEditable: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: StringConstructor;
    format: StringConstructor;
    valueFormat: StringConstructor;
    readonly: BooleanConstructor;
    placeholder: StringConstructor;
    startPlaceholder: StringConstructor;
    endPlaceholder: StringConstructor;
    prefixIcon: ObjectConstructor;
    clearIcon: {
        type: ObjectConstructor;
        default(): import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    name: {
        default: string;
        validator: (value: any) => boolean;
    };
    disabled: BooleanConstructor;
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    id: {
        default: string;
        validator: (value: any) => boolean;
    };
    popperClass: StringConstructor;
    editable: {
        type: BooleanConstructor;
        default: boolean;
    };
    align: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {};
    defaultValue: {};
    defaultTime: {};
    rangeSeparator: {
        type: (ObjectConstructor | StringConstructor)[];
        default: string;
    };
    pickerOptions: {};
    unlinkPanels: BooleanConstructor;
    validateEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    isRange: BooleanConstructor;
    arrowControl: BooleanConstructor;
    timezoneData: {};
    showTimezone: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultTimezone: {};
    visible: BooleanConstructor;
    minDate: {
        type: DateConstructor;
        default: () => Date;
        validator: (val: Date) => boolean;
    };
    maxDate: {
        type: DateConstructor;
        default: () => Date;
        validator: (val: Date) => boolean;
    };
    formatter: {
        type: FunctionConstructor;
        default: (type: any, value: any) => any;
    };
    componentName: {
        type: StringConstructor;
        default: string;
    };
    displayOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    step: {
        type: ObjectConstructor;
        default(): {
            hour: number;
            minute: number;
            second: number;
        };
    };
    showWeekNumber: {
        type: BooleanConstructor;
        default: boolean;
    };
    formatWeeks: FunctionConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    type: "date" | "month" | "week" | "year" | "dates" | "years" | "yearrange" | "daterange" | "datetimerange" | "monthrange" | "datetime";
    name: string;
    disabled: boolean;
    tiny_mode_root: boolean;
    _constants: Record<string, any>;
    componentName: string;
    visible: boolean;
    align: string;
    id: string;
    readonly: boolean;
    clearable: boolean;
    validateEvent: boolean;
    displayOnly: boolean;
    editable: boolean;
    timeArrowControl: boolean;
    timeEditable: boolean;
    clearIcon: Record<string, any>;
    rangeSeparator: string | Record<string, any>;
    unlinkPanels: boolean;
    isRange: boolean;
    arrowControl: boolean;
    showTimezone: boolean;
    minDate: Date;
    maxDate: Date;
    formatter: Function;
    step: Record<string, any>;
    showWeekNumber: boolean;
}, {}>;
export default _default;
