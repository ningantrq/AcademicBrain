function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  ICON_MAP: {
    leftWardArrow: "icon-delta-left"
  }
};
var dropdownItemProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  icon: [String, Object],
  disabled: Boolean,
  divided: Boolean,
  itemData: {
    type: [String, Object],
    default: ""
  },
  title: String,
  label: {
    type: String,
    default: ""
  },
  level: String,
  titleClass: String,
  options: {
    type: Array,
    default: function _default2() {
      return [];
    }
  },
  type: {
    type: String,
    default: "selection"
  },
  selected: {
    type: Boolean,
    default: false
  },
  selectedField: {
    type: String,
    default: "selected"
  },
  multiStage: {
    type: Boolean,
    default: false
  },
  currentIndex: {
    type: Number,
    default: function _default3() {
      return -1;
    }
  },
  // tiny新增
  appendToBody: {
    type: Boolean,
    default: true
  },
  textField: {
    type: String,
    default: "label"
  },
  tip: {
    type: [String, Function],
    default: ""
  },
  tipPosition: {
    type: String,
    default: "right"
  }
});
var DropdownItem = defineComponent({
  name: $prefix + "DropdownItem",
  componentName: "TinyDropdownItem",
  props: dropdownItemProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
DropdownItem.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
DropdownItem.install = function(Vue) {
  Vue.component(DropdownItem.name, DropdownItem);
};
DropdownItem.version = version;
export {
  DropdownItem as default
};
