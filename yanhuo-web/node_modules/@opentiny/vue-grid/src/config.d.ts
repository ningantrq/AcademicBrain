declare const GlobalConfig: {
    validConfig: {
        message: string;
    };
    sortConfig: {
        multipleColumnSort: boolean;
    };
    stripe: boolean;
    stripeSaas: boolean;
    borderSaas: boolean;
    borderVertical: boolean;
    highlightHoverRow: boolean;
    resizable: boolean;
    fit: boolean;
    showHeader: boolean;
    defaultTreeIndent: number;
    defaultTreeSpacing: number;
    rowId: string;
    version: number;
    optimization: {
        animat: boolean;
        delayHover: number;
        scrollX: {
            gt: number;
        };
        scrollY: {
            gt: number;
        };
    };
    icon: {
        sortAsc: import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
        sortDesc: import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
        sortDefault: import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
        required: string;
        filter: import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
        edit: import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
        tree: string;
        refresh: import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
        minscreen: import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
        fullscreen: import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
        custom: import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
        jumpPrev: string;
        jumpNext: string;
        prevPage: string;
        nextPage: string;
        zoomIn: string;
        zoomOut: string;
        modalClose: string;
        modalInfo: string;
        modalSuccess: string;
        modalWarning: string;
        modalError: string;
        modalQuestion: string;
        modalLoading: string;
        caretBottom: string;
        dropdownBottom: string;
        btnLoading: string;
    };
    grid: {};
    menu: {};
    tooltip: {
        trigger: string;
        theme: string;
    };
    pager: {};
    toolbar: {
        resizable: {
            storage: boolean;
        };
        buttons: never[];
    };
    modal: {
        zIndex: number;
        minWidth: number;
        minHeight: number;
        lockView: boolean;
        mask: boolean;
        duration: number;
        marginSize: number;
        animat: boolean;
    };
    i18n: (key: any) => any;
    constant: {
        insertedField: string;
        deletedField: string;
        asyncPrefix: string;
    };
    TINY_TABLE_CUSTOM_COLUMN_WIDTH: string;
    TINY_TABLE_CUSTOM_SETTING: string;
    viewConfig: {
        DEFAULT: string;
        MF: string;
        CARD: string;
        LIST: string;
        GANTT: string;
        MF_SHOW_LIST: string;
        MF_SHOW_CARD: string;
        toolbar: {
            default: string;
            mf: string;
            card: string;
        };
        pager: {
            default: string;
            mf: string;
            card: string;
        };
        columnAnchor: {
            default: string;
            mf: string;
            card: string;
        };
        hiddenColumn: {
            default: string;
            mf: string;
            card: string;
        };
        tableHeader: {
            default: string;
            mf: string;
            card: string;
        };
        emptyData: {
            default: string;
            mf: string;
            card: string;
        };
        tableBody: {
            default: string;
            mf: string;
            card: string;
        };
        tableFooter: {
            default: string;
            mf: string;
            card: string;
        };
        fixedColumn: {
            default: string;
            mf: string;
            card: string;
        };
        borderLine: {
            default: string;
            mf: string;
            card: string;
        };
        resizeBar: {
            default: string;
            mf: string;
            card: string;
        };
        gridLoading: {
            default: string;
            mf: string;
            card: string;
        };
        tableWrapper: {
            default: string;
            mf: string;
            card: string;
        };
        selectToolbar: {
            default: string;
            mf: string;
            card: string;
        };
        mfTable: {
            default: string;
            mf: string;
            card: string;
        };
        footerBorder: {
            default: string;
            mf: string;
            card: string;
        };
        operButton: {
            default: string;
            mf: string;
            card: string;
        };
    };
    themes: {
        AURORA: string;
        SAAS: string;
    };
};
export default GlobalConfig;
export declare const prefix = "tiny-grid";
