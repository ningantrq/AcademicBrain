import { renderless, api } from "@opentiny/vue-renderless/image/vue";
import { defineComponent, Teleport, props, setup as _setup } from "@opentiny/vue-common";
import ImageViewer from "@opentiny/vue-image-viewer";
import { resolveComponent, openBlock, createElementBlock, renderSlot, mergeProps, createBlock, Teleport as Teleport$1, createCommentVNode, createElementVNode } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  components: {
    ImageViewer,
    Teleport
  },
  emits: ["load", "error", "delete"],
  props: [].concat(props, ["src", "fit", "lazy", "scrollContainer", "previewSrcList", "zIndex"]),
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-image"
};
var _hoisted_2 = /* @__PURE__ */ createElementVNode(
  "div",
  {
    class: "tiny-image__placeholder"
  },
  null,
  -1
  /* HOISTED */
);
var _hoisted_3 = /* @__PURE__ */ createElementVNode(
  "div",
  {
    class: "tiny-image__error"
  },
  null,
  -1
  /* HOISTED */
);
var _hoisted_4 = ["src"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_image_viewer = resolveComponent("image-viewer");
  return openBlock(), createElementBlock("div", _hoisted_1, [_ctx.state.loading ? renderSlot(_ctx.$slots, "placeholder", {
    key: 0
  }, function() {
    return [_hoisted_2];
  }) : _ctx.state.error ? renderSlot(_ctx.$slots, "error", {
    key: 1
  }, function() {
    return [_hoisted_3];
  }) : (openBlock(), createElementBlock("img", mergeProps({
    key: 2,
    class: "tiny-image__inner"
  }, _ctx.$attrs, {
    onClick: _cache[0] || (_cache[0] = function() {
      return _ctx.clickHandler && _ctx.clickHandler.apply(_ctx, arguments);
    }),
    src: _ctx.src,
    style: _ctx.state.getImageStyle,
    class: {
      "tiny-image__inner-center": _ctx.state.getAlignCenter,
      "tiny-image__preview": _ctx.state.getPreview
    }
  }), null, 16, _hoisted_4)), (openBlock(), createBlock(Teleport$1, {
    to: "body"
  }, [_ctx.state.getPreview && _ctx.state.showViewer ? (openBlock(), createBlock(_component_image_viewer, {
    key: 0,
    ref: "imageViewer",
    "z-index": _ctx.zIndex,
    "on-close": _ctx.closeViewer,
    "url-list": _ctx.previewSrcList
  }, null, 8, ["z-index", "on-close", "url-list"])) : createCommentVNode("v-if", true)]))]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
