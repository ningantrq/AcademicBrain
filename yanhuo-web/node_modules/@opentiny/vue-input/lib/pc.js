import { renderless, api } from "@opentiny/vue-renderless/input/vue";
import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import TinyTallStorage from "./tall-storage";
import Tooltip from "@opentiny/vue-tooltip";
import { iconClose, iconEyeopen, iconEyeclose } from "@opentiny/vue-icon";
import "@opentiny/vue-theme/input/index.css";
import "@opentiny/vue-theme/textarea/index.css";
import { resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, Fragment, renderSlot, createCommentVNode, createElementVNode, createBlock, withCtx, toDisplayString, mergeProps, resolveDynamicComponent, createVNode, Transition, withModifiers } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  emits: ["update:modelValue", "change", "clear", "focus", "blur", "keyup", "input", "keydown", "paste", "mouseenter", "mouseleave", "click"],
  components: {
    IconClose: iconClose(),
    IconEyeopen: iconEyeopen(),
    IconEyeclose: iconEyeclose(),
    TinyTallStorage,
    TinyTooltip: Tooltip
  },
  props: [].concat(props, ["name", "size", "form", "type", "label", "modelValue", "height", "resize", "counter", "autosize", "disabled", "readonly", "tabindex", "clearable", "suffixIcon", "prefixIcon", "autocomplete", "showPassword", "memorySpace", "validateEvent", "showWordLimit", "displayOnly", "displayOnlyContent", "frontClearIcon"]),
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  key: 0,
  class: "tiny-input-group__prepend"
};
var _hoisted_2 = {
  class: "tiny-input-display-only"
};
var _hoisted_3 = {
  key: 0,
  class: "tiny-input-display-only__content"
};
var _hoisted_4 = {
  key: 1,
  class: "tiny-input-display-only__content"
};
var _hoisted_5 = ["name", "tabindex", "type", "disabled", "readonly", "unselectable", "autocomplete", "aria-label"];
var _hoisted_6 = {
  key: 2,
  class: "tiny-input__prefix",
  ref: "prefix"
};
var _hoisted_7 = {
  key: 3
};
var _hoisted_8 = {
  key: 0,
  class: "tiny-input__suffix"
};
var _hoisted_9 = {
  class: "tiny-input__suffix-inner"
};
var _hoisted_10 = {
  key: 4,
  class: "tiny-input__count"
};
var _hoisted_11 = {
  class: "tiny-input__count-inner"
};
var _hoisted_12 = {
  class: "tiny-input__count-text-length"
};
var _hoisted_13 = {
  class: "tiny-input__count-upper-limit"
};
var _hoisted_14 = {
  key: 4,
  class: "tiny-input-group__append"
};
var _hoisted_15 = {
  key: 5,
  class: "tiny-input-group__panel"
};
var _hoisted_16 = {
  class: "tiny-textarea-display-only__content"
};
var _hoisted_17 = ["tabindex", "disabled", "readonly", "unselectable", "autocomplete", "aria-label"];
var _hoisted_18 = {
  key: 2,
  class: "tiny-input__count"
};
var _hoisted_19 = {
  class: "tiny-input__count-inner"
};
var _hoisted_20 = {
  class: "tiny-input__count-text-length"
};
var _hoisted_21 = {
  class: "tiny-input__count-upper-limit"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_tooltip = resolveComponent("tiny-tooltip");
  var _component_tiny_tall_storage = resolveComponent("tiny-tall-storage");
  var _component_icon_close = resolveComponent("icon-close");
  return openBlock(), createElementBlock(
    "div",
    {
      class: normalizeClass([_ctx.$attrs.class, _ctx.type === "textarea" ? "tiny-textarea" : "tiny-input", _ctx.state.inputSize ? "tiny-input-" + _ctx.state.inputSize : "", {
        "is-disabled": _ctx.state.inputDisabled,
        "is-exceed": _ctx.state.inputExceed,
        "tiny-input-group": _ctx.slots.prepend || _ctx.slots.append,
        "tiny-input-group-append": _ctx.slots.append,
        "tiny-input-group-prepend": _ctx.slots.prepend,
        "tiny-input-prefix": _ctx.slots.prefix || _ctx.prefixIcon,
        "tiny-input-suffix": _ctx.slots.suffix || _ctx.suffixIcon || _ctx.clearable || _ctx.showPassword,
        "is-display-only": _ctx.state.isDisplayOnly
      }]),
      style: normalizeStyle(_ctx.$attrs.style),
      onMouseenter: _cache[20] || (_cache[20] = function($event) {
        _ctx.state.hovering = true;
        _ctx.$emit("mouseenter", $event);
      }),
      onMouseleave: _cache[21] || (_cache[21] = function($event) {
        _ctx.state.hovering = false;
        _ctx.$emit("mouseleave", $event);
      }),
      onClick: _cache[22] || (_cache[22] = function($event) {
        return _ctx.$emit("click", $event);
      })
    },
    [_ctx.type !== "textarea" ? (openBlock(), createElementBlock(
      Fragment,
      {
        key: 0
      },
      [_ctx.slots.prepend ? (openBlock(), createElementBlock("div", _hoisted_1, [renderSlot(_ctx.$slots, "prepend")])) : createCommentVNode("v-if", true), createElementVNode("span", _hoisted_2, [_ctx.state.isDisplayOnly ? (openBlock(), createBlock(_component_tiny_tooltip, {
        key: 0,
        effect: "light",
        content: _ctx.state.displayOnlyTooltip,
        display: _ctx.type === "password",
        placement: "top",
        onMouseenter: _ctx.handleEnterDisplayOnlyContent
      }, {
        default: withCtx(function() {
          return [_ctx.type === "password" ? (openBlock(), createElementBlock(
            "span",
            _hoisted_3,
            toDisplayString(_ctx.state.hiddenPassword),
            1
            /* TEXT */
          )) : (openBlock(), createElementBlock(
            "span",
            _hoisted_4,
            toDisplayString(_ctx.displayOnlyContent || _ctx.state.nativeInputValue),
            1
            /* TEXT */
          ))];
        }),
        _: 1
        /* STABLE */
      }, 8, ["content", "display", "onMouseenter"])) : createCommentVNode("v-if", true), _ctx.type !== "textarea" ? (openBlock(), createElementBlock("input", mergeProps({
        key: 1,
        ref: "input",
        name: _ctx.name
      }, _ctx.a(_ctx.$attrs, ["type", "class", "style", "^onw+", "id"]), {
        class: "tiny-input__inner",
        tabindex: _ctx.tabindex,
        type: _ctx.showPassword ? _ctx.state.passwordVisible ? "text" : "password" : _ctx.type,
        disabled: _ctx.state.inputDisabled,
        readonly: _ctx.readonly,
        unselectable: _ctx.readonly ? "on" : "off",
        autocomplete: _ctx.autocomplete,
        onCompositionstart: _cache[0] || (_cache[0] = function() {
          return _ctx.handleCompositionStart && _ctx.handleCompositionStart.apply(_ctx, arguments);
        }),
        onCompositionupdate: _cache[1] || (_cache[1] = function() {
          return _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate.apply(_ctx, arguments);
        }),
        onCompositionend: _cache[2] || (_cache[2] = function() {
          return _ctx.handleCompositionEnd && _ctx.handleCompositionEnd.apply(_ctx, arguments);
        }),
        onInput: _cache[3] || (_cache[3] = function() {
          return _ctx.handleInput && _ctx.handleInput.apply(_ctx, arguments);
        }),
        onFocus: _cache[4] || (_cache[4] = function() {
          return _ctx.handleFocus && _ctx.handleFocus.apply(_ctx, arguments);
        }),
        onBlur: _cache[5] || (_cache[5] = function() {
          return _ctx.handleBlur && _ctx.handleBlur.apply(_ctx, arguments);
        }),
        onChange: _cache[6] || (_cache[6] = function() {
          return _ctx.handleChange && _ctx.handleChange.apply(_ctx, arguments);
        }),
        "aria-label": _ctx.label,
        onKeyup: _cache[7] || (_cache[7] = function($event) {
          return _ctx.$emit("keyup", $event);
        }),
        onKeydown: _cache[8] || (_cache[8] = function($event) {
          return _ctx.$emit("keydown", $event);
        }),
        onPaste: _cache[9] || (_cache[9] = function($event) {
          return _ctx.$emit("paste", $event);
        })
      }), null, 16, _hoisted_5)) : createCommentVNode("v-if", true)]), _ctx.isMemoryStorage ? (openBlock(), createBlock(_component_tiny_tall_storage, {
        key: 1,
        name: _ctx.name,
        "localstorage-data": _ctx.storageData,
        "is-memory-storage": _ctx.isMemoryStorage,
        onSelected: _ctx.selectedMemory
      }, null, 8, ["name", "localstorage-data", "is-memory-storage", "onSelected"])) : createCommentVNode("v-if", true), !_ctx.state.isDisplayOnly && (_ctx.slots.prefix || _ctx.prefixIcon) ? (openBlock(), createElementBlock(
        "span",
        _hoisted_6,
        [renderSlot(_ctx.$slots, "prefix"), _ctx.prefixIcon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon), {
          key: 0,
          class: "tiny-svg-size tiny-input__icon"
        })) : createCommentVNode("v-if", true)],
        512
        /* NEED_PATCH */
      )) : createCommentVNode("v-if", true), !_ctx.state.isDisplayOnly && _ctx.getSuffixVisible() ? (openBlock(), createElementBlock("div", _hoisted_7, [createVNode(Transition, {
        name: "tiny-transition-icon-out-in"
      }, {
        default: withCtx(function() {
          return [_ctx.getSuffixVisible() ? (openBlock(), createElementBlock("span", _hoisted_8, [createElementVNode("span", _hoisted_9, [_ctx.frontClearIcon && _ctx.state.showClear ? (openBlock(), createBlock(_component_icon_close, {
            key: 0,
            class: "tiny-svg-size tiny-input__icon tiny-input__clear",
            onMousedown: _cache[10] || (_cache[10] = withModifiers(function() {
            }, ["prevent"])),
            onClick: _ctx.clear
          }, null, 8, ["onClick"])) : createCommentVNode("v-if", true), !_ctx.state.showClear || !_ctx.state.showPwdVisible || !_ctx.state.isWordLimitVisible ? (openBlock(), createElementBlock(
            Fragment,
            {
              key: 1
            },
            [renderSlot(_ctx.$slots, "suffix"), _ctx.suffixIcon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.suffixIcon), {
              key: 0,
              class: "tiny-svg-size tiny-input__icon"
            })) : createCommentVNode("v-if", true)],
            64
            /* STABLE_FRAGMENT */
          )) : createCommentVNode("v-if", true), !_ctx.frontClearIcon && _ctx.state.showClear ? (openBlock(), createBlock(_component_icon_close, {
            key: 2,
            class: "tiny-svg-size tiny-input__icon tiny-input__clear",
            onMousedown: _cache[11] || (_cache[11] = withModifiers(function() {
            }, ["prevent"])),
            onClick: _ctx.clear
          }, null, 8, ["onClick"])) : createCommentVNode("v-if", true), _ctx.showPassword ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.state.passwordVisible ? "icon-eyeopen" : "icon-eyeclose"), {
            key: 3,
            class: "tiny-svg-size tiny-input__icon",
            onClick: _ctx.handlePasswordVisible
          }, null, 8, ["onClick"])) : createCommentVNode("v-if", true), _ctx.state.isWordLimitVisible ? (openBlock(), createElementBlock("span", _hoisted_10, [createElementVNode("span", _hoisted_11, [createElementVNode(
            "span",
            _hoisted_12,
            toDisplayString(_ctx.state.showWordLimit ? "" + _ctx.state.textLength : ""),
            1
            /* TEXT */
          ), createElementVNode(
            "span",
            _hoisted_13,
            toDisplayString(_ctx.state.showWordLimit ? "/" + _ctx.state.upperLimit : _ctx.state.textLength),
            1
            /* TEXT */
          )])])) : createCommentVNode("v-if", true)]), _ctx.state.validateState ? (openBlock(), createElementBlock(
            "i",
            {
              key: 0,
              class: normalizeClass(["tiny-input__icon", ["tiny-input__validateIcon", _ctx.validateIcon]])
            },
            null,
            2
            /* CLASS */
          )) : createCommentVNode("v-if", true)])) : createCommentVNode("v-if", true)];
        }),
        _: 3
        /* FORWARDED */
      })])) : createCommentVNode("v-if", true), _ctx.slots.append ? (openBlock(), createElementBlock("div", _hoisted_14, [renderSlot(_ctx.$slots, "append")])) : createCommentVNode("v-if", true), _ctx.slots.panel ? (openBlock(), createElementBlock("div", _hoisted_15, [renderSlot(_ctx.$slots, "panel")])) : createCommentVNode("v-if", true)],
      64
      /* STABLE_FRAGMENT */
    )) : (openBlock(), createElementBlock(
      "span",
      {
        key: 1,
        class: normalizeClass([_ctx.autosize ? "tiny-textarea-autosize-display-only" : "tiny-textarea-display-only"])
      },
      [_ctx.state.isDisplayOnly ? (openBlock(), createBlock(_component_tiny_tooltip, {
        key: 0,
        effect: "light",
        content: _ctx.state.displayOnlyTooltip,
        placement: "top",
        onMouseenter: _cache[12] || (_cache[12] = function($event) {
          return _ctx.handleEnterDisplayOnlyContent($event, "textarea");
        })
      }, {
        default: withCtx(function() {
          return [createElementVNode(
            "span",
            _hoisted_16,
            toDisplayString(_ctx.displayOnlyContent || _ctx.state.nativeInputValue),
            1
            /* TEXT */
          )];
        }),
        _: 1
        /* STABLE */
      }, 8, ["content"])) : createCommentVNode("v-if", true), createElementVNode("textarea", mergeProps({
        ref: "textarea"
      }, _ctx.a(_ctx.$attrs, ["type", "class", "style", "id"]), {
        tabindex: _ctx.tabindex,
        class: "tiny-textarea__inner",
        onCompositionstart: _cache[13] || (_cache[13] = function() {
          return _ctx.handleCompositionStart && _ctx.handleCompositionStart.apply(_ctx, arguments);
        }),
        onCompositionupdate: _cache[14] || (_cache[14] = function() {
          return _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate.apply(_ctx, arguments);
        }),
        onCompositionend: _cache[15] || (_cache[15] = function() {
          return _ctx.handleCompositionEnd && _ctx.handleCompositionEnd.apply(_ctx, arguments);
        }),
        onInput: _cache[16] || (_cache[16] = function() {
          return _ctx.handleInput && _ctx.handleInput.apply(_ctx, arguments);
        }),
        disabled: _ctx.state.inputDisabled,
        readonly: _ctx.readonly,
        unselectable: _ctx.readonly ? "on" : "off",
        autocomplete: _ctx.autocomplete,
        style: _ctx.state.textareaStyle,
        onFocus: _cache[17] || (_cache[17] = function() {
          return _ctx.handleFocus && _ctx.handleFocus.apply(_ctx, arguments);
        }),
        onBlur: _cache[18] || (_cache[18] = function() {
          return _ctx.handleBlur && _ctx.handleBlur.apply(_ctx, arguments);
        }),
        onChange: _cache[19] || (_cache[19] = function() {
          return _ctx.handleChange && _ctx.handleChange.apply(_ctx, arguments);
        }),
        "aria-label": _ctx.label
      }), "\n      ", 16, _hoisted_17)],
      2
      /* CLASS */
    )), _ctx.state.isWordLimitVisible && _ctx.type === "textarea" ? (openBlock(), createElementBlock("span", _hoisted_18, [createElementVNode("span", _hoisted_19, [createElementVNode(
      "span",
      _hoisted_20,
      toDisplayString(_ctx.state.showWordLimit ? "" + _ctx.state.textLength : ""),
      1
      /* TEXT */
    ), createElementVNode(
      "span",
      _hoisted_21,
      toDisplayString(_ctx.state.showWordLimit ? "/" + _ctx.state.upperLimit : _ctx.state.textLength),
      1
      /* TEXT */
    )])])) : createCommentVNode("v-if", true), renderSlot(_ctx.$slots, "default")],
    38
    /* CLASS, STYLE, NEED_HYDRATION */
  );
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
