function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $props, $setup } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import "@opentiny/vue-theme/ip-address/index.css";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return PcTemplate;
};
var IpAddress = defineComponent({
  name: $prefix + "IpAddress",
  props: _extends({}, $props, {
    size: String,
    /**
     * @property {String} value - 显示值
     */
    modelValue: String,
    /**
     * @property {String} [type = IPv4]  - IP地址输入组件类型（'IPv4', 'IPv6',）可选择
     */
    type: {
      type: String,
      default: "IPv4",
      validator: function validator(value) {
        return Boolean(~["IPv4", "IPv6"].indexOf(value));
      }
    },
    /**
     * @property {Boolean} readonly - 只读
     */
    readonly: Boolean,
    /**
     *  @property {Boolean} disabled - 禁用
     */
    disabled: Boolean,
    /**
     * @property {String, Object} [delimiter = .] - 组件IP段显示的分隔符改为图标
     */
    delimiter: {
      type: [String, Object],
      default: "icon-dot-ipv4"
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
IpAddress.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
IpAddress.install = function(Vue) {
  Vue.component(IpAddress.name, IpAddress);
};
IpAddress.version = version;
export {
  IpAddress as default
};
