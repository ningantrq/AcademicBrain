import { renderless, api } from "@opentiny/vue-renderless/link/vue";
import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import { openBlock, createElementBlock, mergeProps, createBlock, resolveDynamicComponent, normalizeClass, createCommentVNode, renderSlot } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  props: [].concat(props, ["disabled", "href", "icon", "type", "underline"]),
  emits: ["click"],
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = ["href"];
var _hoisted_2 = {
  key: 1,
  class: "tiny-link__inner"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("a", mergeProps({
    class: ["tiny-link", "tiny-link--additional", _ctx.type ? "tiny-link--" + _ctx.type : "", _ctx.state.disabled && "is-disabled", _ctx.underline && !_ctx.state.disabled && "is-underline"],
    href: _ctx.state.disabled ? null : _ctx.href
  }, _ctx.a(_ctx.$attrs, ["^on[A-Z]"]), {
    onClick: _cache[0] || (_cache[0] = function() {
      return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);
    })
  }), [_ctx.icon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon), {
    key: 0,
    class: normalizeClass(["tiny-svg-size tiny-link-svg", {
      "tiny-link-svg-only": !_ctx.slots.default
    }])
  }, null, 8, ["class"])) : createCommentVNode("v-if", true), _ctx.slots.default ? (openBlock(), createElementBlock("span", _hoisted_2, [renderSlot(_ctx.$slots, "default")])) : createCommentVNode("v-if", true), _ctx.slots.icon ? renderSlot(_ctx.$slots, "icon", {
    key: 2
  }) : createCommentVNode("v-if", true)], 16, _hoisted_1);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
