import { defineComponent, $prefix, setup as _setup } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/locales/vue";
import { use, zhCN, enUS } from "@opentiny/vue-locale";
import Popover from "@opentiny/vue-popover";
import { IconChevronUp, IconChevronDown } from "@opentiny/vue-icon";
import { resolveComponent, openBlock, createElementBlock, toDisplayString, createBlock, withCtx, createElementVNode, createTextVNode, withDirectives, createVNode, vShow, Fragment, renderList, normalizeClass } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

import "@opentiny/vue-theme/locales/index.css";
var _sfc_main = defineComponent({
  name: $prefix + "Locales",
  components: {
    TinyPopover: Popover,
    IconChevronUp: IconChevronUp(),
    IconChevronDown: IconChevronDown()
  },
  props: {
    local: {
      type: Boolean,
      default: false
    },
    changeLang: Function,
    getLocale: Function,
    getDomain: Function,
    getCurrentLocale: Function,
    getChangeLocaleUrl: Function,
    fetchSsoUpdate: Function,
    popperClass: String,
    popperAppendToBody: {
      type: Boolean,
      default: true
    }
  },
  setup: function setup(props, context) {
    var constants = {
      GLOBAL: "global"
    };
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true,
      extendOptions: {
        use,
        zhCN,
        enUS,
        constants
      }
    });
  }
});
var _hoisted_1 = {
  class: "tiny-locales"
};
var _hoisted_2 = {
  key: 0
};
var _hoisted_3 = {
  class: "poplist"
};
var _hoisted_4 = ["onClick"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_IconChevronDown = resolveComponent("IconChevronDown");
  var _component_IconChevronUp = resolveComponent("IconChevronUp");
  var _component_tiny_popover = resolveComponent("tiny-popover");
  return openBlock(), createElementBlock("div", _hoisted_1, [_ctx.state.locales.length === 1 ? (openBlock(), createElementBlock(
    "span",
    _hoisted_2,
    toDisplayString(_ctx.state.text && _ctx.t(_ctx.state.text)),
    1
    /* TEXT */
  )) : _ctx.state.locales.length === 2 ? (openBlock(), createElementBlock(
    "span",
    {
      key: 1,
      onClick: _cache[0] || (_cache[0] = function() {
        return _ctx.switchLanguage && _ctx.switchLanguage.apply(_ctx, arguments);
      })
    },
    toDisplayString(_ctx.state.text && _ctx.t(_ctx.state.text)),
    1
    /* TEXT */
  )) : (openBlock(), createBlock(_component_tiny_popover, {
    key: 2,
    trigger: "hover",
    "visible-arrow": false,
    onShow: _cache[1] || (_cache[1] = function($event) {
      return _ctx.state.visible = true;
    }),
    onHide: _cache[2] || (_cache[2] = function($event) {
      return _ctx.state.visible = false;
    }),
    placement: "bottom-start",
    "popper-class": "tiny-locales__popper" + (_ctx.popperClass ? " " + _ctx.popperClass : ""),
    "append-to-body": _ctx.popperAppendToBody
  }, {
    reference: withCtx(function() {
      return [createElementVNode("span", null, [createTextVNode(
        toDisplayString(_ctx.state.text && _ctx.t(_ctx.state.text)),
        1
        /* TEXT */
      ), createElementVNode("span", null, [withDirectives(createVNode(
        _component_IconChevronDown,
        null,
        null,
        512
        /* NEED_PATCH */
      ), [[vShow, !_ctx.state.visible]]), withDirectives(createVNode(
        _component_IconChevronUp,
        null,
        null,
        512
        /* NEED_PATCH */
      ), [[vShow, _ctx.state.visible]])])])];
    }),
    default: withCtx(function() {
      return [createElementVNode("div", _hoisted_3, [(openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.state.locales, function(lang) {
          return openBlock(), createElementBlock("li", {
            key: lang,
            class: normalizeClass({
              selected: _ctx.state.current === lang
            }),
            onClick: function onClick($event) {
              return _ctx.switchLanguage(lang);
            }
          }, toDisplayString(_ctx.t(lang)), 11, _hoisted_4);
        }),
        128
        /* KEYED_FRAGMENT */
      ))])];
    }),
    _: 1
    /* STABLE */
  }, 8, ["popper-class", "append-to-body"]))]);
}
var Locales = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.13.0";
Locales.install = function(Vue) {
  Vue.component(Locales.name, Locales);
};
Locales.version = version;
export {
  Locales as default
};
