import { defineComponent, props, setup as _setup, h } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/modal/vue";
import Button from "@opentiny/vue-button";
import { iconMinscreenLeft, iconFullscreenLeft } from "@opentiny/vue-icon";
import "@opentiny/vue-theme-mobile/modal/index.css";
var _sfc_main = /* @__PURE__ */ defineComponent({
  props: [].concat(props, ["_constants", "animat", "beforeClose", "duration", "escClosable", "events", "fullscreen", "height", "id", "isFormReset", "lockScroll", "lockView", "marginSize", "mask", "maskClosable", "message", "minHeight", "minWidth", "modelValue", "resize", "showFooter", "showHeader", "title", "top", "type", "vSize", "width", "zIndex"]),
  components: {
    Button
  },
  provide: function provide() {
    return {
      dialog: this
    };
  },
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  },
  render: function render() {
    var _ref, _this = this;
    var state = this.state, scopedSlots = this.scopedSlots, vSize = this.vSize, type = this.type, resize = this.resize, animat = this.animat, showHeader = this.showHeader;
    var showFooter = this.showFooter, title = this.title, message = this.message, lockScroll = this.lockScroll, lockView = this.lockView, mask = this.mask, t = this.t;
    var zoomLocat = state.zoomLocat, visible = state.visible, contentVisible = state.contentVisible, modalTop = state.modalTop, isMsg = state.isMsg;
    var defaultSlot = scopedSlots.default;
    var footerSlot = scopedSlots.footer;
    return h("div", {
      class: ["tiny-mobile-modal", "tiny-mobile-modal__wrapper", "type__" + type, (_ref = {}, _ref["size__" + vSize] = vSize, _ref.is__animat = animat, _ref.lock__scroll = lockScroll, _ref.lock__view = lockView, _ref.is__mask = mask, _ref.is__maximize = zoomLocat, _ref.is__visible = contentVisible, _ref.active = visible, _ref)],
      style: {
        zIndex: this.state.modalZindex,
        top: modalTop ? modalTop + "px" : null
      },
      on: {
        click: this.selfClickEvent
      }
    }, [h("div", {
      class: "tiny-mobile-modal__box",
      ref: "modalBox"
    }, [showHeader ? h("div", {
      class: "tiny-mobile-modal__header",
      on: {
        mousedown: this.mousedownEvent
      }
    }, [h("span", {
      class: "tiny-mobile-modal__title"
    }, title || t("ui.alert.title")), resize ? h(zoomLocat ? iconMinscreenLeft() : iconFullscreenLeft(), {
      class: ["tiny-mobile-modal__zoom-btn", "trigger__btn"],
      on: {
        click: this.toggleZoomEvent
      }
    }) : null]) : null, h("div", {
      class: "tiny-mobile-modal__body"
    }, [isMsg ? h("div", {
      class: "tiny-mobile-modal__status-wrapper"
    }) : null, h("div", {
      class: "tiny-mobile-modal__content"
    }, defaultSlot ? defaultSlot.call(this, {
      $modal: this
    }, h) : [h("div", {
      class: "tiny-mobile-modal__text"
    }, typeof message === "function" ? message.call(this, h) : message)])]), showFooter ? h("div", {
      class: "tiny-mobile-modal__footer"
    }, footerSlot ? footerSlot.call(this, {
      $modal: this,
      beforeClose: this.beforeClose
    }, h) : [type === "confirm" ? h(Button, {
      props: {
        class: ["tiny-mobile-button", "tiny-mobile-button--default"]
      },
      on: {
        click: this.cancelEvent
      }
    }, t("ui.button.cancel")) : null, h(Button, {
      props: {
        type: "primary",
        class: ["tiny-mobile-button", type !== "confirm" ? "tiny-mobile-button__single" : ""]
      },
      on: {
        click: this.confirmEvent
      }
    }, t("ui.button.confirm"))]) : null, !isMsg && resize ? h("span", {
      class: "tiny-mobile-modal__resize"
    }, ["wl", "wr", "swst", "sest", "st", "swlb", "selb", "sb"].map(function(type2) {
      return h("span", {
        class: type2 + "-resize",
        attrs: {
          "data-type": type2
        },
        on: {
          mousedown: _this.dragEvent
        }
      });
    })) : null])]);
  }
});
export {
  _sfc_main as default
};
