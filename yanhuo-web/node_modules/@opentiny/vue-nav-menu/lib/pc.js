import { renderless, api } from "@opentiny/vue-renderless/nav-menu/vue";
import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import { iconSetting, iconChevronRight, iconSandwichCollapse, iconSandwichExpand } from "@opentiny/vue-icon";
import Tooltip from "@opentiny/vue-tooltip";
import { resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, resolveDynamicComponent, createCommentVNode, renderSlot, createElementVNode, normalizeStyle, Fragment, renderList, withCtx, createTextVNode, toDisplayString, withDirectives, vShow, createVNode, Transition } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  props: [].concat(props, ["data", "parentKey", "overflow", "beforeSkip", "fetchMenuData", "fields", "prevent", "allowFullUrl"]),
  components: {
    TinyTooltip: Tooltip,
    IconSetting: iconSetting(),
    IconChevronRight: iconChevronRight(),
    IconSandwichCollapse: iconSandwichCollapse(),
    IconSandwichExpand: iconSandwichExpand()
  },
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-nav-menu",
  ref: "navMenu"
};
var _hoisted_2 = {
  key: 1,
  class: "slot-logo"
};
var _hoisted_3 = {
  class: "menu-container"
};
var _hoisted_4 = {
  key: 2,
  class: "slot-toolbar"
};
var _hoisted_5 = {
  key: 3,
  class: "slot-mobile-menu"
};
var _hoisted_6 = {
  key: 0,
  class: "more-menu"
};
var _hoisted_7 = {
  class: "sub-menu-ul"
};
var _hoisted_8 = {
  class: "group"
};
var _hoisted_9 = {
  key: 0
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_icon_chevron_right = resolveComponent("icon-chevron-right");
  var _component_tiny_tooltip = resolveComponent("tiny-tooltip");
  return openBlock(), createElementBlock(
    "div",
    _hoisted_1,
    [/^(retract|fixed)$/.test(_ctx.overflow) ? (openBlock(), createElementBlock(
      "div",
      {
        key: 0,
        class: normalizeClass(["more-button", {
          mobile: _ctx.slots["mobile-menu"]
        }]),
        onMouseenter: _cache[0] || (_cache[0] = function($event) {
          return _ctx.showSubMenu(_ctx.state.data[0].children, {
            more: true
          });
        }),
        onMouseleave: _cache[1] || (_cache[1] = function() {
          return _ctx.willHideSubMenu && _ctx.willHideSubMenu.apply(_ctx, arguments);
        })
      },
      [(openBlock(), createBlock(resolveDynamicComponent(_ctx.state.showMore ? "IconSandwichExpand" : "IconSandwichCollapse")))],
      34
      /* CLASS, NEED_HYDRATION */
    )) : createCommentVNode("v-if", true), _ctx.slots.logo ? (openBlock(), createElementBlock("div", _hoisted_2, [renderSlot(_ctx.$slots, "logo")])) : createCommentVNode("v-if", true), createElementVNode("div", _hoisted_3, [_ctx.state.data && _ctx.state.data.length ? (openBlock(), createElementBlock(
      "ul",
      {
        key: 0,
        style: normalizeStyle(_ctx.state.isSaaSTheme ? {} : _ctx.state.menuStyle),
        class: "menu"
      },
      [(openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(_ctx.state.data, function(item, index) {
          return openBlock(), createElementBlock("li", {
            key: index + (item.title || "")
          }, [(openBlock(), createBlock(resolveDynamicComponent(_ctx.getTag(item)), {
            to: _ctx.getRoute(item),
            class: normalizeClass({
              active: index === _ctx.state.activeIndex,
              selected: index === _ctx.state.selectedIndex
            }),
            onMouseenter: function onMouseenter($event) {
              return _ctx.showSubMenu(item.children, {
                index
              }, $event);
            },
            onMouseleave: _ctx.willHideSubMenu,
            onClick: function onClick($event) {
              return _ctx.clickMenu(item, index);
            }
          }, {
            default: withCtx(function() {
              return [createTextVNode(
                toDisplayString(item.title),
                1
                /* TEXT */
              )];
            }),
            _: 2
            /* DYNAMIC */
          }, 1064, ["to", "class", "onMouseenter", "onMouseleave", "onClick"]))]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))],
      4
      /* STYLE */
    )) : createCommentVNode("v-if", true)]), withDirectives(createElementVNode(
      "div",
      {
        style: normalizeStyle({
          marginLeft: _ctx.state.marginLeft + "px"
        }),
        class: "more",
        onMouseenter: _cache[2] || (_cache[2] = function($event) {
          return _ctx.showSubMenu(_ctx.state.more[0].children, {
            more: true
          });
        }),
        onMouseleave: _cache[3] || (_cache[3] = function() {
          return _ctx.willHideSubMenu && _ctx.willHideSubMenu.apply(_ctx, arguments);
        })
      },
      toDisplayString(_ctx.t("ui.navMenu.moreText")),
      37
      /* TEXT, STYLE, NEED_HYDRATION */
    ), [[vShow, _ctx.state.isShowMore]]), _ctx.slots.toolbar ? (openBlock(), createElementBlock("div", _hoisted_4, [renderSlot(_ctx.$slots, "toolbar")])) : createCommentVNode("v-if", true), _ctx.slots["mobile-menu"] ? (openBlock(), createElementBlock("div", _hoisted_5, [renderSlot(_ctx.$slots, "mobile-menu")])) : createCommentVNode("v-if", true), createVNode(Transition, {
      name: "tiny-transition-zoom-in-top",
      mode: "out-in",
      persisted: ""
    }, {
      default: withCtx(function() {
        return [withDirectives(createElementVNode(
          "div",
          {
            class: normalizeClass([[_ctx.state.popClass, {
              slide: _ctx.state.showPopmenu
            }, {
              "show-left-menu": _ctx.state.showMore
            }], "popmenu tiny-min-scrollbar"]),
            style: normalizeStyle(_ctx.state.popStyle),
            onMouseenter: _cache[5] || (_cache[5] = function() {
              return _ctx.stopHideSubMenu && _ctx.stopHideSubMenu.apply(_ctx, arguments);
            }),
            onMouseleave: _cache[6] || (_cache[6] = function() {
              return _ctx.willHideSubMenu && _ctx.willHideSubMenu.apply(_ctx, arguments);
            })
          },
          [_ctx.state.showMore ? (openBlock(), createElementBlock("div", _hoisted_6, [createElementVNode("ul", null, [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.state.more, function(item, index) {
              return openBlock(), createElementBlock(
                "li",
                {
                  key: index + (item.title || ""),
                  class: normalizeClass({
                    active: index === _ctx.state.subActiveIndex,
                    selected: index === _ctx.state.moreItemSelectedIndex
                  })
                },
                [(openBlock(), createBlock(resolveDynamicComponent(_ctx.getTag(item)), {
                  to: _ctx.getRoute(item),
                  class: normalizeClass({
                    showicon: item.children
                  }),
                  onMouseenter: function onMouseenter($event) {
                    return _ctx.setSubMenu(item.children, index);
                  },
                  onMouseleave: _ctx.leaveMoreMune,
                  onClick: function onClick($event) {
                    return _ctx.clickMenu(item, index);
                  }
                }, {
                  default: withCtx(function() {
                    return [createTextVNode(
                      toDisplayString(item.title),
                      1
                      /* TEXT */
                    )];
                  }),
                  _: 2
                  /* DYNAMIC */
                }, 1064, ["to", "class", "onMouseenter", "onMouseleave", "onClick"])), item.children ? (openBlock(), createBlock(_component_icon_chevron_right, {
                  key: 0,
                  class: "more-icon"
                })) : createCommentVNode("v-if", true)],
                2
                /* CLASS */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))])])) : createCommentVNode("v-if", true), _ctx.state.subMenus && _ctx.state.subMenus.length ? (openBlock(), createElementBlock(
            "div",
            {
              key: 1,
              class: normalizeClass([{
                "full-width": !_ctx.state.showMore
              }, "sub-menu"])
            },
            [createElementVNode("ul", _hoisted_7, [(openBlock(true), createElementBlock(
              Fragment,
              null,
              renderList(_ctx.state.subMenus, function(group, index) {
                return openBlock(), createElementBlock(
                  "li",
                  {
                    key: index + (group.title || ""),
                    class: normalizeClass(["sub-menu-li", {
                      "col-xs-24 col-sm-12 col-md-8 col-lg-6 col-xl-4": !_ctx.state.isSaaSTheme && !_ctx.state.popClass.includes("single")
                    }])
                  },
                  [createElementVNode("ul", _hoisted_8, [createElementVNode(
                    "li",
                    {
                      class: normalizeClass(["tiny-nav-menu__sub-menu-title", !!group.title ? "" : "tiny-nav-menu__sub-menu-title-blank"])
                    },
                    [(openBlock(), createBlock(resolveDynamicComponent(_ctx.getTag(group)), {
                      to: _ctx.getRoute(group),
                      onClick: function onClick($event) {
                        return _ctx.clickMenu(group, -1, index);
                      },
                      onMouseenter: _cache[4] || (_cache[4] = function($event) {
                        return _ctx.handleTitleMouseenter($event);
                      }),
                      onMouseleave: _ctx.handleTitleMouseleave,
                      class: normalizeClass({
                        selected: index === _ctx.state.subIndex && _ctx.state.subItemSelectedIndex === -1
                      })
                    }, {
                      default: withCtx(function() {
                        return [createTextVNode(
                          toDisplayString(group.title),
                          1
                          /* TEXT */
                        )];
                      }),
                      _: 2
                      /* DYNAMIC */
                    }, 1064, ["to", "onClick", "onMouseleave", "class"])), group.url ? (openBlock(), createBlock(_component_icon_chevron_right, {
                      key: 0,
                      class: "go-to-icon"
                    })) : createCommentVNode("v-if", true)],
                    2
                    /* CLASS */
                  ), (openBlock(true), createElementBlock(
                    Fragment,
                    null,
                    renderList(group.children, function(item, i) {
                      return openBlock(), createElementBlock(
                        "li",
                        {
                          key: i + (item.title || ""),
                          class: normalizeClass(["sub-item", {
                            "only-secondary-title": !group.title && !_ctx.state.subMenu[i].children,
                            "third-title": item.children && item.children.length
                          }])
                        },
                        [(openBlock(), createBlock(resolveDynamicComponent(_ctx.getTag(item)), {
                          to: _ctx.getRoute(item),
                          onClick: function onClick($event) {
                            return _ctx.clickMenu(item, i, index);
                          },
                          class: normalizeClass({
                            selected: i === _ctx.state.subItemSelectedIndex && index === _ctx.state.subIndex
                          })
                        }, {
                          default: withCtx(function() {
                            return [createTextVNode(
                              toDisplayString(item.title),
                              1
                              /* TEXT */
                            )];
                          }),
                          _: 2
                          /* DYNAMIC */
                        }, 1032, ["to", "onClick", "class"])), item.children && item.children.length ? (openBlock(), createElementBlock("ul", _hoisted_9, [(openBlock(true), createElementBlock(
                          Fragment,
                          null,
                          renderList(item.children, function(subItem, j) {
                            return openBlock(), createElementBlock("li", {
                              key: j + (subItem.title || ""),
                              class: "sub-item"
                            }, [(openBlock(), createBlock(resolveDynamicComponent(_ctx.getTag(subItem)), {
                              to: _ctx.getRoute(subItem),
                              onClick: function onClick($event) {
                                return _ctx.clickMenu(subItem);
                              }
                            }, {
                              default: withCtx(function() {
                                return [createTextVNode(
                                  toDisplayString(subItem.title),
                                  1
                                  /* TEXT */
                                )];
                              }),
                              _: 2
                              /* DYNAMIC */
                            }, 1032, ["to", "onClick"]))]);
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))])) : createCommentVNode("v-if", true)],
                        2
                        /* CLASS */
                      );
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))])],
                  2
                  /* CLASS */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            ))])],
            2
            /* CLASS */
          )) : createCommentVNode("v-if", true)],
          38
          /* CLASS, STYLE, NEED_HYDRATION */
        ), [[vShow, _ctx.state.showPopmenu]])];
      }),
      _: 1
      /* STABLE */
    }), createVNode(_component_tiny_tooltip, {
      ref: "tooltip",
      modelValue: _ctx.state.tooltipVisible,
      "onUpdate:modelValue": _cache[7] || (_cache[7] = function($event) {
        return _ctx.state.tooltipVisible = $event;
      }),
      manual: true,
      effect: "light",
      content: _ctx.state.tooltipContent,
      placement: "top"
    }, null, 8, ["modelValue", "content"])],
    512
    /* NEED_PATCH */
  );
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
