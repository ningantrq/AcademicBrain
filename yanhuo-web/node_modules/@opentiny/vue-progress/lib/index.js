function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  PROGRESS_TYPE: {
    LINE: "line",
    CIRCLE: "circle",
    DASHBOARD: "dashboard"
  },
  PROGRESS_SIZE: {
    SMALL: "small",
    MEDIUM: "medium",
    LARGE: "large"
  },
  PROGRESS_SIZE_WIDTH: {
    SMALL: 48,
    MEDIUM: 96,
    LARGE: 160
  },
  PROGRESS_STATUS: {
    SUCCESS: "success",
    EXCEPTION: "exception",
    WARNING: "warning"
  },
  STATUS_TO_COLOR: {
    success: "#00a874",
    exception: "#eb171f",
    warning: "#fdc000"
  },
  STATUS_DEFAULT_COLOR: "#0067d1",
  ICON_CIRCLE_WARNING: "icon-warning",
  ICON_CIRCLE_SUCCESS: "icon-success",
  ICON_CIRCLE_EXCEPTION: "icon-error",
  ICON_SUCCESS: "icon-yes",
  ICON_EXCEPTION: "icon-close",
  ICON_WARNING: "icon-warning",
  TEXT_XS: 12,
  TEXT_SM: 14,
  WIDTH_RATE_TWO: 2,
  WIDTH_RATE_THREE: 3,
  WIDTH_RATE_SIX: 6,
  DEFAULT_STROKE_WIDTH: 6,
  REL_STROKE_WIDTH: 4,
  DEFAULT_WIDTH: 126,
  STROKE_WIDTH_RATE: 0.4
};
var progressProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  color: {
    type: [String, Array, Function],
    default: ""
  },
  info: String,
  format: Function,
  percentage: {
    type: Number,
    default: 0,
    required: true,
    validator: function validator(val) {
      return val >= 0 && val <= 100;
    }
  },
  showText: {
    type: Boolean,
    default: true
  },
  status: {
    type: String,
    validator: function validator2(value) {
      return !!$constants.PROGRESS_STATUS[value.toUpperCase()];
    }
  },
  strokeWidth: {
    type: Number,
    default: 0
  },
  textInside: {
    type: Boolean,
    default: false
  },
  type: {
    type: String,
    default: $constants.PROGRESS_TYPE.LINE,
    validator: function validator3(value) {
      return !!$constants.PROGRESS_TYPE[value.toUpperCase()];
    }
  },
  size: {
    type: String,
    default: $constants.PROGRESS_SIZE.MEDIUM,
    validator: function validator4(value) {
      return !!$constants.PROGRESS_SIZE[value.toUpperCase()];
    }
  },
  width: {
    type: Number,
    default: 0
  }
});
var Progress = defineComponent({
  name: $prefix + "Progress",
  props: progressProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
Progress.install = function(Vue) {
  Vue.component(Progress.name, Progress);
};
Progress.version = version;
export {
  Progress as default
};
