export declare const $constants: {
    PROGRESS_TYPE: {
        LINE: string;
        CIRCLE: string;
        DASHBOARD: string;
    };
    PROGRESS_SIZE: {
        SMALL: string;
        MEDIUM: string;
        LARGE: string;
    };
    PROGRESS_SIZE_WIDTH: {
        SMALL: number;
        MEDIUM: number;
        LARGE: number;
    };
    PROGRESS_STATUS: {
        SUCCESS: string;
        EXCEPTION: string;
        WARNING: string;
    };
    STATUS_TO_COLOR: {
        success: string;
        exception: string;
        warning: string;
    };
    STATUS_DEFAULT_COLOR: string;
    ICON_CIRCLE_WARNING: string;
    ICON_CIRCLE_SUCCESS: string;
    ICON_CIRCLE_EXCEPTION: string;
    ICON_SUCCESS: string;
    ICON_EXCEPTION: string;
    ICON_WARNING: string;
    TEXT_XS: number;
    TEXT_SM: number;
    WIDTH_RATE_TWO: number;
    WIDTH_RATE_THREE: number;
    WIDTH_RATE_SIX: number;
    DEFAULT_STROKE_WIDTH: number;
    REL_STROKE_WIDTH: number;
    DEFAULT_WIDTH: number;
    STROKE_WIDTH_RATE: number;
};
export declare const progressProps: {
    _constants: {
        type: ObjectConstructor;
        default: () => {
            PROGRESS_TYPE: {
                LINE: string;
                CIRCLE: string;
                DASHBOARD: string;
            };
            PROGRESS_SIZE: {
                SMALL: string;
                MEDIUM: string;
                LARGE: string;
            };
            PROGRESS_SIZE_WIDTH: {
                SMALL: number;
                MEDIUM: number;
                LARGE: number;
            };
            PROGRESS_STATUS: {
                SUCCESS: string;
                EXCEPTION: string;
                WARNING: string;
            };
            STATUS_TO_COLOR: {
                success: string;
                exception: string;
                warning: string;
            };
            STATUS_DEFAULT_COLOR: string;
            ICON_CIRCLE_WARNING: string;
            ICON_CIRCLE_SUCCESS: string;
            ICON_CIRCLE_EXCEPTION: string;
            ICON_SUCCESS: string;
            ICON_EXCEPTION: string;
            ICON_WARNING: string;
            TEXT_XS: number;
            TEXT_SM: number;
            WIDTH_RATE_TWO: number;
            WIDTH_RATE_THREE: number;
            WIDTH_RATE_SIX: number;
            DEFAULT_STROKE_WIDTH: number;
            REL_STROKE_WIDTH: number;
            DEFAULT_WIDTH: number;
            STROKE_WIDTH_RATE: number;
        };
    };
    color: {
        type: (StringConstructor | ArrayConstructor | FunctionConstructor)[];
        default: string;
    };
    info: StringConstructor;
    format: FunctionConstructor;
    percentage: {
        type: NumberConstructor;
        default: number;
        required: boolean;
        validator: (val: number) => boolean;
    };
    showText: {
        type: BooleanConstructor;
        default: boolean;
    };
    status: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    strokeWidth: {
        type: NumberConstructor;
        default: number;
    };
    textInside: {
        type: BooleanConstructor;
        default: boolean;
    };
    type: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    size: {
        type: StringConstructor;
        default: string;
        validator: (value: any) => boolean;
    };
    width: {
        type: NumberConstructor;
        default: number;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};
declare const _default: import("@vue/runtime-core").DefineComponent<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            PROGRESS_TYPE: {
                LINE: string;
                CIRCLE: string;
                DASHBOARD: string;
            };
            PROGRESS_SIZE: {
                SMALL: string;
                MEDIUM: string;
                LARGE: string;
            };
            PROGRESS_SIZE_WIDTH: {
                SMALL: number;
                MEDIUM: number;
                LARGE: number;
            };
            PROGRESS_STATUS: {
                SUCCESS: string;
                EXCEPTION: string;
                WARNING: string;
            };
            STATUS_TO_COLOR: {
                success: string;
                exception: string;
                warning: string;
            };
            STATUS_DEFAULT_COLOR: string;
            ICON_CIRCLE_WARNING: string;
            ICON_CIRCLE_SUCCESS: string;
            ICON_CIRCLE_EXCEPTION: string;
            ICON_SUCCESS: string;
            ICON_EXCEPTION: string;
            ICON_WARNING: string;
            TEXT_XS: number;
            TEXT_SM: number;
            WIDTH_RATE_TWO: number;
            WIDTH_RATE_THREE: number;
            WIDTH_RATE_SIX: number;
            DEFAULT_STROKE_WIDTH: number;
            REL_STROKE_WIDTH: number;
            DEFAULT_WIDTH: number;
            STROKE_WIDTH_RATE: number;
        };
    };
    color: {
        type: (StringConstructor | ArrayConstructor | FunctionConstructor)[];
        default: string;
    };
    info: StringConstructor;
    format: FunctionConstructor;
    percentage: {
        type: NumberConstructor;
        default: number;
        required: boolean;
        validator: (val: number) => boolean;
    };
    showText: {
        type: BooleanConstructor;
        default: boolean;
    };
    status: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    strokeWidth: {
        type: NumberConstructor;
        default: number;
    };
    textInside: {
        type: BooleanConstructor;
        default: boolean;
    };
    type: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    size: {
        type: StringConstructor;
        default: string;
        validator: (value: any) => boolean;
    };
    width: {
        type: NumberConstructor;
        default: number;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            PROGRESS_TYPE: {
                LINE: string;
                CIRCLE: string;
                DASHBOARD: string;
            };
            PROGRESS_SIZE: {
                SMALL: string;
                MEDIUM: string;
                LARGE: string;
            };
            PROGRESS_SIZE_WIDTH: {
                SMALL: number;
                MEDIUM: number;
                LARGE: number;
            };
            PROGRESS_STATUS: {
                SUCCESS: string;
                EXCEPTION: string;
                WARNING: string;
            };
            STATUS_TO_COLOR: {
                success: string;
                exception: string;
                warning: string;
            };
            STATUS_DEFAULT_COLOR: string;
            ICON_CIRCLE_WARNING: string;
            ICON_CIRCLE_SUCCESS: string;
            ICON_CIRCLE_EXCEPTION: string;
            ICON_SUCCESS: string;
            ICON_EXCEPTION: string;
            ICON_WARNING: string;
            TEXT_XS: number;
            TEXT_SM: number;
            WIDTH_RATE_TWO: number;
            WIDTH_RATE_THREE: number;
            WIDTH_RATE_SIX: number;
            DEFAULT_STROKE_WIDTH: number;
            REL_STROKE_WIDTH: number;
            DEFAULT_WIDTH: number;
            STROKE_WIDTH_RATE: number;
        };
    };
    color: {
        type: (StringConstructor | ArrayConstructor | FunctionConstructor)[];
        default: string;
    };
    info: StringConstructor;
    format: FunctionConstructor;
    percentage: {
        type: NumberConstructor;
        default: number;
        required: boolean;
        validator: (val: number) => boolean;
    };
    showText: {
        type: BooleanConstructor;
        default: boolean;
    };
    status: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    strokeWidth: {
        type: NumberConstructor;
        default: number;
    };
    textInside: {
        type: BooleanConstructor;
        default: boolean;
    };
    type: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    size: {
        type: StringConstructor;
        default: string;
        validator: (value: any) => boolean;
    };
    width: {
        type: NumberConstructor;
        default: number;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    type: string;
    color: string | Function | unknown[];
    tiny_mode_root: boolean;
    _constants: Record<string, any>;
    width: number;
    size: string;
    strokeWidth: number;
    percentage: number;
    showText: boolean;
    textInside: boolean;
}, {}>;
export default _default;
