declare const _default: import("@vue/runtime-core").DefineComponent<{
    field: StringConstructor;
    operator: {};
    value: {};
    valueSource: {};
    fieldData: {};
    type: {
        type: StringConstructor;
        default: string;
    };
    inputType: {
        type: StringConstructor;
        default: string;
    };
    values: {
        type: ArrayConstructor;
        default: () => never[];
    };
    listsAsArrays: {};
    parseNumbers: {};
    separator: {};
    selectorComponent: {};
    skipHook: {};
    handleOnChange: {};
    className: {};
    path: {};
    level: {};
    title: {};
    disabled: {};
    context: {};
    validation: {};
    testID: {};
    schema: {};
}, {
    standardClassnames: {
        readonly ruleGroup: "ruleGroup";
        readonly queryBuilder: "queryBuilder";
        readonly header: "ruleGroup-header";
        readonly combinators: "ruleGroup-combinators";
        readonly body: "ruleGroup-body";
        readonly addRule: string;
        readonly addGroup: string;
        readonly cloneRule: string;
        readonly cloneGroup: string;
        readonly removeGroup: string;
        readonly notToggle: "ruleGroup-notToggle";
        readonly rule: "query-builder-rule";
        readonly fields: "rule-fields";
        readonly operators: "rule-operators";
        readonly value: "rule-value";
        readonly removeRule: string;
        readonly clearData: string;
        readonly betweenRules: "betweenRules";
        readonly valid: "queryBuilder-valid";
        readonly invalid: "queryBuilder-invalid";
        readonly dndDragging: "dndDragging";
        readonly dndOver: "dndOver";
        readonly dndCopy: "dndCopy";
        readonly dragHandle: "queryBuilder-dragHandle";
        readonly disabled: "queryBuilder-disabled";
        readonly lockRule: "rule-lock";
        readonly lockGroup: "ruleGroup-lock";
        readonly valueSource: "rule-valueSource";
        readonly valueListItem: "rule-value-list-item";
        readonly branches: "queryBuilder-branches";
        readonly displayOnlyField: "display-only-field";
    };
    getFirstOption: (arr?: import("../ts").OptionList | undefined) => string | null;
    parseNumber: (v: any, { parseNumbers }: import("../utils").ParseNumberOptions) => any;
    modelValue: {
        from: string;
        to: string;
    };
}, unknown, {
    allProps(): {
        operator: unknown;
        value: unknown;
        handleOnChange: unknown;
        title: unknown;
        className: unknown;
        type: string;
        inputType: string;
        values: unknown[];
        listsAsArrays: unknown;
        parseNumbers: unknown;
        fieldData: unknown;
        disabled: unknown;
        separator: unknown;
        skipHook: unknown;
        testID: unknown;
        SelectorComponent: unknown;
        props: {
            context?: unknown;
            path?: unknown;
            level?: unknown;
            field?: string | undefined;
            valueSource?: unknown;
            schema?: unknown;
            validation?: unknown;
        };
        multiValueHandler: any;
        placeHolderText: any;
        inputTypeCoerced: string;
    };
    show(): boolean;
}, {
    change(e: any): any;
    change1(i: number): (e: any) => any;
}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    field: StringConstructor;
    operator: {};
    value: {};
    valueSource: {};
    fieldData: {};
    type: {
        type: StringConstructor;
        default: string;
    };
    inputType: {
        type: StringConstructor;
        default: string;
    };
    values: {
        type: ArrayConstructor;
        default: () => never[];
    };
    listsAsArrays: {};
    parseNumbers: {};
    separator: {};
    selectorComponent: {};
    skipHook: {};
    handleOnChange: {};
    className: {};
    path: {};
    level: {};
    title: {};
    disabled: {};
    context: {};
    validation: {};
    testID: {};
    schema: {};
}>>, {
    type: string;
    values: unknown[];
    inputType: string;
}, {}>;
export default _default;
