import "../../chunk-G2ADBYYC.js";
const setPosition = (el, x, y) => {
  el.style.top = `${y}px`;
  el.style.left = `${x}px`;
};
const getXBySaturation = (s, width) => s * width / 100;
const getYByLight = (l, height) => (100 - l) * height / 100;
const updatePosition = (event, rect, cursor) => {
  let x = event.clientX - rect.left;
  let y = event.clientY - rect.top;
  x = Math.max(0, x);
  x = Math.min(x, rect.width);
  y = Math.max(0, y);
  y = Math.min(y, rect.height);
  setPosition(cursor.value, x - 1 / 2 * cursor.value.offsetWidth, y - 1 / 2 * cursor.value.offsetWidth);
  return { x, y };
};
const calcSaturation = (x, width) => x / width;
const calcBrightness = (y, height) => 100 - y / height * 100;
const getThumbTop = (wrapper, thumb, hue) => {
  return Math.round(hue * (wrapper.offsetHeight - thumb.offsetHeight / 2) / 360);
};
const resetCursor = (s, v, wrapper, cursor, thumb, color, h) => {
  const { width, height } = wrapper.value.getBoundingClientRect();
  const x = getXBySaturation(s, width) - 1 / 2 * cursor.value.offsetWidth;
  const y = getYByLight(v, height) - 1 / 2 * cursor.value.offsetWidth;
  setPosition(cursor.value, x < 0 ? 0 : x, y < 0 ? 0 : y);
  const thummbTop = getThumbTop(wrapper.value, thumb.value, color.get("h"));
  thumb.value.style.top = `${thummbTop}px`;
  h.value = color.get("h");
};
const updateCursor = (wrapper, cursor, emit) => {
  return (color, event) => {
    const rect = wrapper.value.getBoundingClientRect();
    const { x, y } = updatePosition(event, rect, cursor);
    color.set({
      s: calcSaturation(x, rect.width) * 100,
      v: calcBrightness(y, rect.height),
      h: color.get("h")
    });
    emit("sv-update", {
      s: color.get("s"),
      v: color.get("v"),
      h: color.get("h")
    });
  };
};
const updateThumb = (bar, thumb, h, emit) => {
  return (event) => {
    const e = event;
    const rect = bar.value.getBoundingClientRect();
    let top = e.clientY - rect.top;
    top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);
    top = Math.max(thumb.value.offsetHeight / 2, top);
    thumb.value.style.top = `${top}px`;
    h.value = Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 360);
    emit("hue-update", h.value);
  };
};
export {
  calcBrightness,
  calcSaturation,
  getThumbTop,
  getXBySaturation,
  getYByLight,
  resetCursor,
  setPosition,
  updateCursor,
  updatePosition,
  updateThumb
};
