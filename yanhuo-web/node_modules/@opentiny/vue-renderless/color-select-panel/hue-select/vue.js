import "../../chunk-G2ADBYYC.js";
import { draggable } from "../utils/use-drag";
import { getThumbTop, resetCursor, updateThumb, updateCursor } from "./index";
const api = ["state", "cursor", "wrapper", "bar", "thumb"];
const renderless = (props, context, { emit, expose }) => {
  const cursor = context.ref();
  const wrapper = context.ref();
  const thumb = context.ref();
  const bar = context.ref();
  const color = props.color;
  const h = context.ref(color.get("h"));
  const background = `hsl(${h.value}deg, 100%, 50%)`;
  const state = context.reactive({
    background
  });
  const api2 = { state, cursor, wrapper, bar, thumb };
  context.watch(
    () => props,
    () => {
      h.value = color.get("h");
      resetCursor(color.get("s"), color.get("v"), wrapper, cursor, thumb, color, h);
    },
    { deep: true }
  );
  context.watch(h, (newHue) => {
    state.background = `hsl(${newHue}deg, 100%, 50%)`;
  });
  context.onMounted(() => {
    const update = {
      thumb: updateThumb(bar, thumb, h, emit),
      cursor: updateCursor(wrapper, cursor, emit)
    };
    const thumbTop = getThumbTop(wrapper.value, thumb.value, h.value);
    thumb.value.style.top = `${thumbTop}px`;
    resetCursor(color.get("s"), color.get("v"), wrapper, cursor, thumb, color, h);
    draggable(wrapper.value, {
      drag(event) {
        update.cursor(color, event);
      },
      start(event) {
        update.cursor(color, event);
      }
    });
    draggable(bar.value, {
      drag(event) {
        update.thumb(event);
      },
      start(event) {
        update.thumb(event);
      }
    });
  });
  return api2;
};
export {
  api,
  renderless
};
