import "../../chunk-G2ADBYYC.js";
import { on } from "./dom";
const isServer = typeof window === "undefined";
const nodeList = [];
const nameSpace = "@@clickoutsideContext";
let startClick;
let seed = 0;
if (!isServer) {
  on(document, "mousedown", (event) => startClick = event);
  on(document, "mouseup", (event) => {
    nodeList.forEach((node) => node[nameSpace].documentHandler(event, startClick));
  });
}
const createDocumentHandler = (el, binding, vnode) => function(mouseup = {}, mousedown = {}) {
  let popperElm = vnode.context.popperElm || vnode.context.state.popperElm;
  if (!mouseup.target || !mousedown.target || el.contains(mouseup.target) || el.contains(mousedown.target) || el === mouseup.target || popperElm && (popperElm.contains(mouseup.target) || popperElm.contains(mousedown.target))) {
    return;
  }
  if (binding.expression && el[nameSpace].methodName && vnode.context[el[nameSpace].methodName]) {
    vnode.context[el[nameSpace].methodName]();
  } else {
    el[nameSpace].bindingFn && el[nameSpace].bindingFn();
  }
};
var clickoutside_default = {
  bind: (el, binding, vnode) => {
    nodeList.push(el);
    const id = seed++;
    el[nameSpace] = {
      id,
      documentHandler: createDocumentHandler(el, binding, vnode),
      methodName: binding.expression,
      bindingFn: binding.value
    };
  },
  update: (el, binding, vnode) => {
    el[nameSpace].documentHandler = createDocumentHandler(el, binding, vnode);
    el[nameSpace].methodName = binding.expression;
    el[nameSpace].bindingFn = binding.value;
  },
  unbind: (el) => {
    if (el.nodeType !== Node.ELEMENT_NODE) {
      return;
    }
    let len = nodeList.length;
    for (let i = 0; i < len; i++) {
      if (nodeList[i][nameSpace].id === el[nameSpace].id) {
        nodeList.splice(i, 1);
        break;
      }
    }
    delete el[nameSpace];
  }
};
export {
  clickoutside_default as default
};
