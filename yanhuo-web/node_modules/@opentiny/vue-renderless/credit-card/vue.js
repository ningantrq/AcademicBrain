import "../chunk-G2ADBYYC.js";
import { cardType, changeFocus, getIsNumberMasked, changePlaceholder, focus, blur, toggleEvent } from "./index";
const api = ["state", "changeFocus", "getIsNumberMasked", "changePlaceholder"];
const initState = ({ reactive, props, computed }) => {
  const state = reactive({
    isFocused: false,
    currentFocus: null,
    isCardFlipped: false,
    focusElementStyle: null,
    currentPlaceholder: "",
    amexCardPlaceholder: "#### ###### #####",
    dinersCardPlaceholder: "#### ###### ####",
    defaultCardPlaceholder: "#### #### #### ####",
    cardType: computed(() => cardType(props.labels.cardNumber))
  });
  return state;
};
const initApi = ({ api: api2, state, props, refs, nextTick }) => {
  Object.assign(api2, {
    state,
    blur: blur({ props, state }),
    focus: focus({ props, state }),
    changeFocus: changeFocus({ refs, state }),
    getIsNumberMasked: getIsNumberMasked(props),
    changePlaceholder: changePlaceholder({ api: api2, nextTick, state })
  });
};
const initWatch = ({ watch, state, api: api2 }) => {
  watch(
    () => state.currentFocus,
    () => {
      if (state.currentFocus) {
        api2.changeFocus();
      } else {
        state.focusElementStyle = null;
      }
    },
    { immediate: true }
  );
  watch(() => state.cardType, api2.changePlaceholder, { immediate: true });
};
const renderless = (props, { computed, onMounted, reactive, watch, onBeforeUnmount }, { refs, nextTick, parent }) => {
  const api2 = {};
  const state = initState({ reactive, props, computed });
  initApi({ api: api2, state, props, refs, nextTick });
  initWatch({ watch, state, api: api2 });
  let fieldsEls;
  onMounted(() => {
    api2.changePlaceholder();
    fieldsEls = parent.$parent.$el.querySelectorAll("[data-credit-card-field]");
    toggleEvent({ api: api2, fieldsEls, type: "add" });
  });
  onBeforeUnmount(() => {
    toggleEvent({ api: api2, fieldsEls, type: "remove" });
    fieldsEls = null;
  });
  return api2;
};
export {
  api,
  renderless
};
