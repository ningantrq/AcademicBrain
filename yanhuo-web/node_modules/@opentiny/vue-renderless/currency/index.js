import "../chunk-G2ADBYYC.js";
import { isUndefined, isNull } from "../grid/static";
import { log } from "../common";
const init = ({ state, service, api }) => () => {
  const { textField, valueField } = service.fields;
  service.fetchCurrency().then((data) => {
    api.fixServiceData(data).then((result) => {
      state.options = result.map((item) => ({
        label: item[textField],
        value: item[valueField]
      }));
    });
  });
};
const change = (emit) => (value) => {
  emit("update:modelValue", value);
  emit("change", value);
};
const initService = ({ props, service }) => {
  const defaultCurrencySetting = {
    textField: "currency_code",
    valueField: "currency_code"
  };
  const { setting = {}, fetchCurrency } = service || {};
  const { options = {} } = setting;
  const fetchCurrencyNoop = () => Promise.resolve([]);
  return {
    fetchCurrency: props.fetchCurrency || fetchCurrency || fetchCurrencyNoop,
    fields: props.fields || options.Currency || defaultCurrencySetting
  };
};
const fixServiceData = ({ props, service }) => (data) => {
  const { textField, valueField } = service.fields;
  return new Promise((resolve) => {
    data = data || [];
    data = Array.isArray(data) ? data : [];
    const result = [];
    data.forEach((option) => {
      option = option || {};
      const value = option[valueField];
      const text = option[textField];
      if (isUndefined(value) || isNull(value)) {
        if (text) {
          option[valueField] = text;
        } else {
          log("data error. set it to the default value.", "warn");
          option[textField] = option[valueField] = props.currency;
        }
      }
      result.push(option);
    });
    resolve(result);
  });
};
export {
  change,
  fixServiceData,
  init,
  initService
};
