import {
  __spreadProps,
  __spreadValues
} from "../chunk-G2ADBYYC.js";
const computedCancel = ({ constants, props, t }) => () => props.cancelButton || t(constants.CANCEL_BUTTTON_TEXT);
const computedconfirm = ({ constants, props, t }) => () => props.saveButton || t(constants.SAVE_BUTTON_TEXT);
const computedSetLocalTips = ({ constants, props, t }) => () => props.tips || t(constants.LOCAL_TIPS);
const computedSetValueTitle = ({ constants, props, t }) => () => props.valueTitle || t(constants.VALUE_TITLE);
const computedSetLocalTitle = ({ constants, props, t }) => () => props.title || t(constants.LOCAL_TITLE);
const computedSetLabelTitle = ({ constants, props, t }) => () => props.labelTitle || t(constants.LABEL_TITLE);
const computedSetDialogTitle = ({ constants, props, t }) => () => props.dialogTitle || t(constants.DIALOG_TITLE);
const showDialog = (state) => () => {
  state.isShowDialog = true;
  state.cloneValue = state.value.map((item) => {
    if (item.hidden != void 0) {
      return __spreadValues({}, item);
    } else {
      return __spreadProps(__spreadValues({}, item), { hidden: false });
    }
  });
};
const closeDialog = (state) => () => {
  state.isShowDialog = false;
};
const checkAllHander = (state) => () => state.cloneValue = state.cloneValue.map((item) => __spreadProps(__spreadValues({}, item), {
  hidden: state.checkAll
}));
const checkValueHiddenItem = (state) => (index) => {
  let hiddenItemCount = 0;
  if (typeof index === "number") {
    state.cloneValue[index].hidden = !state.cloneValue[index].hidden;
  }
  state.cloneValue.forEach((item) => {
    if (item.hidden) {
      ++hiddenItemCount;
    }
  });
  if (hiddenItemCount > 0 && hiddenItemCount < state.cloneValue.length) {
    state.checkAll = false;
    return true;
  } else if (hiddenItemCount === 0) {
    state.checkAll = false;
    return false;
  } else if (hiddenItemCount === state.cloneValue.length) {
    state.checkAll = true;
    return false;
  }
};
const saveHandler = ({ emit, state, alert }) => () => {
  if (state.checkAll) {
    alert({ message: state.tips, title: "", status: "warning" });
    emit("saveWarning");
    return;
  }
  state.value = state.cloneValue;
  state.isShowDialog = false;
};
const watchValue = (state) => (value) => {
  state.value = value;
};
const watchTextSplit = (state) => (value) => {
  state.textSplit = value;
};
export {
  checkAllHander,
  checkValueHiddenItem,
  closeDialog,
  computedCancel,
  computedSetDialogTitle,
  computedSetLabelTitle,
  computedSetLocalTips,
  computedSetLocalTitle,
  computedSetValueTitle,
  computedconfirm,
  saveHandler,
  showDialog,
  watchTextSplit,
  watchValue
};
