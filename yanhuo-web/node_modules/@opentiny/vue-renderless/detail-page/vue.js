import "../chunk-G2ADBYYC.js";
import {
  watchTextSplit,
  watchValue,
  showDialog,
  saveHandler,
  checkAllHander,
  checkValueHiddenItem,
  closeDialog,
  computedCancel,
  computedconfirm,
  computedSetLocalTips,
  computedSetValueTitle,
  computedSetLocalTitle,
  computedSetLabelTitle,
  computedSetDialogTitle
} from "./index";
const api = [
  "state",
  "valueChange",
  "showDialog",
  "closeDialog",
  "checkAllHander",
  "saveHandler",
  "checkValueHiddenItem"
];
const initState = ({ reactive, computed, api: api2, props }) => {
  const state = reactive({
    value: props.modelValue,
    cloneValue: props.modelValue,
    textSplit: props.textSplit,
    isShowDialog: false,
    checkAll: false,
    indeterminate: computed(() => api2.checkValueHiddenItem()),
    tips: computed(() => api2.computedSetLocalTips()),
    saveButton: computed(() => api2.computedconfirm()),
    cancelButton: computed(() => api2.computedCancel()),
    title: computed(() => api2.computedSetLocalTitle()),
    labelTitle: computed(() => api2.computedSetLabelTitle()),
    valueTitle: computed(() => api2.computedSetValueTitle()),
    dialogTitle: computed(() => api2.computedSetDialogTitle())
  });
  return state;
};
const initApi = ({ api: api2, state, emit, alert, constants, props, t }) => {
  Object.assign(api2, {
    state,
    watchValue: watchValue(state),
    showDialog: showDialog(state),
    closeDialog: closeDialog(state),
    watchTextSplit: watchTextSplit(state),
    checkAllHander: checkAllHander(state),
    saveHandler: saveHandler({ emit, state, alert }),
    checkValueHiddenItem: checkValueHiddenItem(state),
    computedCancel: computedCancel({ constants, props, t }),
    computedconfirm: computedconfirm({ constants, props, t }),
    computedSetLocalTips: computedSetLocalTips({ constants, props, t }),
    computedSetValueTitle: computedSetValueTitle({ constants, props, t }),
    computedSetLocalTitle: computedSetLocalTitle({ constants, props, t }),
    computedSetLabelTitle: computedSetLabelTitle({ constants, props, t }),
    computedSetDialogTitle: computedSetDialogTitle({ api: api2, constants, props, t })
  });
};
const initWatch = ({ watch, props, api: api2 }) => {
  watch(() => props.modelValue, api2.watchValue, { immediate: true });
  watch(() => props.textSplit, api2.watchTextSplit, { immediate: true });
};
const renderless = (props, { computed, reactive, watch }, { t, emit, constants }, { alert }) => {
  const api2 = {};
  const state = initState({ reactive, computed, api: api2, props });
  initApi({ api: api2, state, emit, alert, constants, props, t });
  initWatch({ watch, props, api: api2 });
  return api2;
};
export {
  api,
  renderless
};
