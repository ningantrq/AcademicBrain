import "../chunk-G2ADBYYC.js";
import { handleChange, getValue, setValue, getGroup, mounted, customEvents } from "./index";
const api = ["state", "handleChange"];
const renderless = (props, { computed, reactive, onMounted, inject, onBeforeUnmount }, { emit, parent, dispatch, constants, nextTick, vm }) => {
  const state = reactive({
    disabled: inject("disabled", null) || props.disabled,
    type: inject("sliderType", null),
    value: computed({
      get: () => api2.getValue(),
      set: (val) => api2.setValue(val)
    }),
    sliderButtonGroup: computed(() => api2.getGroup()),
    size: inject("sliderSize", null),
    tabIndex: computed(() => state.sliderButtonGroup && state.value !== (props.label || props.text) ? -1 : 0)
  });
  const api2 = {};
  Object.assign(api2, {
    state,
    mounted: mounted({ vm, props, dispatch, constants, state, nextTick }),
    getValue: getValue(state),
    setValue: setValue({ emit, state }),
    getGroup: getGroup({ constants, parent }),
    handleChange: handleChange({ constants, dispatch, nextTick, state })
  });
  onMounted(() => {
    api2.mounted();
    customEvents({ props, vm, type: "add" });
  });
  onBeforeUnmount(() => {
    customEvents({ props, vm, type: "remove" });
  });
  return api2;
};
export {
  api,
  renderless
};
