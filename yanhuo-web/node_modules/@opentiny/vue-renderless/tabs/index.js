import "../chunk-G2ADBYYC.js";
const calcPaneInstances = ({
  constants,
  parent,
  state,
  childrenHandler
}) => (isForceUpdate = false) => {
  const tabItemVNodes = parent.$slots.default;
  if (tabItemVNodes) {
    const currentPanes = [];
    childrenHandler(({ vm, isLevel1 }) => {
      isLevel1 && vm.$options.componentName === constants.TAB_ITEM && currentPanes.push(vm);
    });
    const currentPaneStates = currentPanes.map((pane) => pane.state);
    const paneStates = state.panes.map((pane) => pane.state);
    let newPanes = [];
    for (let i = 0; i < paneStates.length; i++) {
      const paneState = paneStates[i];
      const index = currentPaneStates.indexOf(paneState);
      if (index > -1) {
        newPanes.push(state.panes[i]);
        currentPanes.splice(index, 1);
        currentPaneStates.splice(index, 1);
      }
    }
    newPanes = newPanes.concat(currentPanes);
    const panesChanged = !(newPanes.length === state.panes.length && newPanes.every((pane, index) => pane.state === state.panes[index].state));
    if (isForceUpdate || panesChanged) {
      state.panes = newPanes;
    }
  } else if (state.panes.length !== 0) {
    state.panes = [];
  }
};
const calcMorePanes = ({ parent, props, state, refs }) => () => {
  if (!props.showMoreTabs) {
    return;
  }
  const el = parent.$el;
  const tabs = el.querySelectorAll(".tiny-tabs__item");
  const tabNavRefs = refs.nav.$refs;
  if (tabs && tabs.length) {
    let tabsAllWidth = 0;
    for (let i = 0; i < tabs.length; i++) {
      const tabItem = tabs[i];
      tabsAllWidth = tabItem.offsetLeft + tabItem.offsetWidth / 2;
      const tabsHeaderWidth = tabNavRefs.navScroll.offsetWidth;
      const currentName = Number(state.currentName || 0);
      if (tabsAllWidth > tabsHeaderWidth && currentName >= 0) {
        if (currentName >= i + 1) {
          state.showPanesCount = currentName - 0;
        } else {
          state.showPanesCount = i;
        }
        break;
      }
    }
  }
};
const calcExpandPanes = ({ parent, props, state }) => () => {
  if (!props.showExpandTabs) {
    return;
  }
  const el = parent.$el;
  const tabsHeader = el.querySelector(".tiny-mobile-tabs__header");
  if (tabsHeader) {
    state.expandPanesWidth = tabsHeader.clientWidth;
  }
};
const handleTabClick = ({ api, emit, props, refs }) => (pane, tabName, event) => {
  if (pane.disabled) {
    return;
  }
  api.setCurrentName(tabName);
  emit("click", pane, event);
  if (props.showExpandTabs) {
    refs.nav && refs.nav.expandTabHide();
  }
};
const handleTabRemove = (emit) => (pane, event) => {
  if (pane.disabled) {
    return;
  }
  event.stopPropagation();
  emit("edit", pane.name, "remove");
  emit("close", pane.name);
};
const handleTabAdd = (emit) => () => {
  emit("edit", null, "add");
  emit("add");
};
const setCurrentName = ({ api, props, refs, state }) => (value) => {
  api.changeDirection(state.currentName);
  if (state.currentName !== value && props.beforeLeave) {
    const before = props.beforeLeave(value, state.currentName);
    if (before && before.then) {
      before.then(() => {
        api.changeCurrentName(value);
        refs.nav && refs.nav.removeFocus(value);
      });
    } else if (before !== false) {
      api.changeCurrentName(value);
    }
  } else {
    api.changeCurrentName(value);
  }
};
const changeCurrentName = ({ emit, state }) => (value) => {
  state.currentName = value;
  emit("update:modelValue", value);
};
const created = ({ api, parent, state }) => () => {
  api.changeDirection(state.currentName);
  parent.$on("tab-nav-update", api.calcPaneInstances.bind(null, true));
};
const changeDirection = ({ props, state }) => (currentName) => {
  const panes = state.panes;
  panes.forEach((item, index) => {
    if (item.state.paneName === currentName && state.currentIndex !== index) {
      const isTopOrBottom = ~["top", "bottom"].indexOf(props.position);
      const isPrev = state.currentIndex < index;
      state.direction = isTopOrBottom ? isPrev ? "right" : "left" : isPrev ? "bottom" : "top";
      state.currentIndex = index;
    }
  });
};
const handleTabDragStart = ({ emit }) => (event) => {
  emit("tab-drag-start", event);
};
const handleTabDragOver = ({ emit }) => (event) => {
  emit("tab-drag-over", event);
};
const handleTabDragEnd = ({ state, emit }) => (event) => {
  const { oldDraggableIndex, newDraggableIndex } = event;
  const panel = state.panes.splice(oldDraggableIndex, 1)[0];
  state.panes.splice(newDraggableIndex, 0, panel);
  emit("tab-drag-end", event);
};
export {
  calcExpandPanes,
  calcMorePanes,
  calcPaneInstances,
  changeCurrentName,
  changeDirection,
  created,
  handleTabAdd,
  handleTabClick,
  handleTabDragEnd,
  handleTabDragOver,
  handleTabDragStart,
  handleTabRemove,
  setCurrentName
};
