function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import { t } from "@opentiny/vue-locale";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var ISearchProps = _extends({}, $props, {
  mini: {
    type: Boolean,
    default: false
  },
  big: {
    type: Boolean,
    default: false
  },
  buttonText: {
    type: String,
    default: function _default() {
      return t("ui.search.placeholder");
    }
  },
  /**
   * 设置为透明模式，配置为true时，边框变为透明且收缩后半透明显示，一般用在带有背景的场景
   */
  transparent: {
    type: Boolean,
    default: false
  },
  /**
   * 搜索的类型选项，格式为[{text:'文档',value:1},...]，不配置时类型选择固定显示为All
   */
  searchTypes: {
    type: Array,
    default: function _default2() {
      return [];
    }
  },
  /**
   * 设置搜索输入框内的提示占位文本
   */
  placeholder: {
    type: String,
    default: ""
  },
  modelValue: {
    type: String,
    default: ""
  },
  clearable: {
    type: Boolean,
    default: false
  },
  tabindex: {
    type: String,
    default: "1"
  },
  /**
   * 配置搜索输入框enter键,enter按下触发搜索
   */
  isEnterSearch: {
    type: Boolean,
    default: true
  },
  /**
   * 配置主题色，primary:蓝 gray:灰
   */
  themeType: {
    type: String,
    default: "primary",
    validator: function validator(value) {
      return ["primary", "gray"].includes(value);
    }
  },
  showButton: {
    type: Boolean,
    default: false
  },
  changeBgColor: {
    type: Boolean,
    default: false
  },
  typeValue: Object
});
var Search = defineComponent({
  name: $prefix + "Search",
  props: ISearchProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
Search.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Search.install = function(Vue) {
  Vue.component(Search.name, Search);
};
Search.version = version;
export {
  Search as default
};
