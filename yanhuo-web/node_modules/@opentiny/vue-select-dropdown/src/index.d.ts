/**
 * Copyright (c) 2022 - present TinyVue Authors.
 * Copyright (c) 2022 - present Huawei Cloud Computing Technologies Co., Ltd.
 *
 * Use of this source code is governed by an MIT-style license.
 *
 * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
 * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR
 * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.
 *
 */
declare const _default: import("@vue/runtime-core").DefineComponent<{
    appendToBody: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    arrowOffset: {
        type: NumberConstructor;
        default: () => number;
    };
    boundariesPadding: {
        default: () => number;
    };
    isDropInheritWidth: BooleanConstructor;
    modelValue: BooleanConstructor;
    offset: {
        default: () => number;
    };
    placement: {
        default: () => string;
    };
    popper: {};
    popperOptions: {
        default: () => {
            gpuAcceleration: boolean;
        };
    };
    reference: {};
    visibleArrow: {
        default: () => boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    appendToBody: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    arrowOffset: {
        type: NumberConstructor;
        default: () => number;
    };
    boundariesPadding: {
        default: () => number;
    };
    isDropInheritWidth: BooleanConstructor;
    modelValue: BooleanConstructor;
    offset: {
        default: () => number;
    };
    placement: {
        default: () => string;
    };
    popper: {};
    popperOptions: {
        default: () => {
            gpuAcceleration: boolean;
        };
    };
    reference: {};
    visibleArrow: {
        default: () => boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    tiny_mode_root: boolean;
    modelValue: boolean;
    visibleArrow: boolean;
    arrowOffset: number;
    placement: string;
    appendToBody: boolean;
    offset: number;
    popperOptions: {
        gpuAcceleration: boolean;
    };
    boundariesPadding: number;
    isDropInheritWidth: boolean;
}, {}>;
export default _default;
