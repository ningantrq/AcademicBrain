function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $setup, $props } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileTemplate from "./mobile.js";
import MobileFirstTemplate from "./mobile-first.js";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile" === (tinyMode || mode)) {
    return MobileTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var $constants = {
  TIP_HEIGHT: 22,
  BUTTON_SIZE: 28,
  HALF_BAR_HEIGHT: 2,
  PC_TIP_CLS: "tiny-slider__tips",
  PC_SLIDER_CLS: "tiny-slider",
  PC_RANGE_CLS: "tiny-slider__range",
  PC_BUTTON_CLS: "tiny-slider__handle",
  PC_LEFT_SVG_CLS: "tiny-slider-left-svg",
  PC_RIGHT_SVG_CLS: "tiny-slider-right-svg",
  MOBILE_TIP_CLS: "tiny-mobile-slider__tips",
  MOBILE_SLIDER_CLS: "tiny-mobile-slider",
  MOBILE_RANGE_CLS: "tiny-mobile-slider__range",
  MOBILE_BUTTON_CLS: "tiny-mobile-slider__handle",
  MOBILE_LEFT_SVG_CLS: "tiny-mobile-slider-left-svg",
  MOBILE_RIGHT_SVG_CLS: "tiny-mobile-slider-right-svg",
  Mode: "pc",
  tipCls: function tipCls(mode) {
    return mode === this.Mode ? this.PC_TIP_CLS : this.MOBILE_TIP_CLS;
  },
  sliderCls: function sliderCls(mode) {
    return mode === this.Mode ? this.PC_SLIDER_CLS : this.MOBILE_SLIDER_CLS;
  },
  rangeCls: function rangeCls(mode) {
    return mode === this.Mode ? this.PC_RANGE_CLS : this.MOBILE_RANGE_CLS;
  },
  buttonCls: function buttonCls(mode) {
    return mode === this.Mode ? this.PC_BUTTON_CLS : this.MOBILE_BUTTON_CLS;
  },
  leftSvgCls: function leftSvgCls(mode) {
    return mode === this.Mode ? this.PC_LEFT_SVG_CLS : this.MOBILE_LEFT_SVG_CLS;
  },
  rightSvgCls: function rightSvgCls(mode) {
    return mode === this.Mode ? this.PC_RIGHT_SVG_CLS : this.MOBILE_RIGHT_SVG_CLS;
  },
  TIP_CLS: function TIP_CLS(mode) {
    return mode === this.Mode ? this.PC_TIP_CLS : this.MOBILE_TIP_CLS;
  },
  SLIDER_CLS: function SLIDER_CLS(mode) {
    return mode === this.Mode ? this.PC_SLIDER_CLS : this.MOBILE_SLIDER_CLS;
  },
  RANGE_CLS: function RANGE_CLS(mode) {
    return mode === this.Mode ? this.PC_RANGE_CLS : this.MOBILE_RANGE_CLS;
  },
  BUTTON_CLS: function BUTTON_CLS(mode) {
    return mode === this.Mode ? this.PC_BUTTON_CLS : this.MOBILE_BUTTON_CLS;
  }
};
var sliderProps = _extends({}, $props, {
  _constants: {
    type: Object,
    default: function _default() {
      return $constants;
    }
  },
  formatTooltip: Function,
  disabled: {
    type: Boolean,
    default: false
  },
  height: {
    type: String,
    default: "300px"
  },
  max: {
    type: Number,
    default: 100
  },
  min: {
    type: Number,
    default: 0
  },
  modelValue: {
    type: [Number, Array],
    default: 0
  },
  numPages: {
    type: Number,
    default: 1
  },
  range: {
    type: Boolean,
    default: false
  },
  showInput: {
    type: Boolean,
    default: false
  },
  showTip: {
    type: Boolean,
    default: true
  },
  step: {
    type: Number,
    default: 1
  },
  vertical: {
    type: Boolean,
    default: false
  },
  unit: {
    type: String,
    default: "%"
  },
  showSteps: {
    type: Boolean,
    default: false
  },
  showLabel: {
    type: Boolean,
    default: false
  }
});
var Slider = defineComponent({
  name: $prefix + "Slider",
  props: sliderProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
Slider.model = {
  prop: "modelValue",
  event: "update:modelValue"
};
Slider.install = function(Vue) {
  Vue.component(Slider.name, Slider);
};
Slider.version = version;
export {
  Slider as default
};
