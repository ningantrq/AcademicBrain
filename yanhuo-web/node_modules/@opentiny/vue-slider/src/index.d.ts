export declare const $constants: {
    TIP_HEIGHT: number;
    BUTTON_SIZE: number;
    HALF_BAR_HEIGHT: number;
    PC_TIP_CLS: string;
    PC_SLIDER_CLS: string;
    PC_RANGE_CLS: string;
    PC_BUTTON_CLS: string;
    PC_LEFT_SVG_CLS: string;
    PC_RIGHT_SVG_CLS: string;
    MOBILE_TIP_CLS: string;
    MOBILE_SLIDER_CLS: string;
    MOBILE_RANGE_CLS: string;
    MOBILE_BUTTON_CLS: string;
    MOBILE_LEFT_SVG_CLS: string;
    MOBILE_RIGHT_SVG_CLS: string;
    Mode: string;
    tipCls(mode: any): string;
    sliderCls(mode: any): string;
    rangeCls(mode: any): string;
    buttonCls(mode: any): string;
    leftSvgCls(mode: any): string;
    rightSvgCls(mode: any): string;
    TIP_CLS(mode: any): string;
    SLIDER_CLS(mode: any): string;
    RANGE_CLS(mode: any): string;
    BUTTON_CLS(mode: any): string;
};
export declare const sliderProps: {
    _constants: {
        type: ObjectConstructor;
        default: () => {
            TIP_HEIGHT: number;
            BUTTON_SIZE: number;
            HALF_BAR_HEIGHT: number;
            PC_TIP_CLS: string;
            PC_SLIDER_CLS: string;
            PC_RANGE_CLS: string;
            PC_BUTTON_CLS: string;
            PC_LEFT_SVG_CLS: string;
            PC_RIGHT_SVG_CLS: string;
            MOBILE_TIP_CLS: string;
            MOBILE_SLIDER_CLS: string;
            MOBILE_RANGE_CLS: string;
            MOBILE_BUTTON_CLS: string;
            MOBILE_LEFT_SVG_CLS: string;
            MOBILE_RIGHT_SVG_CLS: string;
            Mode: string;
            tipCls(mode: any): string;
            sliderCls(mode: any): string;
            rangeCls(mode: any): string;
            buttonCls(mode: any): string;
            leftSvgCls(mode: any): string;
            rightSvgCls(mode: any): string;
            TIP_CLS(mode: any): string;
            SLIDER_CLS(mode: any): string;
            RANGE_CLS(mode: any): string;
            BUTTON_CLS(mode: any): string;
        };
    };
    formatTooltip: FunctionConstructor;
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: StringConstructor;
        default: string;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    modelValue: {
        type: (ArrayConstructor | NumberConstructor)[];
        default: number;
    };
    numPages: {
        type: NumberConstructor;
        default: number;
    };
    range: {
        type: BooleanConstructor;
        default: boolean;
    };
    showInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTip: {
        type: BooleanConstructor;
        default: boolean;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    unit: {
        type: StringConstructor;
        default: string;
    };
    showSteps: {
        type: BooleanConstructor;
        default: boolean;
    };
    showLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};
declare const _default: import("@vue/runtime-core").DefineComponent<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            TIP_HEIGHT: number;
            BUTTON_SIZE: number;
            HALF_BAR_HEIGHT: number;
            PC_TIP_CLS: string;
            PC_SLIDER_CLS: string;
            PC_RANGE_CLS: string;
            PC_BUTTON_CLS: string;
            PC_LEFT_SVG_CLS: string;
            PC_RIGHT_SVG_CLS: string;
            MOBILE_TIP_CLS: string;
            MOBILE_SLIDER_CLS: string;
            MOBILE_RANGE_CLS: string;
            MOBILE_BUTTON_CLS: string;
            MOBILE_LEFT_SVG_CLS: string;
            MOBILE_RIGHT_SVG_CLS: string;
            Mode: string;
            tipCls(mode: any): string;
            sliderCls(mode: any): string;
            rangeCls(mode: any): string;
            buttonCls(mode: any): string;
            leftSvgCls(mode: any): string;
            rightSvgCls(mode: any): string;
            TIP_CLS(mode: any): string;
            SLIDER_CLS(mode: any): string;
            RANGE_CLS(mode: any): string;
            BUTTON_CLS(mode: any): string;
        };
    };
    formatTooltip: FunctionConstructor;
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: StringConstructor;
        default: string;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    modelValue: {
        type: (ArrayConstructor | NumberConstructor)[];
        default: number;
    };
    numPages: {
        type: NumberConstructor;
        default: number;
    };
    range: {
        type: BooleanConstructor;
        default: boolean;
    };
    showInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTip: {
        type: BooleanConstructor;
        default: boolean;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    unit: {
        type: StringConstructor;
        default: string;
    };
    showSteps: {
        type: BooleanConstructor;
        default: boolean;
    };
    showLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            TIP_HEIGHT: number;
            BUTTON_SIZE: number;
            HALF_BAR_HEIGHT: number;
            PC_TIP_CLS: string;
            PC_SLIDER_CLS: string;
            PC_RANGE_CLS: string;
            PC_BUTTON_CLS: string;
            PC_LEFT_SVG_CLS: string;
            PC_RIGHT_SVG_CLS: string;
            MOBILE_TIP_CLS: string;
            MOBILE_SLIDER_CLS: string;
            MOBILE_RANGE_CLS: string;
            MOBILE_BUTTON_CLS: string;
            MOBILE_LEFT_SVG_CLS: string;
            MOBILE_RIGHT_SVG_CLS: string;
            Mode: string;
            tipCls(mode: any): string;
            sliderCls(mode: any): string;
            rangeCls(mode: any): string;
            buttonCls(mode: any): string;
            leftSvgCls(mode: any): string;
            rightSvgCls(mode: any): string;
            TIP_CLS(mode: any): string;
            SLIDER_CLS(mode: any): string;
            RANGE_CLS(mode: any): string;
            BUTTON_CLS(mode: any): string;
        };
    };
    formatTooltip: FunctionConstructor;
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: StringConstructor;
        default: string;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    modelValue: {
        type: (ArrayConstructor | NumberConstructor)[];
        default: number;
    };
    numPages: {
        type: NumberConstructor;
        default: number;
    };
    range: {
        type: BooleanConstructor;
        default: boolean;
    };
    showInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTip: {
        type: BooleanConstructor;
        default: boolean;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    unit: {
        type: StringConstructor;
        default: string;
    };
    showSteps: {
        type: BooleanConstructor;
        default: boolean;
    };
    showLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    disabled: boolean;
    range: boolean;
    tiny_mode_root: boolean;
    _constants: Record<string, any>;
    height: string;
    modelValue: number | unknown[];
    vertical: boolean;
    max: number;
    min: number;
    step: number;
    showTip: boolean;
    unit: string;
    numPages: number;
    showInput: boolean;
    showSteps: boolean;
    showLabel: boolean;
}, {}>;
export default _default;
