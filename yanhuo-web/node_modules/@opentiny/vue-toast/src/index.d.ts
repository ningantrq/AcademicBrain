export declare const toastProps: {
    type: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    text: {
        type: StringConstructor;
        default: string;
    };
    time: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    timeout: {
        type: FunctionConstructor;
        default: null;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
};
declare const _default: import("@vue/runtime-core").DefineComponent<{
    type: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    text: {
        type: StringConstructor;
        default: string;
    };
    time: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    timeout: {
        type: FunctionConstructor;
        default: null;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, "timeout"[], "timeout", import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    type: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    text: {
        type: StringConstructor;
        default: string;
    };
    time: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    timeout: {
        type: FunctionConstructor;
        default: null;
    };
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>> & {
    onTimeout?: ((...args: any[]) => any) | undefined;
}, {
    text: string;
    time: string | number;
    tiny_mode_root: boolean;
    zIndex: number;
    timeout: Function;
}, {}>;
export default _default;
