function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
import { defineComponent, $prefix, $props, $setup, emitter, createComponent } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import "@opentiny/vue-theme/top-box/index.css";
var template = function template2(mode) {
  var _process$env;
  typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  return PcTemplate;
};
var $constants = {
  SUCCESS: "icon-success",
  INFO: "icon-info",
  WARNING: "icon-warning",
  ERROR: "icon-error",
  HELP: "icon-help"
};
var TopBoxConstructor = defineComponent({
  name: $prefix + "TopBox",
  props: _extends({}, $props, {
    emitter: Object,
    _constants: {
      type: Object,
      default: function _default() {
        return $constants;
      }
    }
  }),
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.13.0";
var instances = [];
var seed = 1;
var handleTopBoxMounted = function handleTopBoxMounted2(_ref) {
  var instance = _ref.instance, options = _ref.options;
  instance.$el.style.zIndex = instance.getZindex();
  var state = instance.state;
  for (var key in options) {
    if (Object.prototype.hasOwnProperty.call(state, key)) {
      state[key] = options[key];
    }
  }
  var verticalOffset = options.offset || 20;
  instances.forEach(function(item) {
    verticalOffset += item.$el.offsetHeight + 16;
  });
  state.verticalOffset = verticalOffset;
  state.visible = true;
  if (state.buttons && state.buttons.length) {
    state.buttons.map(function(button, key2) {
      if (key2 === 0) {
        !button.type && (button.type = "primary");
        !button.onClick && (button.onClick = function() {
          instance.close();
        });
      } else {
        !button.onClick && (button.onClick = function() {
        });
      }
      return button;
    });
  }
  instance.startTimer();
};
var TopBox = function TopBox2(options) {
  var _emitter = emitter();
  options = options || {};
  if (typeof options === "string") {
    options = {
      message: options
    };
  }
  var id = "message_" + seed++;
  var userOnClose = options.onClose;
  options.onClose = function() {
    TopBox2.close(id, userOnClose);
  };
  options.emitter = _emitter;
  var instance = createComponent({
    el: document.createElement("div"),
    propsData: options,
    component: TopBoxConstructor
  });
  instance.id = id;
  document.body.appendChild(instance.$el);
  instances.push(instance);
  _emitter.on("TopBoxMounted", function() {
    handleTopBoxMounted({
      instance,
      options
    });
  });
  return instance;
};
var topBox = TopBox;
var types = ["success", "warning", "info", "error", "help"];
types.forEach(function(type) {
  TopBox[type] = function(options) {
    if (typeof options === "string") {
      options = {
        message: options
      };
    }
    options.type = type;
    return topBox(options);
  };
});
var findRemove = function findRemove2(_ref2) {
  var id = _ref2.id, len = _ref2.len, userOnClose = _ref2.userOnClose;
  var index = -1;
  var removedHeight = 0;
  var instance;
  for (var i = 0; i < len; i++) {
    var tmp = instances[i];
    if (tmp.id === id) {
      index = i;
      removedHeight = tmp.$el.offsetHeight;
      instance = tmp;
      break;
    }
  }
  if (instance) {
    typeof userOnClose === "function" && userOnClose(instance);
    instances.splice(index, 1);
  }
  return {
    index,
    removedHeight
  };
};
var adjustTopOther = function adjustTopOther2(_ref3) {
  var index = _ref3.index, len = _ref3.len, removedHeight = _ref3.removedHeight;
  for (var i = index; i < len - 1; i++) {
    var dom = instances[i].$el;
    dom.style.top = parseInt(dom.style.top, 10) - removedHeight - 16 + "px";
  }
};
TopBox.close = function(id, userOnClose) {
  var len = instances.length;
  var _findRemove = findRemove({
    id,
    len,
    userOnClose
  }), index = _findRemove.index, removedHeight = _findRemove.removedHeight;
  if (len <= 1 || index === -1 || index > instances.length - 1)
    return;
  adjustTopOther({
    index,
    len,
    removedHeight
  });
};
TopBox.closeAll = function() {
  var copys = instances.slice(0);
  copys = copys.reverse();
  copys.forEach(function(instance) {
    instance.close();
  });
};
TopBox.version = version;
export {
  TopBox as default
};
