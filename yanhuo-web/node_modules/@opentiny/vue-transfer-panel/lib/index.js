import { defineComponent, $prefix, setup as _setup } from "@opentiny/vue-common";
import { renderless, api } from "@opentiny/vue-renderless/transfer-panel/vue";
import Checkbox from "@opentiny/vue-checkbox";
import Input from "@opentiny/vue-input";
import Pager from "@opentiny/vue-pager";
import { iconArrowDown, iconArrowUp, iconCheckedSur, iconCheck } from "@opentiny/vue-icon";
import { resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, createVNode, withCtx, createTextVNode, toDisplayString, createCommentVNode, createBlock, withDirectives, TransitionGroup, Fragment, renderList, withModifiers, vShow, resolveDynamicComponent, mergeProps, toHandlers, renderSlot } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  name: $prefix + "TransferPanel",
  componentName: "TransferPanel",
  inheritAttrs: false,
  components: {
    TinyCheckbox: Checkbox,
    TinyInput: Input,
    TinyPager: Pager,
    IconArrowDown: iconArrowDown(),
    IconArrowUp: iconArrowUp(),
    IconCheckedSur: iconCheckedSur(),
    IconCheck: iconCheck(),
    OptionContent: {
      props: {
        option: [Object, Array]
      },
      render: function render() {
        return this.option;
      }
    }
  },
  props: {
    columns: Array,
    data: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    defaultChecked: Array,
    filterMethod: Function,
    filterable: Boolean,
    format: Object,
    isToLeft: Boolean,
    optionRender: Function,
    pagerOp: Object,
    placeholder: String,
    props: Object,
    render: Object,
    renderContent: Function,
    showLeft: Boolean,
    showPager: Boolean,
    title: String,
    treeOp: Object,
    value: {
      type: Array,
      default: function _default2() {
        return [];
      }
    }
  },
  setup: function setup(props, context) {
    return _setup({
      props,
      context,
      renderless,
      api,
      mono: true
    });
  }
});
var _hoisted_1 = {
  class: "tiny-transfer-panel__header"
};
var _hoisted_2 = {
  key: 0,
  class: "headSort"
};
var _hoisted_3 = ["onClick"];
var _hoisted_4 = {
  class: "tiny-checkbox__inner"
};
var _hoisted_5 = ["disabled", "value"];
var _hoisted_6 = {
  class: "tiny-checkbox__label"
};
var _hoisted_7 = {
  key: 0,
  class: "tiny-transfer-panel__footer"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_icon_arrow_up = resolveComponent("icon-arrow-up");
  var _component_icon_arrow_down = resolveComponent("icon-arrow-down");
  var _component_tiny_checkbox = resolveComponent("tiny-checkbox");
  var _component_tiny_input = resolveComponent("tiny-input");
  var _component_icon_check = resolveComponent("icon-check");
  var _component_icon_checked_sur = resolveComponent("icon-checked-sur");
  var _component_option_content = resolveComponent("option-content");
  var _component_tiny_pager = resolveComponent("tiny-pager");
  return openBlock(), createElementBlock(
    "div",
    {
      class: normalizeClass(["tiny-transfer-panel", [_ctx.state.renderType === "TinyTable" ? "transferGrid" : ""]])
    },
    [createElementVNode("p", _hoisted_1, [createVNode(_component_tiny_checkbox, {
      modelValue: _ctx.state.allChecked,
      "onUpdate:modelValue": _cache[2] || (_cache[2] = function($event) {
        return _ctx.state.allChecked = $event;
      }),
      onChange: _ctx.handleAllCheckedChange,
      indeterminate: _ctx.state.isIndeterminate
    }, {
      default: withCtx(function() {
        return [createTextVNode(
          toDisplayString(_ctx.title) + " ",
          1
          /* TEXT */
        ), _ctx.render && _ctx.state.renderType !== "TinyTable" && _ctx.data.flag === "sort" ? (openBlock(), createElementBlock("div", _hoisted_2, [createElementVNode("div", {
          class: "sort-btn disabled up",
          onClick: _cache[0] || (_cache[0] = function($event) {
            return _ctx.setPosition("up", $event);
          })
        }, [createVNode(_component_icon_arrow_up, {
          fill: "#1890ff"
        })]), createElementVNode("div", {
          class: "sort-btn disabled down",
          onClick: _cache[1] || (_cache[1] = function($event) {
            return _ctx.setPosition("down", $event);
          })
        }, [createVNode(_component_icon_arrow_down, {
          fill: "#1890ff"
        })])])) : createCommentVNode("v-if", true), createElementVNode(
          "span",
          null,
          toDisplayString(_ctx.state.checkedSummary),
          1
          /* TEXT */
        )];
      }),
      _: 1
      /* STABLE */
    }, 8, ["modelValue", "onChange", "indeterminate"])]), createElementVNode(
      "div",
      {
        class: normalizeClass(["tiny-transfer-panel__body", _ctx.state.hasFooter ? "is-with-footer" : ""]),
        ref: "reference"
      },
      [_ctx.filterable ? (openBlock(), createBlock(_component_tiny_input, {
        key: 0,
        class: "tiny-transfer-panel__filter",
        modelValue: _ctx.state.query,
        "onUpdate:modelValue": _cache[4] || (_cache[4] = function($event) {
          return _ctx.state.query = $event;
        }),
        size: "small",
        placeholder: _ctx.placeholder,
        onMouseenter: _cache[5] || (_cache[5] = function($event) {
          return _ctx.state.inputHover = true;
        }),
        onMouseleave: _cache[6] || (_cache[6] = function($event) {
          return _ctx.state.inputHover = false;
        })
      }, {
        prefix: withCtx(function() {
          return [createElementVNode(
            "i",
            {
              class: normalizeClass(["tiny-input__icon", "tiny-icon-" + _ctx.state.inputIcon]),
              onClick: _cache[3] || (_cache[3] = function() {
                return _ctx.clearQuery && _ctx.clearQuery.apply(_ctx, arguments);
              })
            },
            null,
            2
            /* CLASS */
          )];
        }),
        _: 1
        /* STABLE */
      }, 8, ["modelValue", "placeholder"])) : createCommentVNode("v-if", true), withDirectives(createVNode(TransitionGroup, {
        name: "tiny-transition-transfer-fade",
        tag: "div",
        role: "group",
        "aria-label": "checkbox-group",
        class: normalizeClass(["tiny-checkbox-group tiny-transfer-panel__list", {
          "is-filterable": _ctx.filterable
        }])
      }, {
        default: withCtx(function() {
          return [(openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(_ctx.state.filteredData, function(item) {
              return openBlock(), createElementBlock("label", {
                class: normalizeClass(["tiny-checkbox tiny-transfer-panel__item", [item[_ctx.state.disabledProp] ? "is-disabled" : "", _ctx.state.checked.length > 0 && _ctx.state.checked.indexOf(item[_ctx.state.keyProp]) > -1 ? "is-checked" : ""]]),
                onClick: withModifiers(function($event) {
                  return _ctx.checkedEvent(item[_ctx.state.keyProp], item[_ctx.state.disabledProp]);
                }, ["stop", "prevent"]),
                key: item[_ctx.state.keyProp]
              }, [createElementVNode(
                "span",
                {
                  class: normalizeClass(["tiny-checkbox__input", [item[_ctx.state.disabledProp] ? "is-disabled" : "", _ctx.state.checked.length > 0 && _ctx.state.checked.indexOf(item[_ctx.state.keyProp]) > -1 ? "is-checked" : ""]])
                },
                [createElementVNode("span", _hoisted_4, [!(_ctx.state.checked.length > 0 && _ctx.state.checked.indexOf(item[_ctx.state.keyProp]) > -1) ? (openBlock(), createBlock(_component_icon_check, {
                  key: 0,
                  class: "tiny-svg-size"
                })) : (openBlock(), createBlock(_component_icon_checked_sur, {
                  key: 1,
                  class: "tiny-svg-size"
                }))]), createElementVNode("input", {
                  type: "checkbox",
                  "aria-hidden": "false",
                  disabled: item[_ctx.state.disabledProp],
                  class: "tiny-checkbox__original",
                  value: item[_ctx.state.keyProp]
                }, null, 8, _hoisted_5)],
                2
                /* CLASS */
              ), createElementVNode("span", _hoisted_6, [createVNode(_component_option_content, {
                option: _ctx.optionRender(item)
              }, null, 8, ["option"])])], 10, _hoisted_3);
            }),
            128
            /* KEYED_FRAGMENT */
          ))];
        }),
        _: 1
        /* STABLE */
      }, 8, ["class"]), [[vShow, !_ctx.render]]), _ctx.render && _ctx.render.plugin ? (openBlock(), createBlock(
        resolveDynamicComponent(_ctx.markRaw(_ctx.toRaw(_ctx.render.plugin))),
        mergeProps({
          key: 1,
          ref: "plugin"
        }, _ctx.state.render, toHandlers(_ctx.state.render.on)),
        null,
        16
        /* FULL_PROPS */
      )) : createCommentVNode("v-if", true), withDirectives(createVNode(_component_tiny_pager, {
        onSizeChange: _ctx.sizesChange,
        ref: "pager",
        total: _ctx.state.pagerTotal.length,
        "current-page": _ctx.state.currentPage,
        "onUpdate:currentPage": _cache[7] || (_cache[7] = function($event) {
          return _ctx.state.currentPage = $event;
        }),
        "page-size": _ctx.pagerOp.pageVO.pageSize,
        layout: _ctx.pagerOp.pageVO.layout,
        "page-sizes": _ctx.pagerOp.pageVO.pageSizes,
        mode: _ctx.pagerOp.mode,
        "pager-count": _ctx.pagerOp.pagerCount,
        onCurrentChange: _ctx.handlePageChange
      }, null, 8, ["onSizeChange", "total", "current-page", "page-size", "layout", "page-sizes", "mode", "pager-count", "onCurrentChange"]), [[vShow, _ctx.showPager && _ctx.state.renderType === "TinyTable"]]), withDirectives(createElementVNode(
        "p",
        {
          class: "tiny-transfer-panel__empty"
        },
        toDisplayString(_ctx.t("ui.transfer.noMatch")),
        513
        /* TEXT, NEED_PATCH */
      ), [[vShow, !_ctx.render && _ctx.state.hasNoMatch]]), withDirectives(createElementVNode(
        "p",
        {
          class: "tiny-transfer-panel__empty"
        },
        toDisplayString(_ctx.t("ui.transfer.noData")),
        513
        /* TEXT, NEED_PATCH */
      ), [[vShow, !_ctx.render && _ctx.data.length === 0 && !_ctx.state.hasNoMatch]])],
      2
      /* CLASS */
    ), _ctx.$parent.slots["left-footer"] || _ctx.$parent.slots["right-footer"] ? (openBlock(), createElementBlock("p", _hoisted_7, [renderSlot(_ctx.$slots, "default")])) : createCommentVNode("v-if", true)],
    2
    /* CLASS */
  );
}
var TransferPanel = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var version = "3.13.0";
TransferPanel.install = function(Vue) {
  Vue.component(TransferPanel.name, TransferPanel);
};
TransferPanel.version = version;
export {
  TransferPanel as default
};
