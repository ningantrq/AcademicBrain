import { renderless, api } from "@opentiny/vue-renderless/transfer/vue";
import { defineComponent, props, setup as _setup } from "@opentiny/vue-common";
import Button from "@opentiny/vue-button";
import TransferPanel from "@opentiny/vue-transfer-panel";
import { iconDoubleLeft, iconChevronLeft, iconChevronRight, iconDoubleRight } from "@opentiny/vue-icon";
import { resolveComponent, openBlock, createElementBlock, createBlock, mergeProps, withCtx, renderSlot, createCommentVNode, createElementVNode, createVNode, normalizeClass, toDisplayString } from "vue";
function _createForOfIteratorHelperLoose_tiny(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray_tiny(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray_tiny(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray_tiny(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray_tiny(o, minLen);
}
function _arrayLikeToArray_tiny(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose_tiny(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  components: {
    TinyButton: Button,
    TinyTransferPanel: TransferPanel,
    IconDoubleLeft: iconDoubleLeft(),
    IconChevronLeft: iconChevronLeft(),
    IconChevronRight: iconChevronRight(),
    IconDoubleRight: iconDoubleRight()
  },
  props: [].concat(props, ["data", "titles", "buttonTexts", "filterPlaceholder", "filterMethod", "leftDefaultChecked", "rightDefaultChecked", "renderContent", "modelValue", "format", "filterable", "props", "targetOrder", "dropConfig", "showAllBtn", "toLeftDisable", "toRightDisable", "renderType", "columns", "pageVO", "pagerOp", "showPager", "render", "treeOp", "beforeTransfer"]),
  setup: function setup(props2, context) {
    return _setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "tiny-transfer"
};
var _hoisted_2 = {
  key: 1,
  class: "tiny-transfer-panel transfer-custom-left-panel"
};
var _hoisted_3 = {
  class: "tiny-transfer__buttons"
};
var _hoisted_4 = {
  class: "defaultButton"
};
var _hoisted_5 = {
  key: 0
};
var _hoisted_6 = {
  key: 0
};
var _hoisted_7 = {
  key: 3,
  class: "tiny-transfer-panel transfer-custom-right-panel"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_transfer_panel = resolveComponent("tiny-transfer-panel");
  var _component_icon_double_right = resolveComponent("icon-double-right");
  var _component_tiny_button = resolveComponent("tiny-button");
  var _component_icon_chevron_right = resolveComponent("icon-chevron-right");
  var _component_icon_chevron_left = resolveComponent("icon-chevron-left");
  var _component_icon_double_left = resolveComponent("icon-double-left");
  return openBlock(), createElementBlock("div", _hoisted_1, [!_ctx.slots["right-panel"] && !_ctx.slots["left-panel"] ? (openBlock(), createBlock(_component_tiny_transfer_panel, mergeProps({
    key: 0,
    id: "leftPanel"
  }, _ctx.$props, {
    "option-render": _ctx.state.optionRender,
    "tree-op": _ctx.treeOp,
    render: _ctx.render,
    "show-pager": _ctx.showPager,
    "pager-op": _ctx.pagerOp,
    ref: "leftPanel",
    pageVO: _ctx.pageVO,
    "render-type": _ctx.renderType,
    columns: _ctx.columns,
    data: _ctx.state.sourceData,
    title: _ctx.titles[0] || _ctx.t("ui.transfer.titles.0"),
    "default-checked": _ctx.leftDefaultChecked,
    placeholder: _ctx.filterPlaceholder || _ctx.t("ui.transfer.filterPlaceholder"),
    onCheckedChange: _ctx.onSourceCheckedChange
  }), {
    default: withCtx(function() {
      return [renderSlot(_ctx.$slots, "left-footer"), renderSlot(_ctx.$slots, "filter")];
    }),
    _: 3
    /* FORWARDED */
  }, 16, ["option-render", "tree-op", "render", "show-pager", "pager-op", "pageVO", "render-type", "columns", "data", "title", "default-checked", "placeholder", "onCheckedChange"])) : createCommentVNode("v-if", true), _ctx.slots["left-panel"] && _ctx.slots["right-panel"] ? (openBlock(), createElementBlock("div", _hoisted_2, [renderSlot(_ctx.$slots, "left-panel")])) : createCommentVNode("v-if", true), createElementVNode("div", _hoisted_3, [renderSlot(_ctx.$slots, "button-panel", {}, function() {
    return [_ctx.showAllBtn ? (openBlock(), createBlock(_component_tiny_button, {
      key: 0,
      type: "primary",
      disabled: _ctx.state.leftData.length === 0,
      class: "tiny-transfer__button",
      onClick: _cache[0] || (_cache[0] = function($event) {
        return _ctx.addToRight("all");
      })
    }, {
      default: withCtx(function() {
        return [createVNode(_component_icon_double_right, {
          class: "tiny-svg-size"
        })];
      }),
      _: 1
      /* STABLE */
    }, 8, ["disabled"])) : createCommentVNode("v-if", true), createElementVNode("div", _hoisted_4, [createVNode(_component_tiny_button, {
      type: "primary",
      class: normalizeClass(["tiny-transfer__button", _ctx.state.hasButtonTexts ? "is-with-texts" : ""]),
      onClick: _ctx.addToRight,
      disabled: _ctx.toLeftDisable && _ctx.state.leftChecked.length === 0
    }, {
      default: withCtx(function() {
        return [_ctx.buttonTexts[1] !== void 0 ? (openBlock(), createElementBlock(
          "span",
          _hoisted_5,
          toDisplayString(_ctx.buttonTexts[1]),
          1
          /* TEXT */
        )) : createCommentVNode("v-if", true), createVNode(_component_icon_chevron_right, {
          class: "tiny-svg-size"
        })];
      }),
      _: 1
      /* STABLE */
    }, 8, ["class", "onClick", "disabled"]), createVNode(_component_tiny_button, {
      type: "primary",
      class: normalizeClass(["tiny-transfer__button", _ctx.state.hasButtonTexts ? "is-with-texts" : ""]),
      onClick: _ctx.addToLeft,
      disabled: _ctx.toRightDisable && _ctx.state.rightChecked.length === 0
    }, {
      default: withCtx(function() {
        return [createVNode(_component_icon_chevron_left, {
          class: "tiny-svg-size"
        }), _ctx.buttonTexts[0] !== void 0 ? (openBlock(), createElementBlock(
          "span",
          _hoisted_6,
          toDisplayString(_ctx.buttonTexts[0]),
          1
          /* TEXT */
        )) : createCommentVNode("v-if", true)];
      }),
      _: 1
      /* STABLE */
    }, 8, ["class", "onClick", "disabled"])]), _ctx.showAllBtn ? (openBlock(), createBlock(_component_tiny_button, {
      key: 1,
      type: "primary",
      disabled: _ctx.state.rightData.length === 0,
      class: "tiny-transfer__button",
      onClick: _cache[1] || (_cache[1] = function($event) {
        return _ctx.addToLeft("all");
      })
    }, {
      default: withCtx(function() {
        return [createVNode(_component_icon_double_left, {
          class: "tiny-svg-size"
        })];
      }),
      _: 1
      /* STABLE */
    }, 8, ["disabled"])) : createCommentVNode("v-if", true)];
  })]), !_ctx.slots["right-panel"] && !_ctx.slots["left-panel"] ? (openBlock(), createBlock(_component_tiny_transfer_panel, mergeProps({
    key: 2
  }, _ctx.$props, {
    id: "rightPanel",
    render: _ctx.render,
    "option-render": _ctx.state.optionRender,
    "tree-op": _ctx.treeOp,
    "show-pager": _ctx.showPager,
    "is-to-left": _ctx.state.isToLeft,
    "pager-op": _ctx.pagerOp,
    ref: "rightPanel",
    pageVO: _ctx.pageVO,
    "render-type": _ctx.renderType,
    columns: _ctx.columns,
    data: _ctx.state.targetData,
    title: _ctx.titles[1] || _ctx.t("ui.transfer.titles.1"),
    "default-checked": _ctx.rightDefaultChecked,
    placeholder: _ctx.filterPlaceholder || _ctx.t("ui.transfer.filterPlaceholder"),
    onCheckedChange: _ctx.onTargetCheckedChange
  }), {
    default: withCtx(function() {
      return [renderSlot(_ctx.$slots, "right-footer"), renderSlot(_ctx.$slots, "filter")];
    }),
    _: 3
    /* FORWARDED */
  }, 16, ["render", "option-render", "tree-op", "show-pager", "is-to-left", "pager-op", "pageVO", "render-type", "columns", "data", "title", "default-checked", "placeholder", "onCheckedChange"])) : createCommentVNode("v-if", true), _ctx.slots["left-panel"] && _ctx.slots["right-panel"] ? (openBlock(), createElementBlock("div", _hoisted_7, [renderSlot(_ctx.$slots, "right-panel")])) : createCommentVNode("v-if", true)]);
}
var pc = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  pc as default
};
