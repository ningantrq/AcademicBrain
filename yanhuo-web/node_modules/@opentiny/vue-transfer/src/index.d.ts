declare const _default: import("@vue/runtime-core").DefineComponent<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            ISCHECKED: string;
            DROPPANEL: string;
            TRANSFERPANEL: string;
        };
    };
    buttonTexts: {
        type: ArrayConstructor;
        default: () => never[];
    };
    columns: ArrayConstructor;
    data: {
        type: ArrayConstructor;
        default: () => never[];
    };
    dropConfig: ObjectConstructor;
    filterMethod: FunctionConstructor;
    filterPlaceholder: {
        type: StringConstructor;
        default: string;
    };
    filterable: BooleanConstructor;
    format: {
        type: ObjectConstructor;
        default: () => {};
    };
    leftDefaultChecked: {
        type: ArrayConstructor;
        default: () => never[];
    };
    modelValue: {
        type: ArrayConstructor;
        default: () => never[];
    };
    pagerOp: {
        type: ObjectConstructor;
        default: () => {
            mode: string;
            pageVO: {
                currentPage: number;
                pageSize: number;
            };
        };
    };
    props: {
        type: ObjectConstructor;
        default: () => {
            label: string;
            key: string;
            disabled: string;
        };
    };
    render: ObjectConstructor;
    renderContent: FunctionConstructor;
    renderType: StringConstructor;
    rightDefaultChecked: {
        type: ArrayConstructor;
        default: () => never[];
    };
    showAllBtn: BooleanConstructor;
    showPager: {
        type: BooleanConstructor;
        default: boolean;
    };
    targetOrder: {
        type: StringConstructor;
        default: string;
    };
    titles: {
        type: ArrayConstructor;
        default: () => never[];
    };
    toLeftDisable: {
        type: BooleanConstructor;
        default: boolean;
    };
    toRightDisable: {
        type: BooleanConstructor;
        default: boolean;
    };
    treeOp: ObjectConstructor;
    beforeTransfer: FunctionConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    _constants: {
        type: ObjectConstructor;
        default: () => {
            ISCHECKED: string;
            DROPPANEL: string;
            TRANSFERPANEL: string;
        };
    };
    buttonTexts: {
        type: ArrayConstructor;
        default: () => never[];
    };
    columns: ArrayConstructor;
    data: {
        type: ArrayConstructor;
        default: () => never[];
    };
    dropConfig: ObjectConstructor;
    filterMethod: FunctionConstructor;
    filterPlaceholder: {
        type: StringConstructor;
        default: string;
    };
    filterable: BooleanConstructor;
    format: {
        type: ObjectConstructor;
        default: () => {};
    };
    leftDefaultChecked: {
        type: ArrayConstructor;
        default: () => never[];
    };
    modelValue: {
        type: ArrayConstructor;
        default: () => never[];
    };
    pagerOp: {
        type: ObjectConstructor;
        default: () => {
            mode: string;
            pageVO: {
                currentPage: number;
                pageSize: number;
            };
        };
    };
    props: {
        type: ObjectConstructor;
        default: () => {
            label: string;
            key: string;
            disabled: string;
        };
    };
    render: ObjectConstructor;
    renderContent: FunctionConstructor;
    renderType: StringConstructor;
    rightDefaultChecked: {
        type: ArrayConstructor;
        default: () => never[];
    };
    showAllBtn: BooleanConstructor;
    showPager: {
        type: BooleanConstructor;
        default: boolean;
    };
    targetOrder: {
        type: StringConstructor;
        default: string;
    };
    titles: {
        type: ArrayConstructor;
        default: () => never[];
    };
    toLeftDisable: {
        type: BooleanConstructor;
        default: boolean;
    };
    toRightDisable: {
        type: BooleanConstructor;
        default: boolean;
    };
    treeOp: ObjectConstructor;
    beforeTransfer: FunctionConstructor;
    tiny_mode: StringConstructor;
    tiny_mode_root: BooleanConstructor;
    tiny_template: (ObjectConstructor | FunctionConstructor)[];
    tiny_renderless: FunctionConstructor;
    tiny_theme: StringConstructor;
    tiny_chart_theme: ObjectConstructor;
}>>, {
    format: Record<string, any>;
    data: unknown[];
    props: Record<string, any>;
    tiny_mode_root: boolean;
    _constants: Record<string, any>;
    modelValue: unknown[];
    filterable: boolean;
    showPager: boolean;
    pagerOp: Record<string, any>;
    titles: unknown[];
    buttonTexts: unknown[];
    filterPlaceholder: string;
    leftDefaultChecked: unknown[];
    rightDefaultChecked: unknown[];
    targetOrder: string;
    showAllBtn: boolean;
    toLeftDisable: boolean;
    toRightDisable: boolean;
}, {}>;
export default _default;
