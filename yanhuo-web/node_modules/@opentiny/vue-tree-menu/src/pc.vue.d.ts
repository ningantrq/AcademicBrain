declare const _default: import("@vue/runtime-core").DefineComponent<{
    placeholder: {
        default: string;
        type: StringConstructor;
    };
    data: ArrayConstructor;
    nodeKey: StringConstructor;
    defaultExpandAll: BooleanConstructor;
    suffixIcon: ObjectConstructor;
    prefixIcon: ObjectConstructor;
    searchIcon: {
        type: ObjectConstructor;
        default: () => import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    props: ObjectConstructor;
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    emptyText: {
        type: StringConstructor;
        default: string;
    };
    checkStrictly: BooleanConstructor;
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    load: FunctionConstructor;
    showCheckbox: BooleanConstructor;
    filterNodeMethod: FunctionConstructor;
    defaultCheckedKeys: ArrayConstructor;
    defaultExpandedKeys: ArrayConstructor;
    defaultExpandedKeysHighlight: (StringConstructor | NumberConstructor)[];
    indent: {
        type: NumberConstructor;
        default: number;
    };
    allowDrag: FunctionConstructor;
    allowDrop: FunctionConstructor;
    expandOnClickNode: {
        type: BooleanConstructor;
        default: boolean;
    };
    ellipsis: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrap: {
        type: BooleanConstructor;
        default: boolean;
    };
    getMenuDataSync: FunctionConstructor;
    accordion: BooleanConstructor;
    showTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    showFilter: {
        type: BooleanConstructor;
        default: boolean;
    };
    collapsible: {
        type: BooleanConstructor;
        default: boolean;
    };
    showNumber: {
        type: BooleanConstructor;
        default: boolean;
    };
    nodeHeight: NumberConstructor;
    onlyCheckChildren: {
        type: BooleanConstructor;
        default: boolean;
    };
    menuCollapsible: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    t: (this: any, path: any, options?: any) => any;
    vm: any;
    f: (props: any, attrs?: {}) => {};
    a: (attrs: any, filters: any, include: any) => {};
    d: (props: any) => void;
    dp: (props: any) => void;
    gcls: (key: any) => any;
}, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    placeholder: {
        default: string;
        type: StringConstructor;
    };
    data: ArrayConstructor;
    nodeKey: StringConstructor;
    defaultExpandAll: BooleanConstructor;
    suffixIcon: ObjectConstructor;
    prefixIcon: ObjectConstructor;
    searchIcon: {
        type: ObjectConstructor;
        default: () => import("@vue/reactivity").Raw<import("@vue/runtime-core").DefineComponent<{}, () => import("@vue/runtime-core").VNode<import("@vue/runtime-core").RendererNode, import("@vue/runtime-core").RendererElement, {
            [key: string]: any;
        }>, {}, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{}>>, {}, {}>>;
    };
    props: ObjectConstructor;
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    emptyText: {
        type: StringConstructor;
        default: string;
    };
    checkStrictly: BooleanConstructor;
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    load: FunctionConstructor;
    showCheckbox: BooleanConstructor;
    filterNodeMethod: FunctionConstructor;
    defaultCheckedKeys: ArrayConstructor;
    defaultExpandedKeys: ArrayConstructor;
    defaultExpandedKeysHighlight: (StringConstructor | NumberConstructor)[];
    indent: {
        type: NumberConstructor;
        default: number;
    };
    allowDrag: FunctionConstructor;
    allowDrop: FunctionConstructor;
    expandOnClickNode: {
        type: BooleanConstructor;
        default: boolean;
    };
    ellipsis: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrap: {
        type: BooleanConstructor;
        default: boolean;
    };
    getMenuDataSync: FunctionConstructor;
    accordion: BooleanConstructor;
    showTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    showFilter: {
        type: BooleanConstructor;
        default: boolean;
    };
    collapsible: {
        type: BooleanConstructor;
        default: boolean;
    };
    showNumber: {
        type: BooleanConstructor;
        default: boolean;
    };
    nodeHeight: NumberConstructor;
    onlyCheckChildren: {
        type: BooleanConstructor;
        default: boolean;
    };
    menuCollapsible: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    ellipsis: boolean;
    checkStrictly: boolean;
    wrap: boolean;
    showTitle: boolean;
    placeholder: string;
    lazy: boolean;
    accordion: boolean;
    draggable: boolean;
    indent: number;
    defaultExpandAll: boolean;
    emptyText: string;
    expandOnClickNode: boolean;
    showCheckbox: boolean;
    showNumber: boolean;
    collapsible: boolean;
    searchIcon: Record<string, any>;
    showFilter: boolean;
    onlyCheckChildren: boolean;
    menuCollapsible: boolean;
}, {}>;
export default _default;
